
STM32F417 Demo Board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004930  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08004ab8  08004ab8  00005ab8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b34  08004b34  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  08004b34  08004b34  00005b34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004b3c  08004b3c  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b3c  08004b3c  00005b3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b40  08004b40  00005b40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08004b44  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000605c  2**0
                  CONTENTS
 10 .bss          00000594  2000005c  2000005c  0000605c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200005f0  200005f0  0000605c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001f6f0  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000390c  00000000  00000000  0002577c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001160  00000000  00000000  00029088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d77  00000000  00000000  0002a1e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027e6c  00000000  00000000  0002af5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000160d0  00000000  00000000  00052dcb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e2430  00000000  00000000  00068e9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0014b2cb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005150  00000000  00000000  0014b310  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000075  00000000  00000000  00150460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000005c 	.word	0x2000005c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004aa0 	.word	0x08004aa0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000060 	.word	0x20000060
 80001c4:	08004aa0 	.word	0x08004aa0

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <_ZSt23__is_constant_evaluatedv>:
  // This can be used without checking if the compiler supports the feature.
  // The macro _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED can be used to check if
  // the compiler support is present to make this function work as expected.
  _GLIBCXX_CONSTEXPR inline bool
  __is_constant_evaluated() _GLIBCXX_NOEXCEPT
  {
 80004c8:	b480      	push	{r7}
 80004ca:	af00      	add	r7, sp, #0
#if __cpp_if_consteval >= 202106L
# define _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED 1
    if consteval { return true; } else { return false; }
#elif __cplusplus >= 201103L && __has_builtin(__builtin_is_constant_evaluated)
# define _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED 1
    return __builtin_is_constant_evaluated();
 80004cc:	2300      	movs	r3, #0
#else
    return false;
#endif
  }
 80004ce:	4618      	mov	r0, r3
 80004d0:	46bd      	mov	sp, r7
 80004d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d6:	4770      	bx	lr

080004d8 <_ZN3LCDC1ER3I2ChR4GPIOS3_>:
 *      Author: Ahmed
 */

#include "LCD.h"

LCD::LCD(I2C & i2c,
 80004d8:	b580      	push	{r7, lr}
 80004da:	b086      	sub	sp, #24
 80004dc:	af00      	add	r7, sp, #0
 80004de:	60f8      	str	r0, [r7, #12]
 80004e0:	60b9      	str	r1, [r7, #8]
 80004e2:	603b      	str	r3, [r7, #0]
 80004e4:	4613      	mov	r3, r2
 80004e6:	71fb      	strb	r3, [r7, #7]
		const uint8_t deviceAddress,
		GPIO & errLed,
		GPIO & sucLed)
	:	i2c(i2c)
 80004e8:	68fb      	ldr	r3, [r7, #12]
 80004ea:	68ba      	ldr	r2, [r7, #8]
 80004ec:	601a      	str	r2, [r3, #0]
	,	readAddress	((deviceAddress << 1) + 1)
 80004ee:	79fb      	ldrb	r3, [r7, #7]
 80004f0:	005b      	lsls	r3, r3, #1
 80004f2:	b2db      	uxtb	r3, r3
 80004f4:	3301      	adds	r3, #1
 80004f6:	b2da      	uxtb	r2, r3
 80004f8:	68fb      	ldr	r3, [r7, #12]
 80004fa:	711a      	strb	r2, [r3, #4]
	,	writeAddress((deviceAddress << 1) + 0)
 80004fc:	79fb      	ldrb	r3, [r7, #7]
 80004fe:	005b      	lsls	r3, r3, #1
 8000500:	b2da      	uxtb	r2, r3
 8000502:	68fb      	ldr	r3, [r7, #12]
 8000504:	715a      	strb	r2, [r3, #5]
	,	hardwareSettings_EMS(EMS_BASE	| (1 * EMS_INCREMENT)	| (0 * EMS_SHIFT))
 8000506:	68fb      	ldr	r3, [r7, #12]
 8000508:	2206      	movs	r2, #6
 800050a:	719a      	strb	r2, [r3, #6]
	,	hardwareSettings_DCB(DCB_BASE	| (1 * DCB_DISPLAY)		| (0 * DCB_CURSOR)		| (0 * DCB_BLINK))
 800050c:	68fb      	ldr	r3, [r7, #12]
 800050e:	220c      	movs	r2, #12
 8000510:	71da      	strb	r2, [r3, #7]
	,	hardwareSettings_FNS(FNS_BASE	| (1 * FNS_DATALENGTH)	| (1 * FNS_LINENUMBER)	| (0 * FNS_FONT))
 8000512:	68fb      	ldr	r3, [r7, #12]
 8000514:	2238      	movs	r2, #56	@ 0x38
 8000516:	721a      	strb	r2, [r3, #8]
	,	errorLed(errLed)
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	683a      	ldr	r2, [r7, #0]
 800051c:	60da      	str	r2, [r3, #12]
	,	successLed(sucLed)
 800051e:	68fb      	ldr	r3, [r7, #12]
 8000520:	6a3a      	ldr	r2, [r7, #32]
 8000522:	611a      	str	r2, [r3, #16]
{
	HAL_StatusTypeDef result;
	HAL_Delay(500);
 8000524:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000528:	f001 fe06 	bl	8002138 <HAL_Delay>

	result = SendInstruction(hardwareSettings_FNS);
 800052c:	68fb      	ldr	r3, [r7, #12]
 800052e:	7a1b      	ldrb	r3, [r3, #8]
 8000530:	4619      	mov	r1, r3
 8000532:	68f8      	ldr	r0, [r7, #12]
 8000534:	f000 f8d2 	bl	80006dc <_ZNK3LCD15SendInstructionEh>
 8000538:	4603      	mov	r3, r0
 800053a:	75fb      	strb	r3, [r7, #23]
	DisplayResult(result);
 800053c:	f107 0317 	add.w	r3, r7, #23
 8000540:	4619      	mov	r1, r3
 8000542:	68f8      	ldr	r0, [r7, #12]
 8000544:	f000 f8f0 	bl	8000728 <_ZNK3LCD13DisplayResultERK17HAL_StatusTypeDef>
	HAL_Delay(500);
 8000548:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800054c:	f001 fdf4 	bl	8002138 <HAL_Delay>
	ClearResult();
 8000550:	68f8      	ldr	r0, [r7, #12]
 8000552:	f000 f90b 	bl	800076c <_ZNK3LCD11ClearResultEv>
	HAL_Delay(500);
 8000556:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800055a:	f001 fded 	bl	8002138 <HAL_Delay>
	
	result = SendInstruction(hardwareSettings_DCB);
 800055e:	68fb      	ldr	r3, [r7, #12]
 8000560:	79db      	ldrb	r3, [r3, #7]
 8000562:	4619      	mov	r1, r3
 8000564:	68f8      	ldr	r0, [r7, #12]
 8000566:	f000 f8b9 	bl	80006dc <_ZNK3LCD15SendInstructionEh>
 800056a:	4603      	mov	r3, r0
 800056c:	75fb      	strb	r3, [r7, #23]
	DisplayResult(result);
 800056e:	f107 0317 	add.w	r3, r7, #23
 8000572:	4619      	mov	r1, r3
 8000574:	68f8      	ldr	r0, [r7, #12]
 8000576:	f000 f8d7 	bl	8000728 <_ZNK3LCD13DisplayResultERK17HAL_StatusTypeDef>
	HAL_Delay(500);
 800057a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800057e:	f001 fddb 	bl	8002138 <HAL_Delay>
	ClearResult();
 8000582:	68f8      	ldr	r0, [r7, #12]
 8000584:	f000 f8f2 	bl	800076c <_ZNK3LCD11ClearResultEv>
	HAL_Delay(500);
 8000588:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800058c:	f001 fdd4 	bl	8002138 <HAL_Delay>

	result = ClearDisplay();
 8000590:	68f8      	ldr	r0, [r7, #12]
 8000592:	f000 f831 	bl	80005f8 <_ZNK3LCD12ClearDisplayEv>
 8000596:	4603      	mov	r3, r0
 8000598:	75fb      	strb	r3, [r7, #23]
	DisplayResult(result);
 800059a:	f107 0317 	add.w	r3, r7, #23
 800059e:	4619      	mov	r1, r3
 80005a0:	68f8      	ldr	r0, [r7, #12]
 80005a2:	f000 f8c1 	bl	8000728 <_ZNK3LCD13DisplayResultERK17HAL_StatusTypeDef>
	HAL_Delay(500);
 80005a6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80005aa:	f001 fdc5 	bl	8002138 <HAL_Delay>
	ClearResult();
 80005ae:	68f8      	ldr	r0, [r7, #12]
 80005b0:	f000 f8dc 	bl	800076c <_ZNK3LCD11ClearResultEv>
	HAL_Delay(500);
 80005b4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80005b8:	f001 fdbe 	bl	8002138 <HAL_Delay>

	result = SendInstruction(hardwareSettings_EMS);
 80005bc:	68fb      	ldr	r3, [r7, #12]
 80005be:	799b      	ldrb	r3, [r3, #6]
 80005c0:	4619      	mov	r1, r3
 80005c2:	68f8      	ldr	r0, [r7, #12]
 80005c4:	f000 f88a 	bl	80006dc <_ZNK3LCD15SendInstructionEh>
 80005c8:	4603      	mov	r3, r0
 80005ca:	75fb      	strb	r3, [r7, #23]
	DisplayResult(result);
 80005cc:	f107 0317 	add.w	r3, r7, #23
 80005d0:	4619      	mov	r1, r3
 80005d2:	68f8      	ldr	r0, [r7, #12]
 80005d4:	f000 f8a8 	bl	8000728 <_ZNK3LCD13DisplayResultERK17HAL_StatusTypeDef>
	HAL_Delay(500);
 80005d8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80005dc:	f001 fdac 	bl	8002138 <HAL_Delay>
	ClearResult();
 80005e0:	68f8      	ldr	r0, [r7, #12]
 80005e2:	f000 f8c3 	bl	800076c <_ZNK3LCD11ClearResultEv>
	HAL_Delay(500);
 80005e6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80005ea:	f001 fda5 	bl	8002138 <HAL_Delay>
}
 80005ee:	68fb      	ldr	r3, [r7, #12]
 80005f0:	4618      	mov	r0, r3
 80005f2:	3718      	adds	r7, #24
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}

080005f8 <_ZNK3LCD12ClearDisplayEv>:




HAL_StatusTypeDef LCD::ClearDisplay() const
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b082      	sub	sp, #8
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
	return SendInstruction(0x01);
 8000600:	2101      	movs	r1, #1
 8000602:	6878      	ldr	r0, [r7, #4]
 8000604:	f000 f86a 	bl	80006dc <_ZNK3LCD15SendInstructionEh>
 8000608:	4603      	mov	r3, r0
}
 800060a:	4618      	mov	r0, r3
 800060c:	3708      	adds	r7, #8
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}

08000612 <_ZNK3LCD9SetCursorEhh>:
{
	return SendInstruction(0x02);
}

HAL_StatusTypeDef LCD::SetCursor(const uint8_t row, const uint8_t col) const
{
 8000612:	b580      	push	{r7, lr}
 8000614:	b084      	sub	sp, #16
 8000616:	af00      	add	r7, sp, #0
 8000618:	6078      	str	r0, [r7, #4]
 800061a:	460b      	mov	r3, r1
 800061c:	70fb      	strb	r3, [r7, #3]
 800061e:	4613      	mov	r3, r2
 8000620:	70bb      	strb	r3, [r7, #2]
	const uint8_t address = 0x40 * row + col;
 8000622:	78fb      	ldrb	r3, [r7, #3]
 8000624:	019b      	lsls	r3, r3, #6
 8000626:	b2da      	uxtb	r2, r3
 8000628:	78bb      	ldrb	r3, [r7, #2]
 800062a:	4413      	add	r3, r2
 800062c:	73fb      	strb	r3, [r7, #15]
	HAL_StatusTypeDef result = ChangeDDRAMAddress(address);
 800062e:	7bfb      	ldrb	r3, [r7, #15]
 8000630:	4619      	mov	r1, r3
 8000632:	6878      	ldr	r0, [r7, #4]
 8000634:	f000 f807 	bl	8000646 <_ZNK3LCD18ChangeDDRAMAddressEh>
 8000638:	4603      	mov	r3, r0
 800063a:	73bb      	strb	r3, [r7, #14]
	return result;
 800063c:	7bbb      	ldrb	r3, [r7, #14]
}
 800063e:	4618      	mov	r0, r3
 8000640:	3710      	adds	r7, #16
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}

08000646 <_ZNK3LCD18ChangeDDRAMAddressEh>:

HAL_StatusTypeDef LCD::ChangeDDRAMAddress(const uint8_t newAddress) const
{
 8000646:	b580      	push	{r7, lr}
 8000648:	b084      	sub	sp, #16
 800064a:	af00      	add	r7, sp, #0
 800064c:	6078      	str	r0, [r7, #4]
 800064e:	460b      	mov	r3, r1
 8000650:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef result = SendInstruction(DDRAM_ADR_BASE | newAddress);
 8000652:	78fb      	ldrb	r3, [r7, #3]
 8000654:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000658:	b2db      	uxtb	r3, r3
 800065a:	4619      	mov	r1, r3
 800065c:	6878      	ldr	r0, [r7, #4]
 800065e:	f000 f83d 	bl	80006dc <_ZNK3LCD15SendInstructionEh>
 8000662:	4603      	mov	r3, r0
 8000664:	73fb      	strb	r3, [r7, #15]
	return result;
 8000666:	7bfb      	ldrb	r3, [r7, #15]
}
 8000668:	4618      	mov	r0, r3
 800066a:	3710      	adds	r7, #16
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}

08000670 <_ZNK3LCD5PrintERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

void LCD::Print(const std::string & text) const
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b084      	sub	sp, #16
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
 8000678:	6039      	str	r1, [r7, #0]
	for (std::string::size_type i=0; i<text.length(); i++)
 800067a:	2300      	movs	r3, #0
 800067c:	60fb      	str	r3, [r7, #12]
 800067e:	e00c      	b.n	800069a <_ZNK3LCD5PrintERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x2a>
	{
		Print(text[i]);
 8000680:	68f9      	ldr	r1, [r7, #12]
 8000682:	6838      	ldr	r0, [r7, #0]
 8000684:	f000 f89c 	bl	80007c0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8000688:	4603      	mov	r3, r0
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	4619      	mov	r1, r3
 800068e:	6878      	ldr	r0, [r7, #4]
 8000690:	f000 f814 	bl	80006bc <_ZNK3LCD5PrintEh>
	for (std::string::size_type i=0; i<text.length(); i++)
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	3301      	adds	r3, #1
 8000698:	60fb      	str	r3, [r7, #12]
 800069a:	6838      	ldr	r0, [r7, #0]
 800069c:	f000 f884 	bl	80007a8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 80006a0:	4602      	mov	r2, r0
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	4293      	cmp	r3, r2
 80006a6:	bf34      	ite	cc
 80006a8:	2301      	movcc	r3, #1
 80006aa:	2300      	movcs	r3, #0
 80006ac:	b2db      	uxtb	r3, r3
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d1e6      	bne.n	8000680 <_ZNK3LCD5PrintERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x10>
	}
}
 80006b2:	bf00      	nop
 80006b4:	bf00      	nop
 80006b6:	3710      	adds	r7, #16
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}

080006bc <_ZNK3LCD5PrintEh>:

HAL_StatusTypeDef LCD::Print(const uint8_t character) const
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
 80006c4:	460b      	mov	r3, r1
 80006c6:	70fb      	strb	r3, [r7, #3]
	return SendData(character);
 80006c8:	78fb      	ldrb	r3, [r7, #3]
 80006ca:	4619      	mov	r1, r3
 80006cc:	6878      	ldr	r0, [r7, #4]
 80006ce:	f000 f818 	bl	8000702 <_ZNK3LCD8SendDataEh>
 80006d2:	4603      	mov	r3, r0
}
 80006d4:	4618      	mov	r0, r3
 80006d6:	3708      	adds	r7, #8
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}

080006dc <_ZNK3LCD15SendInstructionEh>:

HAL_StatusTypeDef LCD::SendInstruction(const uint8_t instruction) const
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
 80006e4:	460b      	mov	r3, r1
 80006e6:	70fb      	strb	r3, [r7, #3]
	return i2c.MemWrite(writeAddress, addressCommand, instruction);
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	6818      	ldr	r0, [r3, #0]
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	7959      	ldrb	r1, [r3, #5]
 80006f0:	78fb      	ldrb	r3, [r7, #3]
 80006f2:	2200      	movs	r2, #0
 80006f4:	f000 f8d6 	bl	80008a4 <_ZN3I2C8MemWriteEhhh>
 80006f8:	4603      	mov	r3, r0
}
 80006fa:	4618      	mov	r0, r3
 80006fc:	3708      	adds	r7, #8
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}

08000702 <_ZNK3LCD8SendDataEh>:

HAL_StatusTypeDef LCD::SendData(const uint8_t data) const
{
 8000702:	b580      	push	{r7, lr}
 8000704:	b082      	sub	sp, #8
 8000706:	af00      	add	r7, sp, #0
 8000708:	6078      	str	r0, [r7, #4]
 800070a:	460b      	mov	r3, r1
 800070c:	70fb      	strb	r3, [r7, #3]
	return i2c.MemWrite(writeAddress, addressData, data);
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	6818      	ldr	r0, [r3, #0]
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	7959      	ldrb	r1, [r3, #5]
 8000716:	78fb      	ldrb	r3, [r7, #3]
 8000718:	2240      	movs	r2, #64	@ 0x40
 800071a:	f000 f8c3 	bl	80008a4 <_ZN3I2C8MemWriteEhhh>
 800071e:	4603      	mov	r3, r0
}
 8000720:	4618      	mov	r0, r3
 8000722:	3708      	adds	r7, #8
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}

08000728 <_ZNK3LCD13DisplayResultERK17HAL_StatusTypeDef>:

void LCD::DisplayResult(const HAL_StatusTypeDef & result) const
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
 8000730:	6039      	str	r1, [r7, #0]
	if (result == HAL_OK)
 8000732:	683b      	ldr	r3, [r7, #0]
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	2b00      	cmp	r3, #0
 8000738:	d10a      	bne.n	8000750 <_ZNK3LCD13DisplayResultERK17HAL_StatusTypeDef+0x28>
	{
		errorLed.Reset();
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	68db      	ldr	r3, [r3, #12]
 800073e:	4618      	mov	r0, r3
 8000740:	f000 f88d 	bl	800085e <_ZNK4GPIO5ResetEv>
		successLed.Set();
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	691b      	ldr	r3, [r3, #16]
 8000748:	4618      	mov	r0, r3
 800074a:	f000 f878 	bl	800083e <_ZNK4GPIO3SetEv>
	else
	{
		errorLed.Set();
		successLed.Reset();
	}
}
 800074e:	e009      	b.n	8000764 <_ZNK3LCD13DisplayResultERK17HAL_StatusTypeDef+0x3c>
		errorLed.Set();
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	68db      	ldr	r3, [r3, #12]
 8000754:	4618      	mov	r0, r3
 8000756:	f000 f872 	bl	800083e <_ZNK4GPIO3SetEv>
		successLed.Reset();
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	691b      	ldr	r3, [r3, #16]
 800075e:	4618      	mov	r0, r3
 8000760:	f000 f87d 	bl	800085e <_ZNK4GPIO5ResetEv>
}
 8000764:	bf00      	nop
 8000766:	3708      	adds	r7, #8
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}

0800076c <_ZNK3LCD11ClearResultEv>:

void LCD::ClearResult() const
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
	errorLed.Reset();
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	68db      	ldr	r3, [r3, #12]
 8000778:	4618      	mov	r0, r3
 800077a:	f000 f870 	bl	800085e <_ZNK4GPIO5ResetEv>
	successLed.Reset();
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	691b      	ldr	r3, [r3, #16]
 8000782:	4618      	mov	r0, r3
 8000784:	f000 f86b 	bl	800085e <_ZNK4GPIO5ResetEv>
}
 8000788:	bf00      	nop
 800078a:	3708      	adds	r7, #8
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}

08000790 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>:
      // Capacity:
      ///  Returns the number of characters in the string, not including any
      ///  null-termination.
      _GLIBCXX20_CONSTEXPR
      size_type
      size() const _GLIBCXX_NOEXCEPT
 8000790:	b480      	push	{r7}
 8000792:	b083      	sub	sp, #12
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
      { return _M_string_length; }
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	685b      	ldr	r3, [r3, #4]
 800079c:	4618      	mov	r0, r3
 800079e:	370c      	adds	r7, #12
 80007a0:	46bd      	mov	sp, r7
 80007a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a6:	4770      	bx	lr

080007a8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>:

      ///  Returns the number of characters in the string, not including any
      ///  null-termination.
      _GLIBCXX20_CONSTEXPR
      size_type
      length() const _GLIBCXX_NOEXCEPT
 80007a8:	b480      	push	{r7}
 80007aa:	b083      	sub	sp, #12
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
      { return _M_string_length; }
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	685b      	ldr	r3, [r3, #4]
 80007b4:	4618      	mov	r0, r3
 80007b6:	370c      	adds	r7, #12
 80007b8:	46bd      	mov	sp, r7
 80007ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007be:	4770      	bx	lr

080007c0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>:
       *  out_of_range lookups are not defined. (For checked lookups
       *  see at().)
       */
      _GLIBCXX20_CONSTEXPR
      const_reference
      operator[] (size_type __pos) const _GLIBCXX_NOEXCEPT
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
 80007c8:	6039      	str	r1, [r7, #0]
      {
	__glibcxx_assert(__pos <= size());
 80007ca:	f7ff fe7d 	bl	80004c8 <_ZSt23__is_constant_evaluatedv>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d008      	beq.n	80007e6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj+0x26>
 80007d4:	6878      	ldr	r0, [r7, #4]
 80007d6:	f7ff ffdb 	bl	8000790 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 80007da:	4602      	mov	r2, r0
 80007dc:	683b      	ldr	r3, [r7, #0]
 80007de:	4293      	cmp	r3, r2
 80007e0:	d901      	bls.n	80007e6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj+0x26>
 80007e2:	2301      	movs	r3, #1
 80007e4:	e000      	b.n	80007e8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj+0x28>
 80007e6:	2300      	movs	r3, #0
 80007e8:	2b00      	cmp	r3, #0
	return _M_data()[__pos];
 80007ea:	6878      	ldr	r0, [r7, #4]
 80007ec:	f000 f807 	bl	80007fe <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 80007f0:	4602      	mov	r2, r0
 80007f2:	683b      	ldr	r3, [r7, #0]
 80007f4:	4413      	add	r3, r2
      }
 80007f6:	4618      	mov	r0, r3
 80007f8:	3708      	adds	r7, #8
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}

080007fe <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>:
      _M_data() const
 80007fe:	b480      	push	{r7}
 8000800:	b083      	sub	sp, #12
 8000802:	af00      	add	r7, sp, #0
 8000804:	6078      	str	r0, [r7, #4]
      { return _M_dataplus._M_p; }
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	4618      	mov	r0, r3
 800080c:	370c      	adds	r7, #12
 800080e:	46bd      	mov	sp, r7
 8000810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000814:	4770      	bx	lr

08000816 <_ZN4GPIOC1EP12GPIO_TypeDeft>:
 *      Author: Ahmed
 */

#include "GPIO.h"

GPIO::GPIO(GPIO_TypeDef * port, const uint16_t pin)
 8000816:	b480      	push	{r7}
 8000818:	b085      	sub	sp, #20
 800081a:	af00      	add	r7, sp, #0
 800081c:	60f8      	str	r0, [r7, #12]
 800081e:	60b9      	str	r1, [r7, #8]
 8000820:	4613      	mov	r3, r2
 8000822:	80fb      	strh	r3, [r7, #6]
	:	port(port)
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	68ba      	ldr	r2, [r7, #8]
 8000828:	601a      	str	r2, [r3, #0]
	,	pin(pin)
 800082a:	68fb      	ldr	r3, [r7, #12]
 800082c:	88fa      	ldrh	r2, [r7, #6]
 800082e:	809a      	strh	r2, [r3, #4]
{
	
}
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	4618      	mov	r0, r3
 8000834:	3714      	adds	r7, #20
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr

0800083e <_ZNK4GPIO3SetEv>:

void GPIO::Set() const
{
 800083e:	b580      	push	{r7, lr}
 8000840:	b082      	sub	sp, #8
 8000842:	af00      	add	r7, sp, #0
 8000844:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(port, pin, GPIO_PIN_SET);
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	6818      	ldr	r0, [r3, #0]
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	889b      	ldrh	r3, [r3, #4]
 800084e:	2201      	movs	r2, #1
 8000850:	4619      	mov	r1, r3
 8000852:	f002 fb3b 	bl	8002ecc <HAL_GPIO_WritePin>
}
 8000856:	bf00      	nop
 8000858:	3708      	adds	r7, #8
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}

0800085e <_ZNK4GPIO5ResetEv>:

void GPIO::Reset() const
{
 800085e:	b580      	push	{r7, lr}
 8000860:	b082      	sub	sp, #8
 8000862:	af00      	add	r7, sp, #0
 8000864:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(port, pin, GPIO_PIN_RESET);
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	6818      	ldr	r0, [r3, #0]
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	889b      	ldrh	r3, [r3, #4]
 800086e:	2200      	movs	r2, #0
 8000870:	4619      	mov	r1, r3
 8000872:	f002 fb2b 	bl	8002ecc <HAL_GPIO_WritePin>
}
 8000876:	bf00      	nop
 8000878:	3708      	adds	r7, #8
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}

0800087e <_ZN3I2CC1ER17I2C_HandleTypeDefm>:
 *      Author: Ahmed
 */

#include "I2C.h"

I2C::I2C(I2C_HandleTypeDef & handle, const uint32_t defaultTimeout_ms /*= HAL_MAX_DELAY*/)
 800087e:	b480      	push	{r7}
 8000880:	b085      	sub	sp, #20
 8000882:	af00      	add	r7, sp, #0
 8000884:	60f8      	str	r0, [r7, #12]
 8000886:	60b9      	str	r1, [r7, #8]
 8000888:	607a      	str	r2, [r7, #4]
	:	defaultTimeout_ms(defaultTimeout_ms)
 800088a:	68fb      	ldr	r3, [r7, #12]
 800088c:	687a      	ldr	r2, [r7, #4]
 800088e:	601a      	str	r2, [r3, #0]
	,	handle(handle)
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	68ba      	ldr	r2, [r7, #8]
 8000894:	605a      	str	r2, [r3, #4]
{

}
 8000896:	68fb      	ldr	r3, [r7, #12]
 8000898:	4618      	mov	r0, r3
 800089a:	3714      	adds	r7, #20
 800089c:	46bd      	mov	sp, r7
 800089e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a2:	4770      	bx	lr

080008a4 <_ZN3I2C8MemWriteEhhh>:
}

HAL_StatusTypeDef I2C::MemWrite(const	uint8_t deviceAddress,
								const	uint8_t memoryAddress,
										uint8_t data)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b088      	sub	sp, #32
 80008a8:	af04      	add	r7, sp, #16
 80008aa:	6078      	str	r0, [r7, #4]
 80008ac:	4608      	mov	r0, r1
 80008ae:	4611      	mov	r1, r2
 80008b0:	461a      	mov	r2, r3
 80008b2:	4603      	mov	r3, r0
 80008b4:	70fb      	strb	r3, [r7, #3]
 80008b6:	460b      	mov	r3, r1
 80008b8:	70bb      	strb	r3, [r7, #2]
 80008ba:	4613      	mov	r3, r2
 80008bc:	707b      	strb	r3, [r7, #1]
	HAL_StatusTypeDef result = HAL_I2C_Mem_Write(	&handle,
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	6858      	ldr	r0, [r3, #4]
 80008c2:	78fb      	ldrb	r3, [r7, #3]
 80008c4:	b299      	uxth	r1, r3
 80008c6:	78bb      	ldrb	r3, [r7, #2]
 80008c8:	b29a      	uxth	r2, r3
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	9302      	str	r3, [sp, #8]
 80008d0:	2301      	movs	r3, #1
 80008d2:	9301      	str	r3, [sp, #4]
 80008d4:	1c7b      	adds	r3, r7, #1
 80008d6:	9300      	str	r3, [sp, #0]
 80008d8:	2301      	movs	r3, #1
 80008da:	f002 fc55 	bl	8003188 <HAL_I2C_Mem_Write>
 80008de:	4603      	mov	r3, r0
 80008e0:	73fb      	strb	r3, [r7, #15]
													memoryAddress,
													I2C_MEMADD_SIZE_8BIT,	// = sizeof(uint8_t)
													&data,
													(uint16_t) sizeof(data),
													defaultTimeout_ms);
	return result;
 80008e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80008e4:	4618      	mov	r0, r3
 80008e6:	3710      	adds	r7, #16
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}

080008ec <_ZSt21is_constant_evaluatedv>:

  /// Returns true only when called during constant evaluation.
  /// @since C++20
  constexpr inline bool
  is_constant_evaluated() noexcept
  {
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
#if __cpp_if_consteval >= 202106L
    if consteval { return true; } else { return false; }
#else
    return __builtin_is_constant_evaluated();
 80008f0:	2300      	movs	r3, #0
#endif
  }
 80008f2:	4618      	mov	r0, r3
 80008f4:	46bd      	mov	sp, r7
 80008f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fa:	4770      	bx	lr

080008fc <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 80008fc:	b480      	push	{r7}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
 8000904:	6039      	str	r1, [r7, #0]
 8000906:	683b      	ldr	r3, [r7, #0]
 8000908:	4618      	mov	r0, r3
 800090a:	370c      	adds	r7, #12
 800090c:	46bd      	mov	sp, r7
 800090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000912:	4770      	bx	lr

08000914 <_ZNSt11char_traitsIcE6assignERcRKc>:
#if __cpp_lib_three_way_comparison
      using comparison_category = strong_ordering;
#endif

      static _GLIBCXX17_CONSTEXPR void
      assign(char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
 800091c:	6039      	str	r1, [r7, #0]
      {
#if __cpp_constexpr_dynamic_alloc
	if (std::__is_constant_evaluated())
 800091e:	f7ff fdd3 	bl	80004c8 <_ZSt23__is_constant_evaluatedv>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d004      	beq.n	8000932 <_ZNSt11char_traitsIcE6assignERcRKc+0x1e>
	  std::construct_at(__builtin_addressof(__c1), __c2);
 8000928:	6839      	ldr	r1, [r7, #0]
 800092a:	6878      	ldr	r0, [r7, #4]
 800092c:	f000 fca2 	bl	8001274 <_ZSt12construct_atIcJRKcEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	else
#endif
	__c1 = __c2;
      }
 8000930:	e003      	b.n	800093a <_ZNSt11char_traitsIcE6assignERcRKc+0x26>
	__c1 = __c2;
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	781a      	ldrb	r2, [r3, #0]
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	701a      	strb	r2, [r3, #0]
      }
 800093a:	bf00      	nop
 800093c:	3708      	adds	r7, #8
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}

08000942 <_ZNSt11char_traitsIcE6lengthEPKc>:
#endif
	return __builtin_memcmp(__s1, __s2, __n);
      }

      static _GLIBCXX17_CONSTEXPR size_t
      length(const char_type* __s)
 8000942:	b580      	push	{r7, lr}
 8000944:	b082      	sub	sp, #8
 8000946:	af00      	add	r7, sp, #0
 8000948:	6078      	str	r0, [r7, #4]
      {
#if __cplusplus >= 201703L
	if (std::__is_constant_evaluated())
 800094a:	f7ff fdbd 	bl	80004c8 <_ZSt23__is_constant_evaluatedv>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d004      	beq.n	800095e <_ZNSt11char_traitsIcE6lengthEPKc+0x1c>
	  return __gnu_cxx::char_traits<char_type>::length(__s);
 8000954:	6878      	ldr	r0, [r7, #4]
 8000956:	f000 fca3 	bl	80012a0 <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc>
 800095a:	4603      	mov	r3, r0
 800095c:	e004      	b.n	8000968 <_ZNSt11char_traitsIcE6lengthEPKc+0x26>
#endif
	return __builtin_strlen(__s);
 800095e:	6878      	ldr	r0, [r7, #4]
 8000960:	f7ff fc32 	bl	80001c8 <strlen>
 8000964:	4603      	mov	r3, r0
 8000966:	bf00      	nop
      }
 8000968:	4618      	mov	r0, r3
 800096a:	3708      	adds	r7, #8
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}

08000970 <_ZNSt11char_traitsIcE4copyEPcPKcj>:
#endif
	return static_cast<char_type*>(__builtin_memmove(__s1, __s2, __n));
      }

      static _GLIBCXX20_CONSTEXPR char_type*
      copy(char_type* __s1, const char_type* __s2, size_t __n)
 8000970:	b580      	push	{r7, lr}
 8000972:	b084      	sub	sp, #16
 8000974:	af00      	add	r7, sp, #0
 8000976:	60f8      	str	r0, [r7, #12]
 8000978:	60b9      	str	r1, [r7, #8]
 800097a:	607a      	str	r2, [r7, #4]
      {
	if (__n == 0)
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	2b00      	cmp	r3, #0
 8000980:	d101      	bne.n	8000986 <_ZNSt11char_traitsIcE4copyEPcPKcj+0x16>
	  return __s1;
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	e015      	b.n	80009b2 <_ZNSt11char_traitsIcE4copyEPcPKcj+0x42>
#if __cplusplus >= 202002L
	if (std::__is_constant_evaluated())
 8000986:	f7ff fd9f 	bl	80004c8 <_ZSt23__is_constant_evaluatedv>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d006      	beq.n	800099e <_ZNSt11char_traitsIcE4copyEPcPKcj+0x2e>
	  return __gnu_cxx::char_traits<char_type>::copy(__s1, __s2, __n);
 8000990:	687a      	ldr	r2, [r7, #4]
 8000992:	68b9      	ldr	r1, [r7, #8]
 8000994:	68f8      	ldr	r0, [r7, #12]
 8000996:	f000 fca3 	bl	80012e0 <_ZN9__gnu_cxx11char_traitsIcE4copyEPcPKcj>
 800099a:	4603      	mov	r3, r0
 800099c:	e009      	b.n	80009b2 <_ZNSt11char_traitsIcE4copyEPcPKcj+0x42>
#endif
	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
 800099e:	68fa      	ldr	r2, [r7, #12]
 80009a0:	68bb      	ldr	r3, [r7, #8]
 80009a2:	4610      	mov	r0, r2
 80009a4:	4619      	mov	r1, r3
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	461a      	mov	r2, r3
 80009aa:	f004 f821 	bl	80049f0 <memcpy>
 80009ae:	4603      	mov	r3, r0
 80009b0:	bf00      	nop
      }
 80009b2:	4618      	mov	r0, r3
 80009b4:	3710      	adds	r7, #16
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
	...

080009bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>:
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
 80009bc:	b5b0      	push	{r4, r5, r7, lr}
 80009be:	b086      	sub	sp, #24
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	60f8      	str	r0, [r7, #12]
 80009c4:	60b9      	str	r1, [r7, #8]
 80009c6:	607a      	str	r2, [r7, #4]
      : _M_dataplus(_M_local_data(), __a)
 80009c8:	68fc      	ldr	r4, [r7, #12]
 80009ca:	68f8      	ldr	r0, [r7, #12]
 80009cc:	f000 f820 	bl	8000a10 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
 80009d0:	4603      	mov	r3, r0
 80009d2:	687a      	ldr	r2, [r7, #4]
 80009d4:	4619      	mov	r1, r3
 80009d6:	4620      	mov	r0, r4
 80009d8:	f000 f84b 	bl	8000a72 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>
	if (__s == 0)
 80009dc:	68bb      	ldr	r3, [r7, #8]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d102      	bne.n	80009e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_+0x2c>
	  std::__throw_logic_error(__N("basic_string: "
 80009e2:	480a      	ldr	r0, [pc, #40]	@ (8000a0c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_+0x50>)
 80009e4:	f003 fea8 	bl	8004738 <_ZSt19__throw_logic_errorPKc>
	const _CharT* __end = __s + traits_type::length(__s);
 80009e8:	68b8      	ldr	r0, [r7, #8]
 80009ea:	f7ff ffaa 	bl	8000942 <_ZNSt11char_traitsIcE6lengthEPKc>
 80009ee:	4602      	mov	r2, r0
 80009f0:	68bb      	ldr	r3, [r7, #8]
 80009f2:	4413      	add	r3, r2
 80009f4:	617b      	str	r3, [r7, #20]
	_M_construct(__s, __end, forward_iterator_tag());
 80009f6:	462b      	mov	r3, r5
 80009f8:	697a      	ldr	r2, [r7, #20]
 80009fa:	68b9      	ldr	r1, [r7, #8]
 80009fc:	68f8      	ldr	r0, [r7, #12]
 80009fe:	f000 fcc2 	bl	8001386 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
      }
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	4618      	mov	r0, r3
 8000a06:	3718      	adds	r7, #24
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bdb0      	pop	{r4, r5, r7, pc}
 8000a0c:	08004ab8 	.word	0x08004ab8

08000a10 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>:
      _M_local_data()
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	3308      	adds	r3, #8
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f000 f805 	bl	8000a2c <_ZNSt19__ptr_traits_ptr_toIPccLb0EE10pointer_toERc>
 8000a22:	4603      	mov	r3, r0
      }
 8000a24:	4618      	mov	r0, r3
 8000a26:	3708      	adds	r7, #8
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}

08000a2c <_ZNSt19__ptr_traits_ptr_toIPccLb0EE10pointer_toERc>:
       *  @brief  Obtain a pointer to an object
       *  @param  __r  A reference to an object of type `element_type`
       *  @return `addressof(__r)`
      */
      static _GLIBCXX20_CONSTEXPR pointer
      pointer_to(element_type& __r) noexcept
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
      { return std::addressof(__r); }
 8000a34:	6878      	ldr	r0, [r7, #4]
 8000a36:	f000 f805 	bl	8000a44 <_ZSt9addressofIcEPT_RS0_>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	3708      	adds	r7, #8
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}

08000a44 <_ZSt9addressofIcEPT_RS0_>:
   *  @return   The actual address.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    inline _GLIBCXX17_CONSTEXPR _Tp*
    addressof(_Tp& __r) noexcept
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
    { return std::__addressof(__r); }
 8000a4c:	6878      	ldr	r0, [r7, #4]
 8000a4e:	f000 f805 	bl	8000a5c <_ZSt11__addressofIcEPT_RS0_>
 8000a52:	4603      	mov	r3, r0
 8000a54:	4618      	mov	r0, r3
 8000a56:	3708      	adds	r7, #8
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}

08000a5c <_ZSt11__addressofIcEPT_RS0_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8000a5c:	b480      	push	{r7}
 8000a5e:	b083      	sub	sp, #12
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	4618      	mov	r0, r3
 8000a68:	370c      	adds	r7, #12
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr

08000a72 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>:
	_Alloc_hider(pointer __dat, const _Alloc& __a)
 8000a72:	b580      	push	{r7, lr}
 8000a74:	b084      	sub	sp, #16
 8000a76:	af00      	add	r7, sp, #0
 8000a78:	60f8      	str	r0, [r7, #12]
 8000a7a:	60b9      	str	r1, [r7, #8]
 8000a7c:	607a      	str	r2, [r7, #4]
	: allocator_type(__a), _M_p(__dat) { }
 8000a7e:	6879      	ldr	r1, [r7, #4]
 8000a80:	68f8      	ldr	r0, [r7, #12]
 8000a82:	f003 fe51 	bl	8004728 <_ZNSaIcEC1ERKS_>
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	68ba      	ldr	r2, [r7, #8]
 8000a8a:	601a      	str	r2, [r3, #0]
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	4618      	mov	r0, r3
 8000a90:	3710      	adds	r7, #16
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
	...

08000a98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b0a2      	sub	sp, #136	@ 0x88
 8000a9c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a9e:	f001 fad9 	bl	8002054 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000aa2:	f000 f8b9 	bl	8000c18 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000aa6:	f000 faeb 	bl	8001080 <_ZL12MX_GPIO_Initv>
  MX_CAN1_Init();
 8000aaa:	f000 f929 	bl	8000d00 <_ZL12MX_CAN1_Initv>
  MX_ETH_Init();
 8000aae:	f000 f961 	bl	8000d74 <_ZL11MX_ETH_Initv>
  MX_I2C1_Init();
 8000ab2:	f000 f9b1 	bl	8000e18 <_ZL12MX_I2C1_Initv>
  MX_I2C3_Init();
 8000ab6:	f000 f9e3 	bl	8000e80 <_ZL12MX_I2C3_Initv>
  MX_SPI1_Init();
 8000aba:	f000 fa15 	bl	8000ee8 <_ZL12MX_SPI1_Initv>
  MX_USART1_UART_Init();
 8000abe:	f000 fa4f 	bl	8000f60 <_ZL19MX_USART1_UART_Initv>
  MX_USART2_UART_Init();
 8000ac2:	f000 fa7d 	bl	8000fc0 <_ZL19MX_USART2_UART_Initv>
  MX_USART3_UART_Init();
 8000ac6:	f000 faab 	bl	8001020 <_ZL19MX_USART3_UART_Initv>
  /* USER CODE BEGIN 2 */
  I2C i2c_Lcd(hi2c3);
 8000aca:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8000ace:	f04f 32ff 	mov.w	r2, #4294967295
 8000ad2:	494d      	ldr	r1, [pc, #308]	@ (8000c08 <main+0x170>)
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f7ff fed2 	bl	800087e <_ZN3I2CC1ER17I2C_HandleTypeDefm>

  GPIO E3(GPIOE, GPIO_PIN_3);
 8000ada:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000ade:	2208      	movs	r2, #8
 8000ae0:	494a      	ldr	r1, [pc, #296]	@ (8000c0c <main+0x174>)
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f7ff fe97 	bl	8000816 <_ZN4GPIOC1EP12GPIO_TypeDeft>
  GPIO E4(GPIOE, GPIO_PIN_4);
 8000ae8:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000aec:	2210      	movs	r2, #16
 8000aee:	4947      	ldr	r1, [pc, #284]	@ (8000c0c <main+0x174>)
 8000af0:	4618      	mov	r0, r3
 8000af2:	f7ff fe90 	bl	8000816 <_ZN4GPIOC1EP12GPIO_TypeDeft>
  GPIO E5(GPIOE, GPIO_PIN_5);
 8000af6:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000afa:	2220      	movs	r2, #32
 8000afc:	4943      	ldr	r1, [pc, #268]	@ (8000c0c <main+0x174>)
 8000afe:	4618      	mov	r0, r3
 8000b00:	f7ff fe89 	bl	8000816 <_ZN4GPIOC1EP12GPIO_TypeDeft>
  GPIO E6(GPIOE, GPIO_PIN_6);
 8000b04:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000b08:	2240      	movs	r2, #64	@ 0x40
 8000b0a:	4940      	ldr	r1, [pc, #256]	@ (8000c0c <main+0x174>)
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f7ff fe82 	bl	8000816 <_ZN4GPIOC1EP12GPIO_TypeDeft>
  GPIO & LedRed		= E3;
 8000b12:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000b16:	67fb      	str	r3, [r7, #124]	@ 0x7c
  GPIO & LedGreen	= E6;
 8000b18:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000b1c:	67bb      	str	r3, [r7, #120]	@ 0x78

  const std::string firstLine	= " ALTIUM ";
 8000b1e:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000b22:	4618      	mov	r0, r3
 8000b24:	f003 fdff 	bl	8004726 <_ZNSaIcEC1Ev>
 8000b28:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8000b2c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000b30:	4937      	ldr	r1, [pc, #220]	@ (8000c10 <main+0x178>)
 8000b32:	4618      	mov	r0, r3
 8000b34:	f7ff ff42 	bl	80009bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8000b38:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f003 fdf4 	bl	800472a <_ZNSaIcED1Ev>
  const std::string secondLine	= "DESIGNER";
 8000b42:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000b46:	4618      	mov	r0, r3
 8000b48:	f003 fded 	bl	8004726 <_ZNSaIcEC1Ev>
 8000b4c:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 8000b50:	f107 0318 	add.w	r3, r7, #24
 8000b54:	492f      	ldr	r1, [pc, #188]	@ (8000c14 <main+0x17c>)
 8000b56:	4618      	mov	r0, r3
 8000b58:	f7ff ff30 	bl	80009bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8000b5c:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000b60:	4618      	mov	r0, r3
 8000b62:	f003 fde2 	bl	800472a <_ZNSaIcED1Ev>
  LCD lcd(i2c_Lcd, 0x3C, LedRed, LedGreen);
 8000b66:	f107 0168 	add.w	r1, r7, #104	@ 0x68
 8000b6a:	1d38      	adds	r0, r7, #4
 8000b6c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000b6e:	9300      	str	r3, [sp, #0]
 8000b70:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000b72:	223c      	movs	r2, #60	@ 0x3c
 8000b74:	f7ff fcb0 	bl	80004d8 <_ZN3LCDC1ER3I2ChR4GPIOS3_>
  lcd.SetCursor(0, 0);
 8000b78:	1d3b      	adds	r3, r7, #4
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f7ff fd47 	bl	8000612 <_ZNK3LCD9SetCursorEhh>
  lcd.Print(firstLine);
 8000b84:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8000b88:	1d3b      	adds	r3, r7, #4
 8000b8a:	4611      	mov	r1, r2
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f7ff fd6f 	bl	8000670 <_ZNK3LCD5PrintERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
  lcd.SetCursor(1, 0);
 8000b92:	1d3b      	adds	r3, r7, #4
 8000b94:	2200      	movs	r2, #0
 8000b96:	2101      	movs	r1, #1
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f7ff fd3a 	bl	8000612 <_ZNK3LCD9SetCursorEhh>
  lcd.Print(secondLine);
 8000b9e:	f107 0218 	add.w	r2, r7, #24
 8000ba2:	1d3b      	adds	r3, r7, #4
 8000ba4:	4611      	mov	r1, r2
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f7ff fd62 	bl	8000670 <_ZNK3LCD5PrintERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  E3.Set();
 8000bac:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f7ff fe44 	bl	800083e <_ZNK4GPIO3SetEv>
	  HAL_Delay(250);
 8000bb6:	20fa      	movs	r0, #250	@ 0xfa
 8000bb8:	f001 fabe 	bl	8002138 <HAL_Delay>
	  //E3.Reset();
	  HAL_Delay(250);
 8000bbc:	20fa      	movs	r0, #250	@ 0xfa
 8000bbe:	f001 fabb 	bl	8002138 <HAL_Delay>
	  E4.Set();
 8000bc2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f7ff fe39 	bl	800083e <_ZNK4GPIO3SetEv>
	  HAL_Delay(250);
 8000bcc:	20fa      	movs	r0, #250	@ 0xfa
 8000bce:	f001 fab3 	bl	8002138 <HAL_Delay>
	  //E4.Reset();
	  HAL_Delay(250);
 8000bd2:	20fa      	movs	r0, #250	@ 0xfa
 8000bd4:	f001 fab0 	bl	8002138 <HAL_Delay>
	  E5.Set();
 8000bd8:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f7ff fe2e 	bl	800083e <_ZNK4GPIO3SetEv>
	  HAL_Delay(250);
 8000be2:	20fa      	movs	r0, #250	@ 0xfa
 8000be4:	f001 faa8 	bl	8002138 <HAL_Delay>
	  //E5.Reset();
	  HAL_Delay(250);
 8000be8:	20fa      	movs	r0, #250	@ 0xfa
 8000bea:	f001 faa5 	bl	8002138 <HAL_Delay>
	  E6.Set();
 8000bee:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f7ff fe23 	bl	800083e <_ZNK4GPIO3SetEv>
	  HAL_Delay(250);
 8000bf8:	20fa      	movs	r0, #250	@ 0xfa
 8000bfa:	f001 fa9d 	bl	8002138 <HAL_Delay>
	  //E6.Reset();
	  HAL_Delay(250);/**/
 8000bfe:	20fa      	movs	r0, #250	@ 0xfa
 8000c00:	f001 fa9a 	bl	8002138 <HAL_Delay>
	  E3.Set();
 8000c04:	bf00      	nop
 8000c06:	e7d1      	b.n	8000bac <main+0x114>
 8000c08:	2000031c 	.word	0x2000031c
 8000c0c:	40021000 	.word	0x40021000
 8000c10:	08004aec 	.word	0x08004aec
 8000c14:	08004af8 	.word	0x08004af8

08000c18 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b094      	sub	sp, #80	@ 0x50
 8000c1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c1e:	f107 0320 	add.w	r3, r7, #32
 8000c22:	2230      	movs	r2, #48	@ 0x30
 8000c24:	2100      	movs	r1, #0
 8000c26:	4618      	mov	r0, r3
 8000c28:	f003 fe5a 	bl	80048e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c2c:	f107 030c 	add.w	r3, r7, #12
 8000c30:	2200      	movs	r2, #0
 8000c32:	601a      	str	r2, [r3, #0]
 8000c34:	605a      	str	r2, [r3, #4]
 8000c36:	609a      	str	r2, [r3, #8]
 8000c38:	60da      	str	r2, [r3, #12]
 8000c3a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	60bb      	str	r3, [r7, #8]
 8000c40:	4b2d      	ldr	r3, [pc, #180]	@ (8000cf8 <_Z18SystemClock_Configv+0xe0>)
 8000c42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c44:	4a2c      	ldr	r2, [pc, #176]	@ (8000cf8 <_Z18SystemClock_Configv+0xe0>)
 8000c46:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c4a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c4c:	4b2a      	ldr	r3, [pc, #168]	@ (8000cf8 <_Z18SystemClock_Configv+0xe0>)
 8000c4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c54:	60bb      	str	r3, [r7, #8]
 8000c56:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c58:	2300      	movs	r3, #0
 8000c5a:	607b      	str	r3, [r7, #4]
 8000c5c:	4b27      	ldr	r3, [pc, #156]	@ (8000cfc <_Z18SystemClock_Configv+0xe4>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a26      	ldr	r2, [pc, #152]	@ (8000cfc <_Z18SystemClock_Configv+0xe4>)
 8000c62:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c66:	6013      	str	r3, [r2, #0]
 8000c68:	4b24      	ldr	r3, [pc, #144]	@ (8000cfc <_Z18SystemClock_Configv+0xe4>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c70:	607b      	str	r3, [r7, #4]
 8000c72:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c74:	2302      	movs	r3, #2
 8000c76:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c78:	2301      	movs	r3, #1
 8000c7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c7c:	2310      	movs	r3, #16
 8000c7e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c80:	2302      	movs	r3, #2
 8000c82:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c84:	2300      	movs	r3, #0
 8000c86:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000c88:	2308      	movs	r3, #8
 8000c8a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000c8c:	23a8      	movs	r3, #168	@ 0xa8
 8000c8e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c90:	2302      	movs	r3, #2
 8000c92:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000c94:	2304      	movs	r3, #4
 8000c96:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c98:	f107 0320 	add.w	r3, r7, #32
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f002 fd8b 	bl	80037b8 <HAL_RCC_OscConfig>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	bf14      	ite	ne
 8000ca8:	2301      	movne	r3, #1
 8000caa:	2300      	moveq	r3, #0
 8000cac:	b2db      	uxtb	r3, r3
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 8000cb2:	f000 fad9 	bl	8001268 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cb6:	230f      	movs	r3, #15
 8000cb8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cba:	2302      	movs	r3, #2
 8000cbc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000cc2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000cc6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000cc8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ccc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000cce:	f107 030c 	add.w	r3, r7, #12
 8000cd2:	2105      	movs	r1, #5
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f002 ffe7 	bl	8003ca8 <HAL_RCC_ClockConfig>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	bf14      	ite	ne
 8000ce0:	2301      	movne	r3, #1
 8000ce2:	2300      	moveq	r3, #0
 8000ce4:	b2db      	uxtb	r3, r3
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <_Z18SystemClock_Configv+0xd6>
  {
    Error_Handler();
 8000cea:	f000 fabd 	bl	8001268 <Error_Handler>
  }
}
 8000cee:	bf00      	nop
 8000cf0:	3750      	adds	r7, #80	@ 0x50
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	40023800 	.word	0x40023800
 8000cfc:	40007000 	.word	0x40007000

08000d00 <_ZL12MX_CAN1_Initv>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000d04:	4b19      	ldr	r3, [pc, #100]	@ (8000d6c <_ZL12MX_CAN1_Initv+0x6c>)
 8000d06:	4a1a      	ldr	r2, [pc, #104]	@ (8000d70 <_ZL12MX_CAN1_Initv+0x70>)
 8000d08:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000d0a:	4b18      	ldr	r3, [pc, #96]	@ (8000d6c <_ZL12MX_CAN1_Initv+0x6c>)
 8000d0c:	2210      	movs	r2, #16
 8000d0e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000d10:	4b16      	ldr	r3, [pc, #88]	@ (8000d6c <_ZL12MX_CAN1_Initv+0x6c>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000d16:	4b15      	ldr	r3, [pc, #84]	@ (8000d6c <_ZL12MX_CAN1_Initv+0x6c>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000d1c:	4b13      	ldr	r3, [pc, #76]	@ (8000d6c <_ZL12MX_CAN1_Initv+0x6c>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000d22:	4b12      	ldr	r3, [pc, #72]	@ (8000d6c <_ZL12MX_CAN1_Initv+0x6c>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000d28:	4b10      	ldr	r3, [pc, #64]	@ (8000d6c <_ZL12MX_CAN1_Initv+0x6c>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000d2e:	4b0f      	ldr	r3, [pc, #60]	@ (8000d6c <_ZL12MX_CAN1_Initv+0x6c>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000d34:	4b0d      	ldr	r3, [pc, #52]	@ (8000d6c <_ZL12MX_CAN1_Initv+0x6c>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <_ZL12MX_CAN1_Initv+0x6c>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000d40:	4b0a      	ldr	r3, [pc, #40]	@ (8000d6c <_ZL12MX_CAN1_Initv+0x6c>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000d46:	4b09      	ldr	r3, [pc, #36]	@ (8000d6c <_ZL12MX_CAN1_Initv+0x6c>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000d4c:	4807      	ldr	r0, [pc, #28]	@ (8000d6c <_ZL12MX_CAN1_Initv+0x6c>)
 8000d4e:	f001 fa17 	bl	8002180 <HAL_CAN_Init>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	bf14      	ite	ne
 8000d58:	2301      	movne	r3, #1
 8000d5a:	2300      	moveq	r3, #0
 8000d5c:	b2db      	uxtb	r3, r3
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <_ZL12MX_CAN1_Initv+0x66>
  {
    Error_Handler();
 8000d62:	f000 fa81 	bl	8001268 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000d66:	bf00      	nop
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	200001f0 	.word	0x200001f0
 8000d70:	40006400 	.word	0x40006400

08000d74 <_ZL11MX_ETH_Initv>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000d78:	4b21      	ldr	r3, [pc, #132]	@ (8000e00 <_ZL11MX_ETH_Initv+0x8c>)
 8000d7a:	4a22      	ldr	r2, [pc, #136]	@ (8000e04 <_ZL11MX_ETH_Initv+0x90>)
 8000d7c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000d7e:	4b22      	ldr	r3, [pc, #136]	@ (8000e08 <_ZL11MX_ETH_Initv+0x94>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000d84:	4b20      	ldr	r3, [pc, #128]	@ (8000e08 <_ZL11MX_ETH_Initv+0x94>)
 8000d86:	2280      	movs	r2, #128	@ 0x80
 8000d88:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000d8a:	4b1f      	ldr	r3, [pc, #124]	@ (8000e08 <_ZL11MX_ETH_Initv+0x94>)
 8000d8c:	22e1      	movs	r2, #225	@ 0xe1
 8000d8e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000d90:	4b1d      	ldr	r3, [pc, #116]	@ (8000e08 <_ZL11MX_ETH_Initv+0x94>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000d96:	4b1c      	ldr	r3, [pc, #112]	@ (8000e08 <_ZL11MX_ETH_Initv+0x94>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000d9c:	4b1a      	ldr	r3, [pc, #104]	@ (8000e08 <_ZL11MX_ETH_Initv+0x94>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000da2:	4b17      	ldr	r3, [pc, #92]	@ (8000e00 <_ZL11MX_ETH_Initv+0x8c>)
 8000da4:	4a18      	ldr	r2, [pc, #96]	@ (8000e08 <_ZL11MX_ETH_Initv+0x94>)
 8000da6:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000da8:	4b15      	ldr	r3, [pc, #84]	@ (8000e00 <_ZL11MX_ETH_Initv+0x8c>)
 8000daa:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000dae:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000db0:	4b13      	ldr	r3, [pc, #76]	@ (8000e00 <_ZL11MX_ETH_Initv+0x8c>)
 8000db2:	4a16      	ldr	r2, [pc, #88]	@ (8000e0c <_ZL11MX_ETH_Initv+0x98>)
 8000db4:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000db6:	4b12      	ldr	r3, [pc, #72]	@ (8000e00 <_ZL11MX_ETH_Initv+0x8c>)
 8000db8:	4a15      	ldr	r2, [pc, #84]	@ (8000e10 <_ZL11MX_ETH_Initv+0x9c>)
 8000dba:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000dbc:	4b10      	ldr	r3, [pc, #64]	@ (8000e00 <_ZL11MX_ETH_Initv+0x8c>)
 8000dbe:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000dc2:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000dc4:	480e      	ldr	r0, [pc, #56]	@ (8000e00 <_ZL11MX_ETH_Initv+0x8c>)
 8000dc6:	f001 fbbd 	bl	8002544 <HAL_ETH_Init>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	bf14      	ite	ne
 8000dd0:	2301      	movne	r3, #1
 8000dd2:	2300      	moveq	r3, #0
 8000dd4:	b2db      	uxtb	r3, r3
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <_ZL11MX_ETH_Initv+0x6a>
  {
    Error_Handler();
 8000dda:	f000 fa45 	bl	8001268 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000dde:	2238      	movs	r2, #56	@ 0x38
 8000de0:	2100      	movs	r1, #0
 8000de2:	480c      	ldr	r0, [pc, #48]	@ (8000e14 <_ZL11MX_ETH_Initv+0xa0>)
 8000de4:	f003 fd7c 	bl	80048e0 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000de8:	4b0a      	ldr	r3, [pc, #40]	@ (8000e14 <_ZL11MX_ETH_Initv+0xa0>)
 8000dea:	2221      	movs	r2, #33	@ 0x21
 8000dec:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000dee:	4b09      	ldr	r3, [pc, #36]	@ (8000e14 <_ZL11MX_ETH_Initv+0xa0>)
 8000df0:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8000df4:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000df6:	4b07      	ldr	r3, [pc, #28]	@ (8000e14 <_ZL11MX_ETH_Initv+0xa0>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000dfc:	bf00      	nop
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	20000218 	.word	0x20000218
 8000e04:	40028000 	.word	0x40028000
 8000e08:	20000494 	.word	0x20000494
 8000e0c:	20000150 	.word	0x20000150
 8000e10:	200000b0 	.word	0x200000b0
 8000e14:	20000078 	.word	0x20000078

08000e18 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e1c:	4b15      	ldr	r3, [pc, #84]	@ (8000e74 <_ZL12MX_I2C1_Initv+0x5c>)
 8000e1e:	4a16      	ldr	r2, [pc, #88]	@ (8000e78 <_ZL12MX_I2C1_Initv+0x60>)
 8000e20:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000e22:	4b14      	ldr	r3, [pc, #80]	@ (8000e74 <_ZL12MX_I2C1_Initv+0x5c>)
 8000e24:	4a15      	ldr	r2, [pc, #84]	@ (8000e7c <_ZL12MX_I2C1_Initv+0x64>)
 8000e26:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e28:	4b12      	ldr	r3, [pc, #72]	@ (8000e74 <_ZL12MX_I2C1_Initv+0x5c>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000e2e:	4b11      	ldr	r3, [pc, #68]	@ (8000e74 <_ZL12MX_I2C1_Initv+0x5c>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e34:	4b0f      	ldr	r3, [pc, #60]	@ (8000e74 <_ZL12MX_I2C1_Initv+0x5c>)
 8000e36:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000e3a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e3c:	4b0d      	ldr	r3, [pc, #52]	@ (8000e74 <_ZL12MX_I2C1_Initv+0x5c>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000e42:	4b0c      	ldr	r3, [pc, #48]	@ (8000e74 <_ZL12MX_I2C1_Initv+0x5c>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e48:	4b0a      	ldr	r3, [pc, #40]	@ (8000e74 <_ZL12MX_I2C1_Initv+0x5c>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e4e:	4b09      	ldr	r3, [pc, #36]	@ (8000e74 <_ZL12MX_I2C1_Initv+0x5c>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e54:	4807      	ldr	r0, [pc, #28]	@ (8000e74 <_ZL12MX_I2C1_Initv+0x5c>)
 8000e56:	f002 f853 	bl	8002f00 <HAL_I2C_Init>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	bf14      	ite	ne
 8000e60:	2301      	movne	r3, #1
 8000e62:	2300      	moveq	r3, #0
 8000e64:	b2db      	uxtb	r3, r3
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 8000e6a:	f000 f9fd 	bl	8001268 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e6e:	bf00      	nop
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	200002c8 	.word	0x200002c8
 8000e78:	40005400 	.word	0x40005400
 8000e7c:	000186a0 	.word	0x000186a0

08000e80 <_ZL12MX_I2C3_Initv>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000e84:	4b15      	ldr	r3, [pc, #84]	@ (8000edc <_ZL12MX_I2C3_Initv+0x5c>)
 8000e86:	4a16      	ldr	r2, [pc, #88]	@ (8000ee0 <_ZL12MX_I2C3_Initv+0x60>)
 8000e88:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000e8a:	4b14      	ldr	r3, [pc, #80]	@ (8000edc <_ZL12MX_I2C3_Initv+0x5c>)
 8000e8c:	4a15      	ldr	r2, [pc, #84]	@ (8000ee4 <_ZL12MX_I2C3_Initv+0x64>)
 8000e8e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e90:	4b12      	ldr	r3, [pc, #72]	@ (8000edc <_ZL12MX_I2C3_Initv+0x5c>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000e96:	4b11      	ldr	r3, [pc, #68]	@ (8000edc <_ZL12MX_I2C3_Initv+0x5c>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e9c:	4b0f      	ldr	r3, [pc, #60]	@ (8000edc <_ZL12MX_I2C3_Initv+0x5c>)
 8000e9e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000ea2:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ea4:	4b0d      	ldr	r3, [pc, #52]	@ (8000edc <_ZL12MX_I2C3_Initv+0x5c>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000eaa:	4b0c      	ldr	r3, [pc, #48]	@ (8000edc <_ZL12MX_I2C3_Initv+0x5c>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000eb0:	4b0a      	ldr	r3, [pc, #40]	@ (8000edc <_ZL12MX_I2C3_Initv+0x5c>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000eb6:	4b09      	ldr	r3, [pc, #36]	@ (8000edc <_ZL12MX_I2C3_Initv+0x5c>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000ebc:	4807      	ldr	r0, [pc, #28]	@ (8000edc <_ZL12MX_I2C3_Initv+0x5c>)
 8000ebe:	f002 f81f 	bl	8002f00 <HAL_I2C_Init>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	bf14      	ite	ne
 8000ec8:	2301      	movne	r3, #1
 8000eca:	2300      	moveq	r3, #0
 8000ecc:	b2db      	uxtb	r3, r3
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <_ZL12MX_I2C3_Initv+0x56>
  {
    Error_Handler();
 8000ed2:	f000 f9c9 	bl	8001268 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000ed6:	bf00      	nop
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	2000031c 	.word	0x2000031c
 8000ee0:	40005c00 	.word	0x40005c00
 8000ee4:	000186a0 	.word	0x000186a0

08000ee8 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000eec:	4b1a      	ldr	r3, [pc, #104]	@ (8000f58 <_ZL12MX_SPI1_Initv+0x70>)
 8000eee:	4a1b      	ldr	r2, [pc, #108]	@ (8000f5c <_ZL12MX_SPI1_Initv+0x74>)
 8000ef0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ef2:	4b19      	ldr	r3, [pc, #100]	@ (8000f58 <_ZL12MX_SPI1_Initv+0x70>)
 8000ef4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000ef8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000efa:	4b17      	ldr	r3, [pc, #92]	@ (8000f58 <_ZL12MX_SPI1_Initv+0x70>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f00:	4b15      	ldr	r3, [pc, #84]	@ (8000f58 <_ZL12MX_SPI1_Initv+0x70>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f06:	4b14      	ldr	r3, [pc, #80]	@ (8000f58 <_ZL12MX_SPI1_Initv+0x70>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f0c:	4b12      	ldr	r3, [pc, #72]	@ (8000f58 <_ZL12MX_SPI1_Initv+0x70>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f12:	4b11      	ldr	r3, [pc, #68]	@ (8000f58 <_ZL12MX_SPI1_Initv+0x70>)
 8000f14:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f18:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f1a:	4b0f      	ldr	r3, [pc, #60]	@ (8000f58 <_ZL12MX_SPI1_Initv+0x70>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f20:	4b0d      	ldr	r3, [pc, #52]	@ (8000f58 <_ZL12MX_SPI1_Initv+0x70>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f26:	4b0c      	ldr	r3, [pc, #48]	@ (8000f58 <_ZL12MX_SPI1_Initv+0x70>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f2c:	4b0a      	ldr	r3, [pc, #40]	@ (8000f58 <_ZL12MX_SPI1_Initv+0x70>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000f32:	4b09      	ldr	r3, [pc, #36]	@ (8000f58 <_ZL12MX_SPI1_Initv+0x70>)
 8000f34:	220a      	movs	r2, #10
 8000f36:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f38:	4807      	ldr	r0, [pc, #28]	@ (8000f58 <_ZL12MX_SPI1_Initv+0x70>)
 8000f3a:	f003 f895 	bl	8004068 <HAL_SPI_Init>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	bf14      	ite	ne
 8000f44:	2301      	movne	r3, #1
 8000f46:	2300      	moveq	r3, #0
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <_ZL12MX_SPI1_Initv+0x6a>
  {
    Error_Handler();
 8000f4e:	f000 f98b 	bl	8001268 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f52:	bf00      	nop
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	20000370 	.word	0x20000370
 8000f5c:	40013000 	.word	0x40013000

08000f60 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f64:	4b14      	ldr	r3, [pc, #80]	@ (8000fb8 <_ZL19MX_USART1_UART_Initv+0x58>)
 8000f66:	4a15      	ldr	r2, [pc, #84]	@ (8000fbc <_ZL19MX_USART1_UART_Initv+0x5c>)
 8000f68:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000f6a:	4b13      	ldr	r3, [pc, #76]	@ (8000fb8 <_ZL19MX_USART1_UART_Initv+0x58>)
 8000f6c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f70:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f72:	4b11      	ldr	r3, [pc, #68]	@ (8000fb8 <_ZL19MX_USART1_UART_Initv+0x58>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f78:	4b0f      	ldr	r3, [pc, #60]	@ (8000fb8 <_ZL19MX_USART1_UART_Initv+0x58>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f7e:	4b0e      	ldr	r3, [pc, #56]	@ (8000fb8 <_ZL19MX_USART1_UART_Initv+0x58>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f84:	4b0c      	ldr	r3, [pc, #48]	@ (8000fb8 <_ZL19MX_USART1_UART_Initv+0x58>)
 8000f86:	220c      	movs	r2, #12
 8000f88:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8000f8a:	4b0b      	ldr	r3, [pc, #44]	@ (8000fb8 <_ZL19MX_USART1_UART_Initv+0x58>)
 8000f8c:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000f90:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f92:	4b09      	ldr	r3, [pc, #36]	@ (8000fb8 <_ZL19MX_USART1_UART_Initv+0x58>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f98:	4807      	ldr	r0, [pc, #28]	@ (8000fb8 <_ZL19MX_USART1_UART_Initv+0x58>)
 8000f9a:	f003 f8ee 	bl	800417a <HAL_UART_Init>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	bf14      	ite	ne
 8000fa4:	2301      	movne	r3, #1
 8000fa6:	2300      	moveq	r3, #0
 8000fa8:	b2db      	uxtb	r3, r3
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <_ZL19MX_USART1_UART_Initv+0x52>
  {
    Error_Handler();
 8000fae:	f000 f95b 	bl	8001268 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000fb2:	bf00      	nop
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	200003c8 	.word	0x200003c8
 8000fbc:	40011000 	.word	0x40011000

08000fc0 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000fc4:	4b14      	ldr	r3, [pc, #80]	@ (8001018 <_ZL19MX_USART2_UART_Initv+0x58>)
 8000fc6:	4a15      	ldr	r2, [pc, #84]	@ (800101c <_ZL19MX_USART2_UART_Initv+0x5c>)
 8000fc8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000fca:	4b13      	ldr	r3, [pc, #76]	@ (8001018 <_ZL19MX_USART2_UART_Initv+0x58>)
 8000fcc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000fd0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fd2:	4b11      	ldr	r3, [pc, #68]	@ (8001018 <_ZL19MX_USART2_UART_Initv+0x58>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fd8:	4b0f      	ldr	r3, [pc, #60]	@ (8001018 <_ZL19MX_USART2_UART_Initv+0x58>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000fde:	4b0e      	ldr	r3, [pc, #56]	@ (8001018 <_ZL19MX_USART2_UART_Initv+0x58>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000fe4:	4b0c      	ldr	r3, [pc, #48]	@ (8001018 <_ZL19MX_USART2_UART_Initv+0x58>)
 8000fe6:	220c      	movs	r2, #12
 8000fe8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8000fea:	4b0b      	ldr	r3, [pc, #44]	@ (8001018 <_ZL19MX_USART2_UART_Initv+0x58>)
 8000fec:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000ff0:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ff2:	4b09      	ldr	r3, [pc, #36]	@ (8001018 <_ZL19MX_USART2_UART_Initv+0x58>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ff8:	4807      	ldr	r0, [pc, #28]	@ (8001018 <_ZL19MX_USART2_UART_Initv+0x58>)
 8000ffa:	f003 f8be 	bl	800417a <HAL_UART_Init>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	bf14      	ite	ne
 8001004:	2301      	movne	r3, #1
 8001006:	2300      	moveq	r3, #0
 8001008:	b2db      	uxtb	r3, r3
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <_ZL19MX_USART2_UART_Initv+0x52>
  {
    Error_Handler();
 800100e:	f000 f92b 	bl	8001268 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001012:	bf00      	nop
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	2000040c 	.word	0x2000040c
 800101c:	40004400 	.word	0x40004400

08001020 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001024:	4b14      	ldr	r3, [pc, #80]	@ (8001078 <_ZL19MX_USART3_UART_Initv+0x58>)
 8001026:	4a15      	ldr	r2, [pc, #84]	@ (800107c <_ZL19MX_USART3_UART_Initv+0x5c>)
 8001028:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800102a:	4b13      	ldr	r3, [pc, #76]	@ (8001078 <_ZL19MX_USART3_UART_Initv+0x58>)
 800102c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001030:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001032:	4b11      	ldr	r3, [pc, #68]	@ (8001078 <_ZL19MX_USART3_UART_Initv+0x58>)
 8001034:	2200      	movs	r2, #0
 8001036:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001038:	4b0f      	ldr	r3, [pc, #60]	@ (8001078 <_ZL19MX_USART3_UART_Initv+0x58>)
 800103a:	2200      	movs	r2, #0
 800103c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800103e:	4b0e      	ldr	r3, [pc, #56]	@ (8001078 <_ZL19MX_USART3_UART_Initv+0x58>)
 8001040:	2200      	movs	r2, #0
 8001042:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001044:	4b0c      	ldr	r3, [pc, #48]	@ (8001078 <_ZL19MX_USART3_UART_Initv+0x58>)
 8001046:	220c      	movs	r2, #12
 8001048:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 800104a:	4b0b      	ldr	r3, [pc, #44]	@ (8001078 <_ZL19MX_USART3_UART_Initv+0x58>)
 800104c:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001050:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001052:	4b09      	ldr	r3, [pc, #36]	@ (8001078 <_ZL19MX_USART3_UART_Initv+0x58>)
 8001054:	2200      	movs	r2, #0
 8001056:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001058:	4807      	ldr	r0, [pc, #28]	@ (8001078 <_ZL19MX_USART3_UART_Initv+0x58>)
 800105a:	f003 f88e 	bl	800417a <HAL_UART_Init>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	bf14      	ite	ne
 8001064:	2301      	movne	r3, #1
 8001066:	2300      	moveq	r3, #0
 8001068:	b2db      	uxtb	r3, r3
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <_ZL19MX_USART3_UART_Initv+0x52>
  {
    Error_Handler();
 800106e:	f000 f8fb 	bl	8001268 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001072:	bf00      	nop
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	20000450 	.word	0x20000450
 800107c:	40004800 	.word	0x40004800

08001080 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b08c      	sub	sp, #48	@ 0x30
 8001084:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001086:	f107 031c 	add.w	r3, r7, #28
 800108a:	2200      	movs	r2, #0
 800108c:	601a      	str	r2, [r3, #0]
 800108e:	605a      	str	r2, [r3, #4]
 8001090:	609a      	str	r2, [r3, #8]
 8001092:	60da      	str	r2, [r3, #12]
 8001094:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001096:	2300      	movs	r3, #0
 8001098:	61bb      	str	r3, [r7, #24]
 800109a:	4b6d      	ldr	r3, [pc, #436]	@ (8001250 <_ZL12MX_GPIO_Initv+0x1d0>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800109e:	4a6c      	ldr	r2, [pc, #432]	@ (8001250 <_ZL12MX_GPIO_Initv+0x1d0>)
 80010a0:	f043 0310 	orr.w	r3, r3, #16
 80010a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80010a6:	4b6a      	ldr	r3, [pc, #424]	@ (8001250 <_ZL12MX_GPIO_Initv+0x1d0>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010aa:	f003 0310 	and.w	r3, r3, #16
 80010ae:	61bb      	str	r3, [r7, #24]
 80010b0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010b2:	2300      	movs	r3, #0
 80010b4:	617b      	str	r3, [r7, #20]
 80010b6:	4b66      	ldr	r3, [pc, #408]	@ (8001250 <_ZL12MX_GPIO_Initv+0x1d0>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ba:	4a65      	ldr	r2, [pc, #404]	@ (8001250 <_ZL12MX_GPIO_Initv+0x1d0>)
 80010bc:	f043 0304 	orr.w	r3, r3, #4
 80010c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010c2:	4b63      	ldr	r3, [pc, #396]	@ (8001250 <_ZL12MX_GPIO_Initv+0x1d0>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010c6:	f003 0304 	and.w	r3, r3, #4
 80010ca:	617b      	str	r3, [r7, #20]
 80010cc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010ce:	2300      	movs	r3, #0
 80010d0:	613b      	str	r3, [r7, #16]
 80010d2:	4b5f      	ldr	r3, [pc, #380]	@ (8001250 <_ZL12MX_GPIO_Initv+0x1d0>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010d6:	4a5e      	ldr	r2, [pc, #376]	@ (8001250 <_ZL12MX_GPIO_Initv+0x1d0>)
 80010d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80010dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80010de:	4b5c      	ldr	r3, [pc, #368]	@ (8001250 <_ZL12MX_GPIO_Initv+0x1d0>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80010e6:	613b      	str	r3, [r7, #16]
 80010e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ea:	2300      	movs	r3, #0
 80010ec:	60fb      	str	r3, [r7, #12]
 80010ee:	4b58      	ldr	r3, [pc, #352]	@ (8001250 <_ZL12MX_GPIO_Initv+0x1d0>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010f2:	4a57      	ldr	r2, [pc, #348]	@ (8001250 <_ZL12MX_GPIO_Initv+0x1d0>)
 80010f4:	f043 0301 	orr.w	r3, r3, #1
 80010f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80010fa:	4b55      	ldr	r3, [pc, #340]	@ (8001250 <_ZL12MX_GPIO_Initv+0x1d0>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010fe:	f003 0301 	and.w	r3, r3, #1
 8001102:	60fb      	str	r3, [r7, #12]
 8001104:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001106:	2300      	movs	r3, #0
 8001108:	60bb      	str	r3, [r7, #8]
 800110a:	4b51      	ldr	r3, [pc, #324]	@ (8001250 <_ZL12MX_GPIO_Initv+0x1d0>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800110e:	4a50      	ldr	r2, [pc, #320]	@ (8001250 <_ZL12MX_GPIO_Initv+0x1d0>)
 8001110:	f043 0302 	orr.w	r3, r3, #2
 8001114:	6313      	str	r3, [r2, #48]	@ 0x30
 8001116:	4b4e      	ldr	r3, [pc, #312]	@ (8001250 <_ZL12MX_GPIO_Initv+0x1d0>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800111a:	f003 0302 	and.w	r3, r3, #2
 800111e:	60bb      	str	r3, [r7, #8]
 8001120:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001122:	2300      	movs	r3, #0
 8001124:	607b      	str	r3, [r7, #4]
 8001126:	4b4a      	ldr	r3, [pc, #296]	@ (8001250 <_ZL12MX_GPIO_Initv+0x1d0>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800112a:	4a49      	ldr	r2, [pc, #292]	@ (8001250 <_ZL12MX_GPIO_Initv+0x1d0>)
 800112c:	f043 0308 	orr.w	r3, r3, #8
 8001130:	6313      	str	r3, [r2, #48]	@ 0x30
 8001132:	4b47      	ldr	r3, [pc, #284]	@ (8001250 <_ZL12MX_GPIO_Initv+0x1d0>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001136:	f003 0308 	and.w	r3, r3, #8
 800113a:	607b      	str	r3, [r7, #4]
 800113c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, Led_R_Pin|Led_O_Pin|Led_Y_Pin|Led_G_Pin
 800113e:	2200      	movs	r2, #0
 8001140:	21f8      	movs	r1, #248	@ 0xf8
 8001142:	4844      	ldr	r0, [pc, #272]	@ (8001254 <_ZL12MX_GPIO_Initv+0x1d4>)
 8001144:	f001 fec2 	bl	8002ecc <HAL_GPIO_WritePin>
                          |OE_1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8001148:	2200      	movs	r2, #0
 800114a:	2110      	movs	r1, #16
 800114c:	4842      	ldr	r0, [pc, #264]	@ (8001258 <_ZL12MX_GPIO_Initv+0x1d8>)
 800114e:	f001 febd 	bl	8002ecc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DIR_1_Pin|OE_0_Pin, GPIO_PIN_RESET);
 8001152:	2200      	movs	r2, #0
 8001154:	f248 0104 	movw	r1, #32772	@ 0x8004
 8001158:	4840      	ldr	r0, [pc, #256]	@ (800125c <_ZL12MX_GPIO_Initv+0x1dc>)
 800115a:	f001 feb7 	bl	8002ecc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR_0_GPIO_Port, DIR_0_Pin, GPIO_PIN_RESET);
 800115e:	2200      	movs	r2, #0
 8001160:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001164:	483e      	ldr	r0, [pc, #248]	@ (8001260 <_ZL12MX_GPIO_Initv+0x1e0>)
 8001166:	f001 feb1 	bl	8002ecc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Button_3_Pin GPIO_8_Pin GPIO_9_Pin GPIO_10_Pin
                           GPIO_11_Pin GPIO_12_Pin GPIO_13_Pin GPIO_14_Pin
                           GPIO_15_Pin Button_1_Pin Button_2_Pin */
  GPIO_InitStruct.Pin = Button_3_Pin|GPIO_8_Pin|GPIO_9_Pin|GPIO_10_Pin
 800116a:	f64f 7307 	movw	r3, #65287	@ 0xff07
 800116e:	61fb      	str	r3, [r7, #28]
                          |GPIO_11_Pin|GPIO_12_Pin|GPIO_13_Pin|GPIO_14_Pin
                          |GPIO_15_Pin|Button_1_Pin|Button_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001170:	2300      	movs	r3, #0
 8001172:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001174:	2300      	movs	r3, #0
 8001176:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001178:	f107 031c 	add.w	r3, r7, #28
 800117c:	4619      	mov	r1, r3
 800117e:	4835      	ldr	r0, [pc, #212]	@ (8001254 <_ZL12MX_GPIO_Initv+0x1d4>)
 8001180:	f001 fd08 	bl	8002b94 <HAL_GPIO_Init>

  /*Configure GPIO pins : Led_R_Pin Led_O_Pin Led_Y_Pin Led_G_Pin
                           OE_1_Pin */
  GPIO_InitStruct.Pin = Led_R_Pin|Led_O_Pin|Led_Y_Pin|Led_G_Pin
 8001184:	23f8      	movs	r3, #248	@ 0xf8
 8001186:	61fb      	str	r3, [r7, #28]
                          |OE_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001188:	2301      	movs	r3, #1
 800118a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118c:	2300      	movs	r3, #0
 800118e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001190:	2300      	movs	r3, #0
 8001192:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001194:	f107 031c 	add.w	r3, r7, #28
 8001198:	4619      	mov	r1, r3
 800119a:	482e      	ldr	r0, [pc, #184]	@ (8001254 <_ZL12MX_GPIO_Initv+0x1d4>)
 800119c:	f001 fcfa 	bl	8002b94 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 80011a0:	2310      	movs	r3, #16
 80011a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011a4:	2301      	movs	r3, #1
 80011a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a8:	2300      	movs	r3, #0
 80011aa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ac:	2300      	movs	r3, #0
 80011ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 80011b0:	f107 031c 	add.w	r3, r7, #28
 80011b4:	4619      	mov	r1, r3
 80011b6:	4828      	ldr	r0, [pc, #160]	@ (8001258 <_ZL12MX_GPIO_Initv+0x1d8>)
 80011b8:	f001 fcec 	bl	8002b94 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR_1_Pin OE_0_Pin */
  GPIO_InitStruct.Pin = DIR_1_Pin|OE_0_Pin;
 80011bc:	f248 0304 	movw	r3, #32772	@ 0x8004
 80011c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011c2:	2301      	movs	r3, #1
 80011c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c6:	2300      	movs	r3, #0
 80011c8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ca:	2300      	movs	r3, #0
 80011cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ce:	f107 031c 	add.w	r3, r7, #28
 80011d2:	4619      	mov	r1, r3
 80011d4:	4821      	ldr	r0, [pc, #132]	@ (800125c <_ZL12MX_GPIO_Initv+0x1dc>)
 80011d6:	f001 fcdd 	bl	8002b94 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIR_0_Pin */
  GPIO_InitStruct.Pin = DIR_0_Pin;
 80011da:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80011de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e0:	2301      	movs	r3, #1
 80011e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e4:	2300      	movs	r3, #0
 80011e6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e8:	2300      	movs	r3, #0
 80011ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(DIR_0_GPIO_Port, &GPIO_InitStruct);
 80011ec:	f107 031c 	add.w	r3, r7, #28
 80011f0:	4619      	mov	r1, r3
 80011f2:	481b      	ldr	r0, [pc, #108]	@ (8001260 <_ZL12MX_GPIO_Initv+0x1e0>)
 80011f4:	f001 fcce 	bl	8002b94 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_7_Pin GPIO_6_Pin GPIO_5_Pin GPIO_4_Pin
                           GPIO_3_Pin Switch_1_Pin */
  GPIO_InitStruct.Pin = GPIO_7_Pin|GPIO_6_Pin|GPIO_5_Pin|GPIO_4_Pin
 80011f8:	f24f 4380 	movw	r3, #62592	@ 0xf480
 80011fc:	61fb      	str	r3, [r7, #28]
                          |GPIO_3_Pin|Switch_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011fe:	2300      	movs	r3, #0
 8001200:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001202:	2300      	movs	r3, #0
 8001204:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001206:	f107 031c 	add.w	r3, r7, #28
 800120a:	4619      	mov	r1, r3
 800120c:	4814      	ldr	r0, [pc, #80]	@ (8001260 <_ZL12MX_GPIO_Initv+0x1e0>)
 800120e:	f001 fcc1 	bl	8002b94 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_2_Pin GPIO_1_Pin GPIO_0_Pin */
  GPIO_InitStruct.Pin = GPIO_2_Pin|GPIO_1_Pin|GPIO_0_Pin;
 8001212:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8001216:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001218:	2300      	movs	r3, #0
 800121a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121c:	2300      	movs	r3, #0
 800121e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001220:	f107 031c 	add.w	r3, r7, #28
 8001224:	4619      	mov	r1, r3
 8001226:	480f      	ldr	r0, [pc, #60]	@ (8001264 <_ZL12MX_GPIO_Initv+0x1e4>)
 8001228:	f001 fcb4 	bl	8002b94 <HAL_GPIO_Init>

  /*Configure GPIO pins : Switch_2_Pin Switch_3_Pin */
  GPIO_InitStruct.Pin = Switch_2_Pin|Switch_3_Pin;
 800122c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001230:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001232:	2300      	movs	r3, #0
 8001234:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001236:	2300      	movs	r3, #0
 8001238:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800123a:	f107 031c 	add.w	r3, r7, #28
 800123e:	4619      	mov	r1, r3
 8001240:	4806      	ldr	r0, [pc, #24]	@ (800125c <_ZL12MX_GPIO_Initv+0x1dc>)
 8001242:	f001 fca7 	bl	8002b94 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001246:	bf00      	nop
 8001248:	3730      	adds	r7, #48	@ 0x30
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	40023800 	.word	0x40023800
 8001254:	40021000 	.word	0x40021000
 8001258:	40020000 	.word	0x40020000
 800125c:	40020400 	.word	0x40020400
 8001260:	40020c00 	.word	0x40020c00
 8001264:	40020800 	.word	0x40020800

08001268 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800126c:	b672      	cpsid	i
}
 800126e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001270:	bf00      	nop
 8001272:	e7fd      	b.n	8001270 <Error_Handler+0x8>

08001274 <_ZSt12construct_atIcJRKcEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    }

#if __cplusplus >= 202002L
  template<typename _Tp, typename... _Args>
    constexpr auto
    construct_at(_Tp* __location, _Args&&... __args)
 8001274:	b590      	push	{r4, r7, lr}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
 800127c:	6039      	str	r1, [r7, #0]
    noexcept(noexcept(::new((void*)0) _Tp(std::declval<_Args>()...)))
    -> decltype(::new((void*)0) _Tp(std::declval<_Args>()...))
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4619      	mov	r1, r3
 8001282:	2001      	movs	r0, #1
 8001284:	f7ff fb3a 	bl	80008fc <_ZnwjPv>
 8001288:	4604      	mov	r4, r0
 800128a:	6838      	ldr	r0, [r7, #0]
 800128c:	f000 f8d5 	bl	800143a <_ZSt7forwardIRKcEOT_RNSt16remove_referenceIS2_E4typeE>
 8001290:	4603      	mov	r3, r0
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	7023      	strb	r3, [r4, #0]
 8001296:	4623      	mov	r3, r4
 8001298:	4618      	mov	r0, r3
 800129a:	370c      	adds	r7, #12
 800129c:	46bd      	mov	sp, r7
 800129e:	bd90      	pop	{r4, r7, pc}

080012a0 <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc>:
    char_traits<_CharT>::
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
      std::size_t __i = 0;
 80012a8:	2300      	movs	r3, #0
 80012aa:	60fb      	str	r3, [r7, #12]
      while (!eq(__p[__i], char_type()))
 80012ac:	e002      	b.n	80012b4 <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc+0x14>
        ++__i;
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	3301      	adds	r3, #1
 80012b2:	60fb      	str	r3, [r7, #12]
      while (!eq(__p[__i], char_type()))
 80012b4:	687a      	ldr	r2, [r7, #4]
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	4413      	add	r3, r2
 80012ba:	2200      	movs	r2, #0
 80012bc:	72fa      	strb	r2, [r7, #11]
 80012be:	f107 020b 	add.w	r2, r7, #11
 80012c2:	4611      	mov	r1, r2
 80012c4:	4618      	mov	r0, r3
 80012c6:	f000 f8c3 	bl	8001450 <_ZN9__gnu_cxx11char_traitsIcE2eqERKcS3_>
 80012ca:	4603      	mov	r3, r0
 80012cc:	f083 0301 	eor.w	r3, r3, #1
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d1eb      	bne.n	80012ae <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc+0xe>
      return __i;
 80012d6:	68fb      	ldr	r3, [r7, #12]
    }
 80012d8:	4618      	mov	r0, r3
 80012da:	3710      	adds	r7, #16
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}

080012e0 <_ZN9__gnu_cxx11char_traitsIcE4copyEPcPKcj>:
    char_traits<_CharT>::
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b086      	sub	sp, #24
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	60f8      	str	r0, [r7, #12]
 80012e8:	60b9      	str	r1, [r7, #8]
 80012ea:	607a      	str	r2, [r7, #4]
      if (__n == 0)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d101      	bne.n	80012f6 <_ZN9__gnu_cxx11char_traitsIcE4copyEPcPKcj+0x16>
	return __s1;
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	e022      	b.n	800133c <_ZN9__gnu_cxx11char_traitsIcE4copyEPcPKcj+0x5c>
      if (std::__is_constant_evaluated())
 80012f6:	f7ff f8e7 	bl	80004c8 <_ZSt23__is_constant_evaluatedv>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d014      	beq.n	800132a <_ZN9__gnu_cxx11char_traitsIcE4copyEPcPKcj+0x4a>
	  for (std::size_t __i = 0; __i < __n; ++__i)
 8001300:	2300      	movs	r3, #0
 8001302:	617b      	str	r3, [r7, #20]
 8001304:	e00b      	b.n	800131e <_ZN9__gnu_cxx11char_traitsIcE4copyEPcPKcj+0x3e>
	    std::construct_at(__s1 + __i, __s2[__i]);
 8001306:	68fa      	ldr	r2, [r7, #12]
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	18d0      	adds	r0, r2, r3
 800130c:	68ba      	ldr	r2, [r7, #8]
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	4413      	add	r3, r2
 8001312:	4619      	mov	r1, r3
 8001314:	f7ff ffae 	bl	8001274 <_ZSt12construct_atIcJRKcEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	  for (std::size_t __i = 0; __i < __n; ++__i)
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	3301      	adds	r3, #1
 800131c:	617b      	str	r3, [r7, #20]
 800131e:	697a      	ldr	r2, [r7, #20]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	429a      	cmp	r2, r3
 8001324:	d3ef      	bcc.n	8001306 <_ZN9__gnu_cxx11char_traitsIcE4copyEPcPKcj+0x26>
	  return __s1;
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	e008      	b.n	800133c <_ZN9__gnu_cxx11char_traitsIcE4copyEPcPKcj+0x5c>
      __builtin_memcpy(__s1, __s2, __n * sizeof(char_type));
 800132a:	68fa      	ldr	r2, [r7, #12]
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	4610      	mov	r0, r2
 8001330:	4619      	mov	r1, r3
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	461a      	mov	r2, r3
 8001336:	f003 fb5b 	bl	80049f0 <memcpy>
      return __s1;
 800133a:	68fb      	ldr	r3, [r7, #12]
    }
 800133c:	4618      	mov	r0, r3
 800133e:	3718      	adds	r7, #24
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}

08001344 <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardC1EPS4_>:

	// Check for out_of_range and length_error exceptions.
	struct _Guard
	{
	  _GLIBCXX20_CONSTEXPR
	  explicit _Guard(basic_string* __s) : _M_guarded(__s) { }
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	6039      	str	r1, [r7, #0]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	683a      	ldr	r2, [r7, #0]
 8001352:	601a      	str	r2, [r3, #0]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	4618      	mov	r0, r3
 8001358:	370c      	adds	r7, #12
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr

08001362 <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardD1Ev>:

	  _GLIBCXX20_CONSTEXPR
	  ~_Guard() { if (_M_guarded) _M_guarded->_M_dispose(); }
 8001362:	b580      	push	{r7, lr}
 8001364:	b082      	sub	sp, #8
 8001366:	af00      	add	r7, sp, #0
 8001368:	6078      	str	r0, [r7, #4]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d004      	beq.n	800137c <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardD1Ev+0x1a>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4618      	mov	r0, r3
 8001378:	f000 f87e 	bl	8001478 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	4618      	mov	r0, r3
 8001380:	3708      	adds	r7, #8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}

08001386 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
      basic_string<_CharT, _Traits, _Alloc>::
 8001386:	b580      	push	{r7, lr}
 8001388:	b088      	sub	sp, #32
 800138a:	af00      	add	r7, sp, #0
 800138c:	60f8      	str	r0, [r7, #12]
 800138e:	60b9      	str	r1, [r7, #8]
 8001390:	607a      	str	r2, [r7, #4]
 8001392:	703b      	strb	r3, [r7, #0]
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
 8001394:	6879      	ldr	r1, [r7, #4]
 8001396:	68b8      	ldr	r0, [r7, #8]
 8001398:	f000 f8f2 	bl	8001580 <_ZSt8distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_>
 800139c:	4603      	mov	r3, r0
 800139e:	617b      	str	r3, [r7, #20]
	if (__dnew > size_type(_S_local_capacity))
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	2b0f      	cmp	r3, #15
 80013a4:	d911      	bls.n	80013ca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>
	    _M_data(_M_create(__dnew, size_type(0)));
 80013a6:	f107 0314 	add.w	r3, r7, #20
 80013aa:	2200      	movs	r2, #0
 80013ac:	4619      	mov	r1, r3
 80013ae:	68f8      	ldr	r0, [r7, #12]
 80013b0:	f000 f8fa 	bl	80015a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80013b4:	4603      	mov	r3, r0
 80013b6:	4619      	mov	r1, r3
 80013b8:	68f8      	ldr	r0, [r7, #12]
 80013ba:	f000 f89c 	bl	80014f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
	    _M_capacity(__dnew);
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	4619      	mov	r1, r3
 80013c2:	68f8      	ldr	r0, [r7, #12]
 80013c4:	f000 f8a5 	bl	8001512 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>
 80013c8:	e019      	b.n	80013fe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x78>
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	61fb      	str	r3, [r7, #28]
	if (std::is_constant_evaluated())
 80013ce:	f7ff fa8d 	bl	80008ec <_ZSt21is_constant_evaluatedv>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d00e      	beq.n	80013f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x70>
	  for (size_type __i = 0; __i <= _S_local_capacity; ++__i)
 80013d8:	2300      	movs	r3, #0
 80013da:	61bb      	str	r3, [r7, #24]
 80013dc:	e008      	b.n	80013f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x6a>
	    _M_local_buf[__i] = _CharT();
 80013de:	69fa      	ldr	r2, [r7, #28]
 80013e0:	69bb      	ldr	r3, [r7, #24]
 80013e2:	4413      	add	r3, r2
 80013e4:	3308      	adds	r3, #8
 80013e6:	2200      	movs	r2, #0
 80013e8:	701a      	strb	r2, [r3, #0]
	  for (size_type __i = 0; __i <= _S_local_capacity; ++__i)
 80013ea:	69bb      	ldr	r3, [r7, #24]
 80013ec:	3301      	adds	r3, #1
 80013ee:	61bb      	str	r3, [r7, #24]
 80013f0:	69bb      	ldr	r3, [r7, #24]
 80013f2:	2b0f      	cmp	r3, #15
 80013f4:	d9f3      	bls.n	80013de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x58>
	return _M_local_data();
 80013f6:	69f8      	ldr	r0, [r7, #28]
 80013f8:	f7ff fb0a 	bl	8000a10 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
 80013fc:	bf00      	nop

	  basic_string* _M_guarded;
	} __guard(this);
 80013fe:	f107 0310 	add.w	r3, r7, #16
 8001402:	68f9      	ldr	r1, [r7, #12]
 8001404:	4618      	mov	r0, r3
 8001406:	f7ff ff9d 	bl	8001344 <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardC1EPS4_>

	this->_S_copy_chars(_M_data(), __beg, __end);
 800140a:	68f8      	ldr	r0, [r7, #12]
 800140c:	f7ff f9f7 	bl	80007fe <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 8001410:	4603      	mov	r3, r0
 8001412:	687a      	ldr	r2, [r7, #4]
 8001414:	68b9      	ldr	r1, [r7, #8]
 8001416:	4618      	mov	r0, r3
 8001418:	f000 f910 	bl	800163c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>

	__guard._M_guarded = 0;
 800141c:	2300      	movs	r3, #0
 800141e:	613b      	str	r3, [r7, #16]

	_M_set_length(__dnew);
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	4619      	mov	r1, r3
 8001424:	68f8      	ldr	r0, [r7, #12]
 8001426:	f000 f890 	bl	800154a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>
      }
 800142a:	f107 0310 	add.w	r3, r7, #16
 800142e:	4618      	mov	r0, r3
 8001430:	f7ff ff97 	bl	8001362 <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardD1Ev>
 8001434:	3720      	adds	r7, #32
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}

0800143a <_ZSt7forwardIRKcEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800143a:	b480      	push	{r7}
 800143c:	b083      	sub	sp, #12
 800143e:	af00      	add	r7, sp, #0
 8001440:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	4618      	mov	r0, r3
 8001446:	370c      	adds	r7, #12
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr

08001450 <_ZN9__gnu_cxx11char_traitsIcE2eqERKcS3_>:
      eq(const char_type& __c1, const char_type& __c2)
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
 8001458:	6039      	str	r1, [r7, #0]
      { return __c1 == __c2; }
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	781a      	ldrb	r2, [r3, #0]
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	429a      	cmp	r2, r3
 8001464:	bf0c      	ite	eq
 8001466:	2301      	moveq	r3, #1
 8001468:	2300      	movne	r3, #0
 800146a:	b2db      	uxtb	r3, r3
 800146c:	4618      	mov	r0, r3
 800146e:	370c      	adds	r7, #12
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr

08001478 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
      _M_dispose()
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
	if (!_M_is_local())
 8001480:	6878      	ldr	r0, [r7, #4]
 8001482:	f000 f81b 	bl	80014bc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 8001486:	4603      	mov	r3, r0
 8001488:	f083 0301 	eor.w	r3, r3, #1
 800148c:	b2db      	uxtb	r3, r3
 800148e:	2b00      	cmp	r3, #0
 8001490:	d005      	beq.n	800149e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0x26>
	  _M_destroy(_M_allocated_capacity);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	689b      	ldr	r3, [r3, #8]
 8001496:	4619      	mov	r1, r3
 8001498:	6878      	ldr	r0, [r7, #4]
 800149a:	f000 f8e1 	bl	8001660 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_destroyEj>
      }
 800149e:	bf00      	nop
 80014a0:	3708      	adds	r7, #8
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}

080014a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_get_allocatorEv>:
      _M_get_allocator()
 80014a6:	b480      	push	{r7}
 80014a8:	b083      	sub	sp, #12
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	6078      	str	r0, [r7, #4]
      { return _M_dataplus; }
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4618      	mov	r0, r3
 80014b2:	370c      	adds	r7, #12
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr

080014bc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>:
      _M_is_local() const
 80014bc:	b590      	push	{r4, r7, lr}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
	if (_M_data() == _M_local_data())
 80014c4:	6878      	ldr	r0, [r7, #4]
 80014c6:	f7ff f99a 	bl	80007fe <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 80014ca:	4604      	mov	r4, r0
 80014cc:	6878      	ldr	r0, [r7, #4]
 80014ce:	f000 f8de 	bl	800168e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
 80014d2:	4603      	mov	r3, r0
 80014d4:	429c      	cmp	r4, r3
 80014d6:	bf0c      	ite	eq
 80014d8:	2301      	moveq	r3, #1
 80014da:	2300      	movne	r3, #0
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d004      	beq.n	80014ec <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv+0x30>
	    if (_M_string_length > _S_local_capacity)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	2b0f      	cmp	r3, #15
	    return true;
 80014e8:	2301      	movs	r3, #1
 80014ea:	e000      	b.n	80014ee <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv+0x32>
	return false;
 80014ec:	2300      	movs	r3, #0
      }
 80014ee:	4618      	mov	r0, r3
 80014f0:	370c      	adds	r7, #12
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd90      	pop	{r4, r7, pc}

080014f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>:
      _M_data(pointer __p)
 80014f6:	b480      	push	{r7}
 80014f8:	b083      	sub	sp, #12
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	6078      	str	r0, [r7, #4]
 80014fe:	6039      	str	r1, [r7, #0]
      { _M_dataplus._M_p = __p; }
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	683a      	ldr	r2, [r7, #0]
 8001504:	601a      	str	r2, [r3, #0]
 8001506:	bf00      	nop
 8001508:	370c      	adds	r7, #12
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr

08001512 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>:
      _M_capacity(size_type __capacity)
 8001512:	b480      	push	{r7}
 8001514:	b083      	sub	sp, #12
 8001516:	af00      	add	r7, sp, #0
 8001518:	6078      	str	r0, [r7, #4]
 800151a:	6039      	str	r1, [r7, #0]
      { _M_allocated_capacity = __capacity; }
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	683a      	ldr	r2, [r7, #0]
 8001520:	609a      	str	r2, [r3, #8]
 8001522:	bf00      	nop
 8001524:	370c      	adds	r7, #12
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr

0800152e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_lengthEj>:
      _M_length(size_type __length)
 800152e:	b480      	push	{r7}
 8001530:	b083      	sub	sp, #12
 8001532:	af00      	add	r7, sp, #0
 8001534:	6078      	str	r0, [r7, #4]
 8001536:	6039      	str	r1, [r7, #0]
      { _M_string_length = __length; }
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	683a      	ldr	r2, [r7, #0]
 800153c:	605a      	str	r2, [r3, #4]
 800153e:	bf00      	nop
 8001540:	370c      	adds	r7, #12
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr

0800154a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>:
      _M_set_length(size_type __n)
 800154a:	b580      	push	{r7, lr}
 800154c:	b084      	sub	sp, #16
 800154e:	af00      	add	r7, sp, #0
 8001550:	6078      	str	r0, [r7, #4]
 8001552:	6039      	str	r1, [r7, #0]
	_M_length(__n);
 8001554:	6839      	ldr	r1, [r7, #0]
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	f7ff ffe9 	bl	800152e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_lengthEj>
	traits_type::assign(_M_data()[__n], _CharT());
 800155c:	6878      	ldr	r0, [r7, #4]
 800155e:	f7ff f94e 	bl	80007fe <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 8001562:	4602      	mov	r2, r0
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	4413      	add	r3, r2
 8001568:	2200      	movs	r2, #0
 800156a:	73fa      	strb	r2, [r7, #15]
 800156c:	f107 020f 	add.w	r2, r7, #15
 8001570:	4611      	mov	r1, r2
 8001572:	4618      	mov	r0, r3
 8001574:	f7ff f9ce 	bl	8000914 <_ZNSt11char_traitsIcE6assignERcRKc>
      }
 8001578:	bf00      	nop
 800157a:	3710      	adds	r7, #16
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}

08001580 <_ZSt8distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_>:
  */
  template<typename _InputIterator>
    _GLIBCXX_NODISCARD
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 8001580:	b5b0      	push	{r4, r5, r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 800158a:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 800158c:	1d3b      	adds	r3, r7, #4
 800158e:	4618      	mov	r0, r3
 8001590:	f000 f88b 	bl	80016aa <_ZSt19__iterator_categoryIPKcENSt15iterator_traitsIT_E17iterator_categoryERKS3_>
      return std::__distance(__first, __last,
 8001594:	462a      	mov	r2, r5
 8001596:	6839      	ldr	r1, [r7, #0]
 8001598:	4620      	mov	r0, r4
 800159a:	f000 f890 	bl	80016be <_ZSt10__distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>
 800159e:	4603      	mov	r3, r0
    }
 80015a0:	4618      	mov	r0, r3
 80015a2:	3708      	adds	r7, #8
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bdb0      	pop	{r4, r5, r7, pc}

080015a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
    basic_string<_CharT, _Traits, _Alloc>::
 80015a8:	b590      	push	{r4, r7, lr}
 80015aa:	b085      	sub	sp, #20
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	60f8      	str	r0, [r7, #12]
 80015b0:	60b9      	str	r1, [r7, #8]
 80015b2:	607a      	str	r2, [r7, #4]
      if (__capacity > max_size())
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	681c      	ldr	r4, [r3, #0]
 80015b8:	68f8      	ldr	r0, [r7, #12]
 80015ba:	f000 f88f 	bl	80016dc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8max_sizeEv>
 80015be:	4603      	mov	r3, r0
 80015c0:	429c      	cmp	r4, r3
 80015c2:	bf8c      	ite	hi
 80015c4:	2301      	movhi	r3, #1
 80015c6:	2300      	movls	r3, #0
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d002      	beq.n	80015d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
	std::__throw_length_error(__N("basic_string::_M_create"));
 80015ce:	481a      	ldr	r0, [pc, #104]	@ (8001638 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x90>)
 80015d0:	f003 f8b5 	bl	800473e <_ZSt20__throw_length_errorPKc>
      if (__capacity > __old_capacity && __capacity < 2 * __old_capacity)
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	687a      	ldr	r2, [r7, #4]
 80015da:	429a      	cmp	r2, r3
 80015dc:	d21c      	bcs.n	8001618 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x70>
 80015de:	68bb      	ldr	r3, [r7, #8]
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	005b      	lsls	r3, r3, #1
 80015e6:	429a      	cmp	r2, r3
 80015e8:	d216      	bcs.n	8001618 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x70>
	  __capacity = 2 * __old_capacity;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	005a      	lsls	r2, r3, #1
 80015ee:	68bb      	ldr	r3, [r7, #8]
 80015f0:	601a      	str	r2, [r3, #0]
	  if (__capacity > max_size())
 80015f2:	68bb      	ldr	r3, [r7, #8]
 80015f4:	681c      	ldr	r4, [r3, #0]
 80015f6:	68f8      	ldr	r0, [r7, #12]
 80015f8:	f000 f870 	bl	80016dc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8max_sizeEv>
 80015fc:	4603      	mov	r3, r0
 80015fe:	429c      	cmp	r4, r3
 8001600:	bf8c      	ite	hi
 8001602:	2301      	movhi	r3, #1
 8001604:	2300      	movls	r3, #0
 8001606:	b2db      	uxtb	r3, r3
 8001608:	2b00      	cmp	r3, #0
 800160a:	d005      	beq.n	8001618 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x70>
	    __capacity = max_size();
 800160c:	68f8      	ldr	r0, [r7, #12]
 800160e:	f000 f865 	bl	80016dc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8max_sizeEv>
 8001612:	4602      	mov	r2, r0
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	601a      	str	r2, [r3, #0]
      return _Alloc_traits::allocate(_M_get_allocator(), __capacity + 1);
 8001618:	68f8      	ldr	r0, [r7, #12]
 800161a:	f7ff ff44 	bl	80014a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_get_allocatorEv>
 800161e:	4602      	mov	r2, r0
 8001620:	68bb      	ldr	r3, [r7, #8]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	3301      	adds	r3, #1
 8001626:	4619      	mov	r1, r3
 8001628:	4610      	mov	r0, r2
 800162a:	f000 f869 	bl	8001700 <_ZNSt16allocator_traitsISaIcEE8allocateERS0_j>
 800162e:	4603      	mov	r3, r0
    }
 8001630:	4618      	mov	r0, r3
 8001632:	3714      	adds	r7, #20
 8001634:	46bd      	mov	sp, r7
 8001636:	bd90      	pop	{r4, r7, pc}
 8001638:	08004b04 	.word	0x08004b04

0800163c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
      _S_copy_chars(_CharT* __p, const _CharT* __k1, const _CharT* __k2)
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af00      	add	r7, sp, #0
 8001642:	60f8      	str	r0, [r7, #12]
 8001644:	60b9      	str	r1, [r7, #8]
 8001646:	607a      	str	r2, [r7, #4]
      { _S_copy(__p, __k1, __k2 - __k1); }
 8001648:	687a      	ldr	r2, [r7, #4]
 800164a:	68bb      	ldr	r3, [r7, #8]
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	461a      	mov	r2, r3
 8001650:	68b9      	ldr	r1, [r7, #8]
 8001652:	68f8      	ldr	r0, [r7, #12]
 8001654:	f000 f87f 	bl	8001756 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8001658:	bf00      	nop
 800165a:	3710      	adds	r7, #16
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}

08001660 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_destroyEj>:
      _M_destroy(size_type __size) throw()
 8001660:	b590      	push	{r4, r7, lr}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
 8001668:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	f7ff ff1b 	bl	80014a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_get_allocatorEv>
 8001670:	4604      	mov	r4, r0
 8001672:	6878      	ldr	r0, [r7, #4]
 8001674:	f7ff f8c3 	bl	80007fe <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 8001678:	4601      	mov	r1, r0
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	3301      	adds	r3, #1
 800167e:	461a      	mov	r2, r3
 8001680:	4620      	mov	r0, r4
 8001682:	f000 f87f 	bl	8001784 <_ZNSt16allocator_traitsISaIcEE10deallocateERS0_Pcj>
 8001686:	bf00      	nop
 8001688:	370c      	adds	r7, #12
 800168a:	46bd      	mov	sp, r7
 800168c:	bd90      	pop	{r4, r7, pc}

0800168e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>:
      _M_local_data() const
 800168e:	b580      	push	{r7, lr}
 8001690:	b082      	sub	sp, #8
 8001692:	af00      	add	r7, sp, #0
 8001694:	6078      	str	r0, [r7, #4]
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	3308      	adds	r3, #8
 800169a:	4618      	mov	r0, r3
 800169c:	f000 f891 	bl	80017c2 <_ZNSt19__ptr_traits_ptr_toIPKcS0_Lb0EE10pointer_toERS0_>
 80016a0:	4603      	mov	r3, r0
      }
 80016a2:	4618      	mov	r0, r3
 80016a4:	3708      	adds	r7, #8
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}

080016aa <_ZSt19__iterator_categoryIPKcENSt15iterator_traitsIT_E17iterator_categoryERKS3_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 80016aa:	b480      	push	{r7}
 80016ac:	b083      	sub	sp, #12
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 80016b2:	4618      	mov	r0, r3
 80016b4:	370c      	adds	r7, #12
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr

080016be <_ZSt10__distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 80016be:	b480      	push	{r7}
 80016c0:	b085      	sub	sp, #20
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	60f8      	str	r0, [r7, #12]
 80016c6:	60b9      	str	r1, [r7, #8]
 80016c8:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 80016ca:	68ba      	ldr	r2, [r7, #8]
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	1ad3      	subs	r3, r2, r3
    }
 80016d0:	4618      	mov	r0, r3
 80016d2:	3714      	adds	r7, #20
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr

080016dc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
      { return (_Alloc_traits::max_size(_M_get_allocator()) - 1) / 2; }
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	f000 f878 	bl	80017da <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_get_allocatorEv>
 80016ea:	4603      	mov	r3, r0
 80016ec:	4618      	mov	r0, r3
 80016ee:	f000 f87f 	bl	80017f0 <_ZNSt16allocator_traitsISaIcEE8max_sizeERKS0_>
 80016f2:	4603      	mov	r3, r0
 80016f4:	3b01      	subs	r3, #1
 80016f6:	085b      	lsrs	r3, r3, #1
 80016f8:	4618      	mov	r0, r3
 80016fa:	3708      	adds	r7, #8
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}

08001700 <_ZNSt16allocator_traitsISaIcEE8allocateERS0_j>:
       *  @param  __n  The number of objects to allocate space for.
       *
       *  Calls @c a.allocate(n)
      */
      _GLIBCXX_NODISCARD static _GLIBCXX20_CONSTEXPR pointer
      allocate(allocator_type& __a, size_type __n)
 8001700:	b580      	push	{r7, lr}
 8001702:	b084      	sub	sp, #16
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	6039      	str	r1, [r7, #0]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	60fb      	str	r3, [r7, #12]
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	60bb      	str	r3, [r7, #8]
#if __cplusplus > 201703L
      [[nodiscard,__gnu__::__always_inline__]]
      constexpr _Tp*
      allocate(size_t __n)
      {
	if (std::__is_constant_evaluated())
 8001712:	f7fe fed9 	bl	80004c8 <_ZSt23__is_constant_evaluatedv>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d010      	beq.n	800173e <_ZNSt16allocator_traitsISaIcEE8allocateERS0_j+0x3e>
	  {
	    if (__builtin_mul_overflow(__n, sizeof(_Tp), &__n))
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	2200      	movs	r2, #0
 8001720:	60bb      	str	r3, [r7, #8]
 8001722:	4613      	mov	r3, r2
 8001724:	f003 0301 	and.w	r3, r3, #1
 8001728:	b2db      	uxtb	r3, r3
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <_ZNSt16allocator_traitsISaIcEE8allocateERS0_j+0x32>
	      std::__throw_bad_array_new_length();
 800172e:	f003 f800 	bl	8004732 <_ZSt28__throw_bad_array_new_lengthv>
	    return static_cast<_Tp*>(::operator new(__n));
 8001732:	68bb      	ldr	r3, [r7, #8]
 8001734:	4618      	mov	r0, r3
 8001736:	f002 ffe5 	bl	8004704 <_Znwj>
 800173a:	4603      	mov	r3, r0
 800173c:	e007      	b.n	800174e <_ZNSt16allocator_traitsISaIcEE8allocateERS0_j+0x4e>
	  }

	return __allocator_base<_Tp>::allocate(__n, 0);
 800173e:	68bb      	ldr	r3, [r7, #8]
 8001740:	2200      	movs	r2, #0
 8001742:	4619      	mov	r1, r3
 8001744:	68f8      	ldr	r0, [r7, #12]
 8001746:	f000 f86b 	bl	8001820 <_ZNSt15__new_allocatorIcE8allocateEjPKv>
 800174a:	4603      	mov	r3, r0
 800174c:	bf00      	nop
      { return __a.allocate(__n); }
 800174e:	4618      	mov	r0, r3
 8001750:	3710      	adds	r7, #16
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}

08001756 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
      _S_copy(_CharT* __d, const _CharT* __s, size_type __n)
 8001756:	b580      	push	{r7, lr}
 8001758:	b084      	sub	sp, #16
 800175a:	af00      	add	r7, sp, #0
 800175c:	60f8      	str	r0, [r7, #12]
 800175e:	60b9      	str	r1, [r7, #8]
 8001760:	607a      	str	r2, [r7, #4]
	if (__n == 1)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2b01      	cmp	r3, #1
 8001766:	d104      	bne.n	8001772 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x1c>
	  traits_type::assign(*__d, *__s);
 8001768:	68b9      	ldr	r1, [r7, #8]
 800176a:	68f8      	ldr	r0, [r7, #12]
 800176c:	f7ff f8d2 	bl	8000914 <_ZNSt11char_traitsIcE6assignERcRKc>
      }
 8001770:	e004      	b.n	800177c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x26>
	  traits_type::copy(__d, __s, __n);
 8001772:	687a      	ldr	r2, [r7, #4]
 8001774:	68b9      	ldr	r1, [r7, #8]
 8001776:	68f8      	ldr	r0, [r7, #12]
 8001778:	f7ff f8fa 	bl	8000970 <_ZNSt11char_traitsIcE4copyEPcPKcj>
      }
 800177c:	bf00      	nop
 800177e:	3710      	adds	r7, #16
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}

08001784 <_ZNSt16allocator_traitsISaIcEE10deallocateERS0_Pcj>:
       *  @param  __n  The number of objects space was allocated for.
       *
       *  Calls <tt> a.deallocate(p, n) </tt>
      */
      static _GLIBCXX20_CONSTEXPR void
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8001784:	b580      	push	{r7, lr}
 8001786:	b088      	sub	sp, #32
 8001788:	af00      	add	r7, sp, #0
 800178a:	60f8      	str	r0, [r7, #12]
 800178c:	60b9      	str	r1, [r7, #8]
 800178e:	607a      	str	r2, [r7, #4]
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	61fb      	str	r3, [r7, #28]
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	61bb      	str	r3, [r7, #24]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	617b      	str	r3, [r7, #20]

      [[__gnu__::__always_inline__]]
      constexpr void
      deallocate(_Tp* __p, size_t __n)
      {
	if (std::__is_constant_evaluated())
 800179c:	f7fe fe94 	bl	80004c8 <_ZSt23__is_constant_evaluatedv>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d003      	beq.n	80017ae <_ZNSt16allocator_traitsISaIcEE10deallocateERS0_Pcj+0x2a>
	  {
	    ::operator delete(__p);
 80017a6:	69b8      	ldr	r0, [r7, #24]
 80017a8:	f002 ffa8 	bl	80046fc <_ZdlPv>
	    return;
 80017ac:	e005      	b.n	80017ba <_ZNSt16allocator_traitsISaIcEE10deallocateERS0_Pcj+0x36>
	  }
	__allocator_base<_Tp>::deallocate(__p, __n);
 80017ae:	697a      	ldr	r2, [r7, #20]
 80017b0:	69b9      	ldr	r1, [r7, #24]
 80017b2:	69f8      	ldr	r0, [r7, #28]
 80017b4:	f000 f856 	bl	8001864 <_ZNSt15__new_allocatorIcE10deallocateEPcj>
      { __a.deallocate(__p, __n); }
 80017b8:	bf00      	nop
 80017ba:	bf00      	nop
 80017bc:	3720      	adds	r7, #32
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}

080017c2 <_ZNSt19__ptr_traits_ptr_toIPKcS0_Lb0EE10pointer_toERS0_>:
      pointer_to(element_type& __r) noexcept
 80017c2:	b580      	push	{r7, lr}
 80017c4:	b082      	sub	sp, #8
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	6078      	str	r0, [r7, #4]
      { return std::addressof(__r); }
 80017ca:	6878      	ldr	r0, [r7, #4]
 80017cc:	f000 f81c 	bl	8001808 <_ZSt9addressofIKcEPT_RS1_>
 80017d0:	4603      	mov	r3, r0
 80017d2:	4618      	mov	r0, r3
 80017d4:	3708      	adds	r7, #8
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}

080017da <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE16_M_get_allocatorEv>:
      _M_get_allocator() const
 80017da:	b480      	push	{r7}
 80017dc:	b083      	sub	sp, #12
 80017de:	af00      	add	r7, sp, #0
 80017e0:	6078      	str	r0, [r7, #4]
      { return _M_dataplus; }
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	4618      	mov	r0, r3
 80017e6:	370c      	adds	r7, #12
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr

080017f0 <_ZNSt16allocator_traitsISaIcEE8max_sizeERKS0_>:
       *  @brief  The maximum supported allocation size
       *  @param  __a  An allocator.
       *  @return @c __a.max_size()
      */
      static _GLIBCXX20_CONSTEXPR size_type
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
      {
#if __cplusplus <= 201703L
	return __a.max_size();
#else
	return size_t(-1) / sizeof(value_type);
 80017f8:	f04f 33ff 	mov.w	r3, #4294967295
#endif
      }
 80017fc:	4618      	mov	r0, r3
 80017fe:	370c      	adds	r7, #12
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr

08001808 <_ZSt9addressofIKcEPT_RS1_>:
    addressof(_Tp& __r) noexcept
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
    { return std::__addressof(__r); }
 8001810:	6878      	ldr	r0, [r7, #4]
 8001812:	f000 f834 	bl	800187e <_ZSt11__addressofIKcEPT_RS1_>
 8001816:	4603      	mov	r3, r0
 8001818:	4618      	mov	r0, r3
 800181a:	3708      	adds	r7, #8
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}

08001820 <_ZNSt15__new_allocatorIcE8allocateEjPKv>:
#endif

      // NB: __n is permitted to be 0.  The C++ standard says nothing
      // about what the return value is when __n == 0.
      _GLIBCXX_NODISCARD _Tp*
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8001820:	b580      	push	{r7, lr}
 8001822:	b084      	sub	sp, #16
 8001824:	af00      	add	r7, sp, #0
 8001826:	60f8      	str	r0, [r7, #12]
 8001828:	60b9      	str	r1, [r7, #8]
 800182a:	607a      	str	r2, [r7, #4]
	// _GLIBCXX_RESOLVE_LIB_DEFECTS
	// 3308. std::allocator<void>().allocate(n)
	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
#endif

	if (__builtin_expect(__n > this->_M_max_size(), false))
 800182c:	68f8      	ldr	r0, [r7, #12]
 800182e:	f000 f831 	bl	8001894 <_ZNKSt15__new_allocatorIcE11_M_max_sizeEv>
 8001832:	4602      	mov	r2, r0
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	4293      	cmp	r3, r2
 8001838:	bf8c      	ite	hi
 800183a:	2301      	movhi	r3, #1
 800183c:	2300      	movls	r3, #0
 800183e:	b2db      	uxtb	r3, r3
 8001840:	2b00      	cmp	r3, #0
 8001842:	bf14      	ite	ne
 8001844:	2301      	movne	r3, #1
 8001846:	2300      	moveq	r3, #0
 8001848:	b2db      	uxtb	r3, r3
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <_ZNSt15__new_allocatorIcE8allocateEjPKv+0x32>
	  {
	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
	    // 3190. allocator::allocate sometimes returns too little storage
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
	      std::__throw_bad_array_new_length();
	    std::__throw_bad_alloc();
 800184e:	f002 ff6d 	bl	800472c <_ZSt17__throw_bad_allocv>
	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
							   __al));
	  }
#endif
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8001852:	68b8      	ldr	r0, [r7, #8]
 8001854:	f002 ff56 	bl	8004704 <_Znwj>
 8001858:	4603      	mov	r3, r0
 800185a:	bf00      	nop
      }
 800185c:	4618      	mov	r0, r3
 800185e:	3710      	adds	r7, #16
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}

08001864 <_ZNSt15__new_allocatorIcE10deallocateEPcj>:

      // __p is not permitted to be a null pointer.
      void
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 8001864:	b580      	push	{r7, lr}
 8001866:	b084      	sub	sp, #16
 8001868:	af00      	add	r7, sp, #0
 800186a:	60f8      	str	r0, [r7, #12]
 800186c:	60b9      	str	r1, [r7, #8]
 800186e:	607a      	str	r2, [r7, #4]
	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
				     std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8001870:	6879      	ldr	r1, [r7, #4]
 8001872:	68b8      	ldr	r0, [r7, #8]
 8001874:	f002 ff44 	bl	8004700 <_ZdlPvj>
      }
 8001878:	3710      	adds	r7, #16
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}

0800187e <_ZSt11__addressofIKcEPT_RS1_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800187e:	b480      	push	{r7}
 8001880:	b083      	sub	sp, #12
 8001882:	af00      	add	r7, sp, #0
 8001884:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4618      	mov	r0, r3
 800188a:	370c      	adds	r7, #12
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr

08001894 <_ZNKSt15__new_allocatorIcE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8001894:	b480      	push	{r7}
 8001896:	b083      	sub	sp, #12
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800189c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 80018a0:	4618      	mov	r0, r3
 80018a2:	370c      	adds	r7, #12
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr

080018ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018b2:	2300      	movs	r3, #0
 80018b4:	607b      	str	r3, [r7, #4]
 80018b6:	4b10      	ldr	r3, [pc, #64]	@ (80018f8 <HAL_MspInit+0x4c>)
 80018b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018ba:	4a0f      	ldr	r2, [pc, #60]	@ (80018f8 <HAL_MspInit+0x4c>)
 80018bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80018c2:	4b0d      	ldr	r3, [pc, #52]	@ (80018f8 <HAL_MspInit+0x4c>)
 80018c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018ca:	607b      	str	r3, [r7, #4]
 80018cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018ce:	2300      	movs	r3, #0
 80018d0:	603b      	str	r3, [r7, #0]
 80018d2:	4b09      	ldr	r3, [pc, #36]	@ (80018f8 <HAL_MspInit+0x4c>)
 80018d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018d6:	4a08      	ldr	r2, [pc, #32]	@ (80018f8 <HAL_MspInit+0x4c>)
 80018d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80018de:	4b06      	ldr	r3, [pc, #24]	@ (80018f8 <HAL_MspInit+0x4c>)
 80018e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018e6:	603b      	str	r3, [r7, #0]
 80018e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018ea:	bf00      	nop
 80018ec:	370c      	adds	r7, #12
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop
 80018f8:	40023800 	.word	0x40023800

080018fc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b08a      	sub	sp, #40	@ 0x28
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001904:	f107 0314 	add.w	r3, r7, #20
 8001908:	2200      	movs	r2, #0
 800190a:	601a      	str	r2, [r3, #0]
 800190c:	605a      	str	r2, [r3, #4]
 800190e:	609a      	str	r2, [r3, #8]
 8001910:	60da      	str	r2, [r3, #12]
 8001912:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a19      	ldr	r2, [pc, #100]	@ (8001980 <HAL_CAN_MspInit+0x84>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d12b      	bne.n	8001976 <HAL_CAN_MspInit+0x7a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800191e:	2300      	movs	r3, #0
 8001920:	613b      	str	r3, [r7, #16]
 8001922:	4b18      	ldr	r3, [pc, #96]	@ (8001984 <HAL_CAN_MspInit+0x88>)
 8001924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001926:	4a17      	ldr	r2, [pc, #92]	@ (8001984 <HAL_CAN_MspInit+0x88>)
 8001928:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800192c:	6413      	str	r3, [r2, #64]	@ 0x40
 800192e:	4b15      	ldr	r3, [pc, #84]	@ (8001984 <HAL_CAN_MspInit+0x88>)
 8001930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001932:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001936:	613b      	str	r3, [r7, #16]
 8001938:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800193a:	2300      	movs	r3, #0
 800193c:	60fb      	str	r3, [r7, #12]
 800193e:	4b11      	ldr	r3, [pc, #68]	@ (8001984 <HAL_CAN_MspInit+0x88>)
 8001940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001942:	4a10      	ldr	r2, [pc, #64]	@ (8001984 <HAL_CAN_MspInit+0x88>)
 8001944:	f043 0308 	orr.w	r3, r3, #8
 8001948:	6313      	str	r3, [r2, #48]	@ 0x30
 800194a:	4b0e      	ldr	r3, [pc, #56]	@ (8001984 <HAL_CAN_MspInit+0x88>)
 800194c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800194e:	f003 0308 	and.w	r3, r3, #8
 8001952:	60fb      	str	r3, [r7, #12]
 8001954:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001956:	2303      	movs	r3, #3
 8001958:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800195a:	2302      	movs	r3, #2
 800195c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195e:	2300      	movs	r3, #0
 8001960:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001962:	2303      	movs	r3, #3
 8001964:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001966:	2309      	movs	r3, #9
 8001968:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800196a:	f107 0314 	add.w	r3, r7, #20
 800196e:	4619      	mov	r1, r3
 8001970:	4805      	ldr	r0, [pc, #20]	@ (8001988 <HAL_CAN_MspInit+0x8c>)
 8001972:	f001 f90f 	bl	8002b94 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001976:	bf00      	nop
 8001978:	3728      	adds	r7, #40	@ 0x28
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	40006400 	.word	0x40006400
 8001984:	40023800 	.word	0x40023800
 8001988:	40020c00 	.word	0x40020c00

0800198c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b08e      	sub	sp, #56	@ 0x38
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001994:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001998:	2200      	movs	r2, #0
 800199a:	601a      	str	r2, [r3, #0]
 800199c:	605a      	str	r2, [r3, #4]
 800199e:	609a      	str	r2, [r3, #8]
 80019a0:	60da      	str	r2, [r3, #12]
 80019a2:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a46      	ldr	r2, [pc, #280]	@ (8001ac4 <HAL_ETH_MspInit+0x138>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	f040 8085 	bne.w	8001aba <HAL_ETH_MspInit+0x12e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80019b0:	2300      	movs	r3, #0
 80019b2:	623b      	str	r3, [r7, #32]
 80019b4:	4b44      	ldr	r3, [pc, #272]	@ (8001ac8 <HAL_ETH_MspInit+0x13c>)
 80019b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019b8:	4a43      	ldr	r2, [pc, #268]	@ (8001ac8 <HAL_ETH_MspInit+0x13c>)
 80019ba:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80019be:	6313      	str	r3, [r2, #48]	@ 0x30
 80019c0:	4b41      	ldr	r3, [pc, #260]	@ (8001ac8 <HAL_ETH_MspInit+0x13c>)
 80019c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019c8:	623b      	str	r3, [r7, #32]
 80019ca:	6a3b      	ldr	r3, [r7, #32]
 80019cc:	2300      	movs	r3, #0
 80019ce:	61fb      	str	r3, [r7, #28]
 80019d0:	4b3d      	ldr	r3, [pc, #244]	@ (8001ac8 <HAL_ETH_MspInit+0x13c>)
 80019d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019d4:	4a3c      	ldr	r2, [pc, #240]	@ (8001ac8 <HAL_ETH_MspInit+0x13c>)
 80019d6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80019da:	6313      	str	r3, [r2, #48]	@ 0x30
 80019dc:	4b3a      	ldr	r3, [pc, #232]	@ (8001ac8 <HAL_ETH_MspInit+0x13c>)
 80019de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019e0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80019e4:	61fb      	str	r3, [r7, #28]
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	2300      	movs	r3, #0
 80019ea:	61bb      	str	r3, [r7, #24]
 80019ec:	4b36      	ldr	r3, [pc, #216]	@ (8001ac8 <HAL_ETH_MspInit+0x13c>)
 80019ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019f0:	4a35      	ldr	r2, [pc, #212]	@ (8001ac8 <HAL_ETH_MspInit+0x13c>)
 80019f2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80019f6:	6313      	str	r3, [r2, #48]	@ 0x30
 80019f8:	4b33      	ldr	r3, [pc, #204]	@ (8001ac8 <HAL_ETH_MspInit+0x13c>)
 80019fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001a00:	61bb      	str	r3, [r7, #24]
 8001a02:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a04:	2300      	movs	r3, #0
 8001a06:	617b      	str	r3, [r7, #20]
 8001a08:	4b2f      	ldr	r3, [pc, #188]	@ (8001ac8 <HAL_ETH_MspInit+0x13c>)
 8001a0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a0c:	4a2e      	ldr	r2, [pc, #184]	@ (8001ac8 <HAL_ETH_MspInit+0x13c>)
 8001a0e:	f043 0304 	orr.w	r3, r3, #4
 8001a12:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a14:	4b2c      	ldr	r3, [pc, #176]	@ (8001ac8 <HAL_ETH_MspInit+0x13c>)
 8001a16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a18:	f003 0304 	and.w	r3, r3, #4
 8001a1c:	617b      	str	r3, [r7, #20]
 8001a1e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a20:	2300      	movs	r3, #0
 8001a22:	613b      	str	r3, [r7, #16]
 8001a24:	4b28      	ldr	r3, [pc, #160]	@ (8001ac8 <HAL_ETH_MspInit+0x13c>)
 8001a26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a28:	4a27      	ldr	r2, [pc, #156]	@ (8001ac8 <HAL_ETH_MspInit+0x13c>)
 8001a2a:	f043 0301 	orr.w	r3, r3, #1
 8001a2e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a30:	4b25      	ldr	r3, [pc, #148]	@ (8001ac8 <HAL_ETH_MspInit+0x13c>)
 8001a32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a34:	f003 0301 	and.w	r3, r3, #1
 8001a38:	613b      	str	r3, [r7, #16]
 8001a3a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	60fb      	str	r3, [r7, #12]
 8001a40:	4b21      	ldr	r3, [pc, #132]	@ (8001ac8 <HAL_ETH_MspInit+0x13c>)
 8001a42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a44:	4a20      	ldr	r2, [pc, #128]	@ (8001ac8 <HAL_ETH_MspInit+0x13c>)
 8001a46:	f043 0302 	orr.w	r3, r3, #2
 8001a4a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a4c:	4b1e      	ldr	r3, [pc, #120]	@ (8001ac8 <HAL_ETH_MspInit+0x13c>)
 8001a4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a50:	f003 0302 	and.w	r3, r3, #2
 8001a54:	60fb      	str	r3, [r7, #12]
 8001a56:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001a58:	2332      	movs	r3, #50	@ 0x32
 8001a5a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a5c:	2302      	movs	r3, #2
 8001a5e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a60:	2300      	movs	r3, #0
 8001a62:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a64:	2303      	movs	r3, #3
 8001a66:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001a68:	230b      	movs	r3, #11
 8001a6a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a6c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a70:	4619      	mov	r1, r3
 8001a72:	4816      	ldr	r0, [pc, #88]	@ (8001acc <HAL_ETH_MspInit+0x140>)
 8001a74:	f001 f88e 	bl	8002b94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8001a78:	2386      	movs	r3, #134	@ 0x86
 8001a7a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a7c:	2302      	movs	r3, #2
 8001a7e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a80:	2300      	movs	r3, #0
 8001a82:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a84:	2303      	movs	r3, #3
 8001a86:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001a88:	230b      	movs	r3, #11
 8001a8a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a8c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a90:	4619      	mov	r1, r3
 8001a92:	480f      	ldr	r0, [pc, #60]	@ (8001ad0 <HAL_ETH_MspInit+0x144>)
 8001a94:	f001 f87e 	bl	8002b94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8001a98:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8001a9c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a9e:	2302      	movs	r3, #2
 8001aa0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001aaa:	230b      	movs	r3, #11
 8001aac:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	4807      	ldr	r0, [pc, #28]	@ (8001ad4 <HAL_ETH_MspInit+0x148>)
 8001ab6:	f001 f86d 	bl	8002b94 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001aba:	bf00      	nop
 8001abc:	3738      	adds	r7, #56	@ 0x38
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	40028000 	.word	0x40028000
 8001ac8:	40023800 	.word	0x40023800
 8001acc:	40020800 	.word	0x40020800
 8001ad0:	40020000 	.word	0x40020000
 8001ad4:	40020400 	.word	0x40020400

08001ad8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b08c      	sub	sp, #48	@ 0x30
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae0:	f107 031c 	add.w	r3, r7, #28
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	601a      	str	r2, [r3, #0]
 8001ae8:	605a      	str	r2, [r3, #4]
 8001aea:	609a      	str	r2, [r3, #8]
 8001aec:	60da      	str	r2, [r3, #12]
 8001aee:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a42      	ldr	r2, [pc, #264]	@ (8001c00 <HAL_I2C_MspInit+0x128>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d12c      	bne.n	8001b54 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001afa:	2300      	movs	r3, #0
 8001afc:	61bb      	str	r3, [r7, #24]
 8001afe:	4b41      	ldr	r3, [pc, #260]	@ (8001c04 <HAL_I2C_MspInit+0x12c>)
 8001b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b02:	4a40      	ldr	r2, [pc, #256]	@ (8001c04 <HAL_I2C_MspInit+0x12c>)
 8001b04:	f043 0302 	orr.w	r3, r3, #2
 8001b08:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b0a:	4b3e      	ldr	r3, [pc, #248]	@ (8001c04 <HAL_I2C_MspInit+0x12c>)
 8001b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b0e:	f003 0302 	and.w	r3, r3, #2
 8001b12:	61bb      	str	r3, [r7, #24]
 8001b14:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b16:	23c0      	movs	r3, #192	@ 0xc0
 8001b18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b1a:	2312      	movs	r3, #18
 8001b1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b22:	2303      	movs	r3, #3
 8001b24:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b26:	2304      	movs	r3, #4
 8001b28:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b2a:	f107 031c 	add.w	r3, r7, #28
 8001b2e:	4619      	mov	r1, r3
 8001b30:	4835      	ldr	r0, [pc, #212]	@ (8001c08 <HAL_I2C_MspInit+0x130>)
 8001b32:	f001 f82f 	bl	8002b94 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b36:	2300      	movs	r3, #0
 8001b38:	617b      	str	r3, [r7, #20]
 8001b3a:	4b32      	ldr	r3, [pc, #200]	@ (8001c04 <HAL_I2C_MspInit+0x12c>)
 8001b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b3e:	4a31      	ldr	r2, [pc, #196]	@ (8001c04 <HAL_I2C_MspInit+0x12c>)
 8001b40:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001b44:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b46:	4b2f      	ldr	r3, [pc, #188]	@ (8001c04 <HAL_I2C_MspInit+0x12c>)
 8001b48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b4a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b4e:	617b      	str	r3, [r7, #20]
 8001b50:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001b52:	e050      	b.n	8001bf6 <HAL_I2C_MspInit+0x11e>
  else if(hi2c->Instance==I2C3)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a2c      	ldr	r2, [pc, #176]	@ (8001c0c <HAL_I2C_MspInit+0x134>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d14b      	bne.n	8001bf6 <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b5e:	2300      	movs	r3, #0
 8001b60:	613b      	str	r3, [r7, #16]
 8001b62:	4b28      	ldr	r3, [pc, #160]	@ (8001c04 <HAL_I2C_MspInit+0x12c>)
 8001b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b66:	4a27      	ldr	r2, [pc, #156]	@ (8001c04 <HAL_I2C_MspInit+0x12c>)
 8001b68:	f043 0304 	orr.w	r3, r3, #4
 8001b6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b6e:	4b25      	ldr	r3, [pc, #148]	@ (8001c04 <HAL_I2C_MspInit+0x12c>)
 8001b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b72:	f003 0304 	and.w	r3, r3, #4
 8001b76:	613b      	str	r3, [r7, #16]
 8001b78:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	60fb      	str	r3, [r7, #12]
 8001b7e:	4b21      	ldr	r3, [pc, #132]	@ (8001c04 <HAL_I2C_MspInit+0x12c>)
 8001b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b82:	4a20      	ldr	r2, [pc, #128]	@ (8001c04 <HAL_I2C_MspInit+0x12c>)
 8001b84:	f043 0301 	orr.w	r3, r3, #1
 8001b88:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b8a:	4b1e      	ldr	r3, [pc, #120]	@ (8001c04 <HAL_I2C_MspInit+0x12c>)
 8001b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b8e:	f003 0301 	and.w	r3, r3, #1
 8001b92:	60fb      	str	r3, [r7, #12]
 8001b94:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001b96:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001b9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b9c:	2312      	movs	r3, #18
 8001b9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ba4:	2303      	movs	r3, #3
 8001ba6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001ba8:	2304      	movs	r3, #4
 8001baa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bac:	f107 031c 	add.w	r3, r7, #28
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	4817      	ldr	r0, [pc, #92]	@ (8001c10 <HAL_I2C_MspInit+0x138>)
 8001bb4:	f000 ffee 	bl	8002b94 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001bb8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001bbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bbe:	2312      	movs	r3, #18
 8001bc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001bca:	2304      	movs	r3, #4
 8001bcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bce:	f107 031c 	add.w	r3, r7, #28
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	480f      	ldr	r0, [pc, #60]	@ (8001c14 <HAL_I2C_MspInit+0x13c>)
 8001bd6:	f000 ffdd 	bl	8002b94 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001bda:	2300      	movs	r3, #0
 8001bdc:	60bb      	str	r3, [r7, #8]
 8001bde:	4b09      	ldr	r3, [pc, #36]	@ (8001c04 <HAL_I2C_MspInit+0x12c>)
 8001be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001be2:	4a08      	ldr	r2, [pc, #32]	@ (8001c04 <HAL_I2C_MspInit+0x12c>)
 8001be4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001be8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bea:	4b06      	ldr	r3, [pc, #24]	@ (8001c04 <HAL_I2C_MspInit+0x12c>)
 8001bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001bf2:	60bb      	str	r3, [r7, #8]
 8001bf4:	68bb      	ldr	r3, [r7, #8]
}
 8001bf6:	bf00      	nop
 8001bf8:	3730      	adds	r7, #48	@ 0x30
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	40005400 	.word	0x40005400
 8001c04:	40023800 	.word	0x40023800
 8001c08:	40020400 	.word	0x40020400
 8001c0c:	40005c00 	.word	0x40005c00
 8001c10:	40020800 	.word	0x40020800
 8001c14:	40020000 	.word	0x40020000

08001c18 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b08a      	sub	sp, #40	@ 0x28
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c20:	f107 0314 	add.w	r3, r7, #20
 8001c24:	2200      	movs	r2, #0
 8001c26:	601a      	str	r2, [r3, #0]
 8001c28:	605a      	str	r2, [r3, #4]
 8001c2a:	609a      	str	r2, [r3, #8]
 8001c2c:	60da      	str	r2, [r3, #12]
 8001c2e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a28      	ldr	r2, [pc, #160]	@ (8001cd8 <HAL_SPI_MspInit+0xc0>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d149      	bne.n	8001cce <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	613b      	str	r3, [r7, #16]
 8001c3e:	4b27      	ldr	r3, [pc, #156]	@ (8001cdc <HAL_SPI_MspInit+0xc4>)
 8001c40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c42:	4a26      	ldr	r2, [pc, #152]	@ (8001cdc <HAL_SPI_MspInit+0xc4>)
 8001c44:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001c48:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c4a:	4b24      	ldr	r3, [pc, #144]	@ (8001cdc <HAL_SPI_MspInit+0xc4>)
 8001c4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c4e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c52:	613b      	str	r3, [r7, #16]
 8001c54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c56:	2300      	movs	r3, #0
 8001c58:	60fb      	str	r3, [r7, #12]
 8001c5a:	4b20      	ldr	r3, [pc, #128]	@ (8001cdc <HAL_SPI_MspInit+0xc4>)
 8001c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c5e:	4a1f      	ldr	r2, [pc, #124]	@ (8001cdc <HAL_SPI_MspInit+0xc4>)
 8001c60:	f043 0301 	orr.w	r3, r3, #1
 8001c64:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c66:	4b1d      	ldr	r3, [pc, #116]	@ (8001cdc <HAL_SPI_MspInit+0xc4>)
 8001c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c6a:	f003 0301 	and.w	r3, r3, #1
 8001c6e:	60fb      	str	r3, [r7, #12]
 8001c70:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c72:	2300      	movs	r3, #0
 8001c74:	60bb      	str	r3, [r7, #8]
 8001c76:	4b19      	ldr	r3, [pc, #100]	@ (8001cdc <HAL_SPI_MspInit+0xc4>)
 8001c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c7a:	4a18      	ldr	r2, [pc, #96]	@ (8001cdc <HAL_SPI_MspInit+0xc4>)
 8001c7c:	f043 0302 	orr.w	r3, r3, #2
 8001c80:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c82:	4b16      	ldr	r3, [pc, #88]	@ (8001cdc <HAL_SPI_MspInit+0xc4>)
 8001c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c86:	f003 0302 	and.w	r3, r3, #2
 8001c8a:	60bb      	str	r3, [r7, #8]
 8001c8c:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001c8e:	2360      	movs	r3, #96	@ 0x60
 8001c90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c92:	2302      	movs	r3, #2
 8001c94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c96:	2300      	movs	r3, #0
 8001c98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001c9e:	2305      	movs	r3, #5
 8001ca0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ca2:	f107 0314 	add.w	r3, r7, #20
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	480d      	ldr	r0, [pc, #52]	@ (8001ce0 <HAL_SPI_MspInit+0xc8>)
 8001caa:	f000 ff73 	bl	8002b94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001cae:	2320      	movs	r3, #32
 8001cb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb2:	2302      	movs	r3, #2
 8001cb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001cbe:	2305      	movs	r3, #5
 8001cc0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cc2:	f107 0314 	add.w	r3, r7, #20
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	4806      	ldr	r0, [pc, #24]	@ (8001ce4 <HAL_SPI_MspInit+0xcc>)
 8001cca:	f000 ff63 	bl	8002b94 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001cce:	bf00      	nop
 8001cd0:	3728      	adds	r7, #40	@ 0x28
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	40013000 	.word	0x40013000
 8001cdc:	40023800 	.word	0x40023800
 8001ce0:	40020000 	.word	0x40020000
 8001ce4:	40020400 	.word	0x40020400

08001ce8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b090      	sub	sp, #64	@ 0x40
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cf0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	601a      	str	r2, [r3, #0]
 8001cf8:	605a      	str	r2, [r3, #4]
 8001cfa:	609a      	str	r2, [r3, #8]
 8001cfc:	60da      	str	r2, [r3, #12]
 8001cfe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a6a      	ldr	r2, [pc, #424]	@ (8001eb0 <HAL_UART_MspInit+0x1c8>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d12d      	bne.n	8001d66 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001d0e:	4b69      	ldr	r3, [pc, #420]	@ (8001eb4 <HAL_UART_MspInit+0x1cc>)
 8001d10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d12:	4a68      	ldr	r2, [pc, #416]	@ (8001eb4 <HAL_UART_MspInit+0x1cc>)
 8001d14:	f043 0310 	orr.w	r3, r3, #16
 8001d18:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d1a:	4b66      	ldr	r3, [pc, #408]	@ (8001eb4 <HAL_UART_MspInit+0x1cc>)
 8001d1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d1e:	f003 0310 	and.w	r3, r3, #16
 8001d22:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001d24:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d26:	2300      	movs	r3, #0
 8001d28:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d2a:	4b62      	ldr	r3, [pc, #392]	@ (8001eb4 <HAL_UART_MspInit+0x1cc>)
 8001d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d2e:	4a61      	ldr	r2, [pc, #388]	@ (8001eb4 <HAL_UART_MspInit+0x1cc>)
 8001d30:	f043 0301 	orr.w	r3, r3, #1
 8001d34:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d36:	4b5f      	ldr	r3, [pc, #380]	@ (8001eb4 <HAL_UART_MspInit+0x1cc>)
 8001d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d3a:	f003 0301 	and.w	r3, r3, #1
 8001d3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    PA11     ------> USART1_CTS
    PA12     ------> USART1_RTS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001d42:	f44f 53f0 	mov.w	r3, #7680	@ 0x1e00
 8001d46:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d48:	2302      	movs	r3, #2
 8001d4a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d50:	2303      	movs	r3, #3
 8001d52:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d54:	2307      	movs	r3, #7
 8001d56:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d58:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	4856      	ldr	r0, [pc, #344]	@ (8001eb8 <HAL_UART_MspInit+0x1d0>)
 8001d60:	f000 ff18 	bl	8002b94 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001d64:	e0a0      	b.n	8001ea8 <HAL_UART_MspInit+0x1c0>
  else if(huart->Instance==USART2)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a54      	ldr	r2, [pc, #336]	@ (8001ebc <HAL_UART_MspInit+0x1d4>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d14a      	bne.n	8001e06 <HAL_UART_MspInit+0x11e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d70:	2300      	movs	r3, #0
 8001d72:	623b      	str	r3, [r7, #32]
 8001d74:	4b4f      	ldr	r3, [pc, #316]	@ (8001eb4 <HAL_UART_MspInit+0x1cc>)
 8001d76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d78:	4a4e      	ldr	r2, [pc, #312]	@ (8001eb4 <HAL_UART_MspInit+0x1cc>)
 8001d7a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d7e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d80:	4b4c      	ldr	r3, [pc, #304]	@ (8001eb4 <HAL_UART_MspInit+0x1cc>)
 8001d82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d88:	623b      	str	r3, [r7, #32]
 8001d8a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	61fb      	str	r3, [r7, #28]
 8001d90:	4b48      	ldr	r3, [pc, #288]	@ (8001eb4 <HAL_UART_MspInit+0x1cc>)
 8001d92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d94:	4a47      	ldr	r2, [pc, #284]	@ (8001eb4 <HAL_UART_MspInit+0x1cc>)
 8001d96:	f043 0301 	orr.w	r3, r3, #1
 8001d9a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d9c:	4b45      	ldr	r3, [pc, #276]	@ (8001eb4 <HAL_UART_MspInit+0x1cc>)
 8001d9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001da0:	f003 0301 	and.w	r3, r3, #1
 8001da4:	61fb      	str	r3, [r7, #28]
 8001da6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001da8:	2300      	movs	r3, #0
 8001daa:	61bb      	str	r3, [r7, #24]
 8001dac:	4b41      	ldr	r3, [pc, #260]	@ (8001eb4 <HAL_UART_MspInit+0x1cc>)
 8001dae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001db0:	4a40      	ldr	r2, [pc, #256]	@ (8001eb4 <HAL_UART_MspInit+0x1cc>)
 8001db2:	f043 0308 	orr.w	r3, r3, #8
 8001db6:	6313      	str	r3, [r2, #48]	@ 0x30
 8001db8:	4b3e      	ldr	r3, [pc, #248]	@ (8001eb4 <HAL_UART_MspInit+0x1cc>)
 8001dba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dbc:	f003 0308 	and.w	r3, r3, #8
 8001dc0:	61bb      	str	r3, [r7, #24]
 8001dc2:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8001dc4:	2309      	movs	r3, #9
 8001dc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc8:	2302      	movs	r3, #2
 8001dca:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dd0:	2303      	movs	r3, #3
 8001dd2:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001dd4:	2307      	movs	r3, #7
 8001dd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dd8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ddc:	4619      	mov	r1, r3
 8001dde:	4836      	ldr	r0, [pc, #216]	@ (8001eb8 <HAL_UART_MspInit+0x1d0>)
 8001de0:	f000 fed8 	bl	8002b94 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001de4:	2330      	movs	r3, #48	@ 0x30
 8001de6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de8:	2302      	movs	r3, #2
 8001dea:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dec:	2300      	movs	r3, #0
 8001dee:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001df0:	2303      	movs	r3, #3
 8001df2:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001df4:	2307      	movs	r3, #7
 8001df6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001df8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	4830      	ldr	r0, [pc, #192]	@ (8001ec0 <HAL_UART_MspInit+0x1d8>)
 8001e00:	f000 fec8 	bl	8002b94 <HAL_GPIO_Init>
}
 8001e04:	e050      	b.n	8001ea8 <HAL_UART_MspInit+0x1c0>
  else if(huart->Instance==USART3)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a2e      	ldr	r2, [pc, #184]	@ (8001ec4 <HAL_UART_MspInit+0x1dc>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d14b      	bne.n	8001ea8 <HAL_UART_MspInit+0x1c0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001e10:	2300      	movs	r3, #0
 8001e12:	617b      	str	r3, [r7, #20]
 8001e14:	4b27      	ldr	r3, [pc, #156]	@ (8001eb4 <HAL_UART_MspInit+0x1cc>)
 8001e16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e18:	4a26      	ldr	r2, [pc, #152]	@ (8001eb4 <HAL_UART_MspInit+0x1cc>)
 8001e1a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e1e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e20:	4b24      	ldr	r3, [pc, #144]	@ (8001eb4 <HAL_UART_MspInit+0x1cc>)
 8001e22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e24:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001e28:	617b      	str	r3, [r7, #20]
 8001e2a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	613b      	str	r3, [r7, #16]
 8001e30:	4b20      	ldr	r3, [pc, #128]	@ (8001eb4 <HAL_UART_MspInit+0x1cc>)
 8001e32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e34:	4a1f      	ldr	r2, [pc, #124]	@ (8001eb4 <HAL_UART_MspInit+0x1cc>)
 8001e36:	f043 0302 	orr.w	r3, r3, #2
 8001e3a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e3c:	4b1d      	ldr	r3, [pc, #116]	@ (8001eb4 <HAL_UART_MspInit+0x1cc>)
 8001e3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e40:	f003 0302 	and.w	r3, r3, #2
 8001e44:	613b      	str	r3, [r7, #16]
 8001e46:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e48:	2300      	movs	r3, #0
 8001e4a:	60fb      	str	r3, [r7, #12]
 8001e4c:	4b19      	ldr	r3, [pc, #100]	@ (8001eb4 <HAL_UART_MspInit+0x1cc>)
 8001e4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e50:	4a18      	ldr	r2, [pc, #96]	@ (8001eb4 <HAL_UART_MspInit+0x1cc>)
 8001e52:	f043 0308 	orr.w	r3, r3, #8
 8001e56:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e58:	4b16      	ldr	r3, [pc, #88]	@ (8001eb4 <HAL_UART_MspInit+0x1cc>)
 8001e5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e5c:	f003 0308 	and.w	r3, r3, #8
 8001e60:	60fb      	str	r3, [r7, #12]
 8001e62:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14;
 8001e64:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8001e68:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e6a:	2302      	movs	r3, #2
 8001e6c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e72:	2303      	movs	r3, #3
 8001e74:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001e76:	2307      	movs	r3, #7
 8001e78:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e7a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001e7e:	4619      	mov	r1, r3
 8001e80:	4811      	ldr	r0, [pc, #68]	@ (8001ec8 <HAL_UART_MspInit+0x1e0>)
 8001e82:	f000 fe87 	bl	8002b94 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8001e86:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8001e8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e8c:	2302      	movs	r3, #2
 8001e8e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e90:	2300      	movs	r3, #0
 8001e92:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e94:	2303      	movs	r3, #3
 8001e96:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001e98:	2307      	movs	r3, #7
 8001e9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e9c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	4807      	ldr	r0, [pc, #28]	@ (8001ec0 <HAL_UART_MspInit+0x1d8>)
 8001ea4:	f000 fe76 	bl	8002b94 <HAL_GPIO_Init>
}
 8001ea8:	bf00      	nop
 8001eaa:	3740      	adds	r7, #64	@ 0x40
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	40011000 	.word	0x40011000
 8001eb4:	40023800 	.word	0x40023800
 8001eb8:	40020000 	.word	0x40020000
 8001ebc:	40004400 	.word	0x40004400
 8001ec0:	40020c00 	.word	0x40020c00
 8001ec4:	40004800 	.word	0x40004800
 8001ec8:	40020400 	.word	0x40020400

08001ecc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ed0:	bf00      	nop
 8001ed2:	e7fd      	b.n	8001ed0 <NMI_Handler+0x4>

08001ed4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ed8:	bf00      	nop
 8001eda:	e7fd      	b.n	8001ed8 <HardFault_Handler+0x4>

08001edc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ee0:	bf00      	nop
 8001ee2:	e7fd      	b.n	8001ee0 <MemManage_Handler+0x4>

08001ee4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ee8:	bf00      	nop
 8001eea:	e7fd      	b.n	8001ee8 <BusFault_Handler+0x4>

08001eec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ef0:	bf00      	nop
 8001ef2:	e7fd      	b.n	8001ef0 <UsageFault_Handler+0x4>

08001ef4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ef8:	bf00      	nop
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr

08001f02 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f02:	b480      	push	{r7}
 8001f04:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f06:	bf00      	nop
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr

08001f10 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f14:	bf00      	nop
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr

08001f1e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f1e:	b580      	push	{r7, lr}
 8001f20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f22:	f000 f8e9 	bl	80020f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f26:	bf00      	nop
 8001f28:	bd80      	pop	{r7, pc}

08001f2a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f2a:	b480      	push	{r7}
 8001f2c:	af00      	add	r7, sp, #0
  return 1;
 8001f2e:	2301      	movs	r3, #1
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr

08001f3a <_kill>:

int _kill(int pid, int sig)
{
 8001f3a:	b580      	push	{r7, lr}
 8001f3c:	b082      	sub	sp, #8
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	6078      	str	r0, [r7, #4]
 8001f42:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001f44:	f002 fd28 	bl	8004998 <__errno>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2216      	movs	r2, #22
 8001f4c:	601a      	str	r2, [r3, #0]
  return -1;
 8001f4e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3708      	adds	r7, #8
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}

08001f5a <_exit>:

void _exit (int status)
{
 8001f5a:	b580      	push	{r7, lr}
 8001f5c:	b082      	sub	sp, #8
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001f62:	f04f 31ff 	mov.w	r1, #4294967295
 8001f66:	6878      	ldr	r0, [r7, #4]
 8001f68:	f7ff ffe7 	bl	8001f3a <_kill>
  while (1) {}    /* Make sure we hang here */
 8001f6c:	bf00      	nop
 8001f6e:	e7fd      	b.n	8001f6c <_exit+0x12>

08001f70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b086      	sub	sp, #24
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f78:	4a14      	ldr	r2, [pc, #80]	@ (8001fcc <_sbrk+0x5c>)
 8001f7a:	4b15      	ldr	r3, [pc, #84]	@ (8001fd0 <_sbrk+0x60>)
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f84:	4b13      	ldr	r3, [pc, #76]	@ (8001fd4 <_sbrk+0x64>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d102      	bne.n	8001f92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f8c:	4b11      	ldr	r3, [pc, #68]	@ (8001fd4 <_sbrk+0x64>)
 8001f8e:	4a12      	ldr	r2, [pc, #72]	@ (8001fd8 <_sbrk+0x68>)
 8001f90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f92:	4b10      	ldr	r3, [pc, #64]	@ (8001fd4 <_sbrk+0x64>)
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4413      	add	r3, r2
 8001f9a:	693a      	ldr	r2, [r7, #16]
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d207      	bcs.n	8001fb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fa0:	f002 fcfa 	bl	8004998 <__errno>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	220c      	movs	r2, #12
 8001fa8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001faa:	f04f 33ff 	mov.w	r3, #4294967295
 8001fae:	e009      	b.n	8001fc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fb0:	4b08      	ldr	r3, [pc, #32]	@ (8001fd4 <_sbrk+0x64>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fb6:	4b07      	ldr	r3, [pc, #28]	@ (8001fd4 <_sbrk+0x64>)
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	4413      	add	r3, r2
 8001fbe:	4a05      	ldr	r2, [pc, #20]	@ (8001fd4 <_sbrk+0x64>)
 8001fc0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3718      	adds	r7, #24
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	20020000 	.word	0x20020000
 8001fd0:	00000400 	.word	0x00000400
 8001fd4:	2000049c 	.word	0x2000049c
 8001fd8:	200005f0 	.word	0x200005f0

08001fdc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001fe0:	4b06      	ldr	r3, [pc, #24]	@ (8001ffc <SystemInit+0x20>)
 8001fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fe6:	4a05      	ldr	r2, [pc, #20]	@ (8001ffc <SystemInit+0x20>)
 8001fe8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001fec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ff0:	bf00      	nop
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr
 8001ffa:	bf00      	nop
 8001ffc:	e000ed00 	.word	0xe000ed00

08002000 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002000:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002038 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002004:	480d      	ldr	r0, [pc, #52]	@ (800203c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002006:	490e      	ldr	r1, [pc, #56]	@ (8002040 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002008:	4a0e      	ldr	r2, [pc, #56]	@ (8002044 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800200a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800200c:	e002      	b.n	8002014 <LoopCopyDataInit>

0800200e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800200e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002010:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002012:	3304      	adds	r3, #4

08002014 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002014:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002016:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002018:	d3f9      	bcc.n	800200e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800201a:	4a0b      	ldr	r2, [pc, #44]	@ (8002048 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800201c:	4c0b      	ldr	r4, [pc, #44]	@ (800204c <LoopFillZerobss+0x26>)
  movs r3, #0
 800201e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002020:	e001      	b.n	8002026 <LoopFillZerobss>

08002022 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002022:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002024:	3204      	adds	r2, #4

08002026 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002026:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002028:	d3fb      	bcc.n	8002022 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800202a:	f7ff ffd7 	bl	8001fdc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800202e:	f002 fcb9 	bl	80049a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002032:	f7fe fd31 	bl	8000a98 <main>
  bx  lr    
 8002036:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002038:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800203c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002040:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8002044:	08004b44 	.word	0x08004b44
  ldr r2, =_sbss
 8002048:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800204c:	200005f0 	.word	0x200005f0

08002050 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002050:	e7fe      	b.n	8002050 <ADC_IRQHandler>
	...

08002054 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002058:	4b0e      	ldr	r3, [pc, #56]	@ (8002094 <HAL_Init+0x40>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a0d      	ldr	r2, [pc, #52]	@ (8002094 <HAL_Init+0x40>)
 800205e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002062:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002064:	4b0b      	ldr	r3, [pc, #44]	@ (8002094 <HAL_Init+0x40>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a0a      	ldr	r2, [pc, #40]	@ (8002094 <HAL_Init+0x40>)
 800206a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800206e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002070:	4b08      	ldr	r3, [pc, #32]	@ (8002094 <HAL_Init+0x40>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a07      	ldr	r2, [pc, #28]	@ (8002094 <HAL_Init+0x40>)
 8002076:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800207a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800207c:	2003      	movs	r0, #3
 800207e:	f000 fa2d 	bl	80024dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002082:	200f      	movs	r0, #15
 8002084:	f000 f808 	bl	8002098 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002088:	f7ff fc10 	bl	80018ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800208c:	2300      	movs	r3, #0
}
 800208e:	4618      	mov	r0, r3
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	40023c00 	.word	0x40023c00

08002098 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020a0:	4b12      	ldr	r3, [pc, #72]	@ (80020ec <HAL_InitTick+0x54>)
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	4b12      	ldr	r3, [pc, #72]	@ (80020f0 <HAL_InitTick+0x58>)
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	4619      	mov	r1, r3
 80020aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80020ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80020b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80020b6:	4618      	mov	r0, r3
 80020b8:	f000 fa37 	bl	800252a <HAL_SYSTICK_Config>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d001      	beq.n	80020c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e00e      	b.n	80020e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2b0f      	cmp	r3, #15
 80020ca:	d80a      	bhi.n	80020e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020cc:	2200      	movs	r2, #0
 80020ce:	6879      	ldr	r1, [r7, #4]
 80020d0:	f04f 30ff 	mov.w	r0, #4294967295
 80020d4:	f000 fa0d 	bl	80024f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020d8:	4a06      	ldr	r2, [pc, #24]	@ (80020f4 <HAL_InitTick+0x5c>)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020de:	2300      	movs	r3, #0
 80020e0:	e000      	b.n	80020e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	3708      	adds	r7, #8
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	20000000 	.word	0x20000000
 80020f0:	20000008 	.word	0x20000008
 80020f4:	20000004 	.word	0x20000004

080020f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020fc:	4b06      	ldr	r3, [pc, #24]	@ (8002118 <HAL_IncTick+0x20>)
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	461a      	mov	r2, r3
 8002102:	4b06      	ldr	r3, [pc, #24]	@ (800211c <HAL_IncTick+0x24>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4413      	add	r3, r2
 8002108:	4a04      	ldr	r2, [pc, #16]	@ (800211c <HAL_IncTick+0x24>)
 800210a:	6013      	str	r3, [r2, #0]
}
 800210c:	bf00      	nop
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr
 8002116:	bf00      	nop
 8002118:	20000008 	.word	0x20000008
 800211c:	200004a0 	.word	0x200004a0

08002120 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0
  return uwTick;
 8002124:	4b03      	ldr	r3, [pc, #12]	@ (8002134 <HAL_GetTick+0x14>)
 8002126:	681b      	ldr	r3, [r3, #0]
}
 8002128:	4618      	mov	r0, r3
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr
 8002132:	bf00      	nop
 8002134:	200004a0 	.word	0x200004a0

08002138 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b084      	sub	sp, #16
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002140:	f7ff ffee 	bl	8002120 <HAL_GetTick>
 8002144:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002150:	d005      	beq.n	800215e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002152:	4b0a      	ldr	r3, [pc, #40]	@ (800217c <HAL_Delay+0x44>)
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	461a      	mov	r2, r3
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	4413      	add	r3, r2
 800215c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800215e:	bf00      	nop
 8002160:	f7ff ffde 	bl	8002120 <HAL_GetTick>
 8002164:	4602      	mov	r2, r0
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	68fa      	ldr	r2, [r7, #12]
 800216c:	429a      	cmp	r2, r3
 800216e:	d8f7      	bhi.n	8002160 <HAL_Delay+0x28>
  {
  }
}
 8002170:	bf00      	nop
 8002172:	bf00      	nop
 8002174:	3710      	adds	r7, #16
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	20000008 	.word	0x20000008

08002180 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b084      	sub	sp, #16
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d101      	bne.n	8002192 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e0ed      	b.n	800236e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002198:	b2db      	uxtb	r3, r3
 800219a:	2b00      	cmp	r3, #0
 800219c:	d102      	bne.n	80021a4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f7ff fbac 	bl	80018fc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f042 0201 	orr.w	r2, r2, #1
 80021b2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80021b4:	f7ff ffb4 	bl	8002120 <HAL_GetTick>
 80021b8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80021ba:	e012      	b.n	80021e2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80021bc:	f7ff ffb0 	bl	8002120 <HAL_GetTick>
 80021c0:	4602      	mov	r2, r0
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	2b0a      	cmp	r3, #10
 80021c8:	d90b      	bls.n	80021e2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021ce:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2205      	movs	r2, #5
 80021da:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e0c5      	b.n	800236e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f003 0301 	and.w	r3, r3, #1
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d0e5      	beq.n	80021bc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f022 0202 	bic.w	r2, r2, #2
 80021fe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002200:	f7ff ff8e 	bl	8002120 <HAL_GetTick>
 8002204:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002206:	e012      	b.n	800222e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002208:	f7ff ff8a 	bl	8002120 <HAL_GetTick>
 800220c:	4602      	mov	r2, r0
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	2b0a      	cmp	r3, #10
 8002214:	d90b      	bls.n	800222e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800221a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2205      	movs	r2, #5
 8002226:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e09f      	b.n	800236e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f003 0302 	and.w	r3, r3, #2
 8002238:	2b00      	cmp	r3, #0
 800223a:	d1e5      	bne.n	8002208 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	7e1b      	ldrb	r3, [r3, #24]
 8002240:	2b01      	cmp	r3, #1
 8002242:	d108      	bne.n	8002256 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002252:	601a      	str	r2, [r3, #0]
 8002254:	e007      	b.n	8002266 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002264:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	7e5b      	ldrb	r3, [r3, #25]
 800226a:	2b01      	cmp	r3, #1
 800226c:	d108      	bne.n	8002280 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800227c:	601a      	str	r2, [r3, #0]
 800227e:	e007      	b.n	8002290 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800228e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	7e9b      	ldrb	r3, [r3, #26]
 8002294:	2b01      	cmp	r3, #1
 8002296:	d108      	bne.n	80022aa <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f042 0220 	orr.w	r2, r2, #32
 80022a6:	601a      	str	r2, [r3, #0]
 80022a8:	e007      	b.n	80022ba <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f022 0220 	bic.w	r2, r2, #32
 80022b8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	7edb      	ldrb	r3, [r3, #27]
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d108      	bne.n	80022d4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f022 0210 	bic.w	r2, r2, #16
 80022d0:	601a      	str	r2, [r3, #0]
 80022d2:	e007      	b.n	80022e4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f042 0210 	orr.w	r2, r2, #16
 80022e2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	7f1b      	ldrb	r3, [r3, #28]
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d108      	bne.n	80022fe <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f042 0208 	orr.w	r2, r2, #8
 80022fa:	601a      	str	r2, [r3, #0]
 80022fc:	e007      	b.n	800230e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f022 0208 	bic.w	r2, r2, #8
 800230c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	7f5b      	ldrb	r3, [r3, #29]
 8002312:	2b01      	cmp	r3, #1
 8002314:	d108      	bne.n	8002328 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f042 0204 	orr.w	r2, r2, #4
 8002324:	601a      	str	r2, [r3, #0]
 8002326:	e007      	b.n	8002338 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f022 0204 	bic.w	r2, r2, #4
 8002336:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	689a      	ldr	r2, [r3, #8]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	431a      	orrs	r2, r3
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	691b      	ldr	r3, [r3, #16]
 8002346:	431a      	orrs	r2, r3
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	695b      	ldr	r3, [r3, #20]
 800234c:	ea42 0103 	orr.w	r1, r2, r3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	1e5a      	subs	r2, r3, #1
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	430a      	orrs	r2, r1
 800235c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2200      	movs	r2, #0
 8002362:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2201      	movs	r2, #1
 8002368:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800236c:	2300      	movs	r3, #0
}
 800236e:	4618      	mov	r0, r3
 8002370:	3710      	adds	r7, #16
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
	...

08002378 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002378:	b480      	push	{r7}
 800237a:	b085      	sub	sp, #20
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	f003 0307 	and.w	r3, r3, #7
 8002386:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002388:	4b0c      	ldr	r3, [pc, #48]	@ (80023bc <__NVIC_SetPriorityGrouping+0x44>)
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800238e:	68ba      	ldr	r2, [r7, #8]
 8002390:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002394:	4013      	ands	r3, r2
 8002396:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023a0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80023a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80023a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023aa:	4a04      	ldr	r2, [pc, #16]	@ (80023bc <__NVIC_SetPriorityGrouping+0x44>)
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	60d3      	str	r3, [r2, #12]
}
 80023b0:	bf00      	nop
 80023b2:	3714      	adds	r7, #20
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr
 80023bc:	e000ed00 	.word	0xe000ed00

080023c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023c0:	b480      	push	{r7}
 80023c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023c4:	4b04      	ldr	r3, [pc, #16]	@ (80023d8 <__NVIC_GetPriorityGrouping+0x18>)
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	0a1b      	lsrs	r3, r3, #8
 80023ca:	f003 0307 	and.w	r3, r3, #7
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr
 80023d8:	e000ed00 	.word	0xe000ed00

080023dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	4603      	mov	r3, r0
 80023e4:	6039      	str	r1, [r7, #0]
 80023e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	db0a      	blt.n	8002406 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	b2da      	uxtb	r2, r3
 80023f4:	490c      	ldr	r1, [pc, #48]	@ (8002428 <__NVIC_SetPriority+0x4c>)
 80023f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023fa:	0112      	lsls	r2, r2, #4
 80023fc:	b2d2      	uxtb	r2, r2
 80023fe:	440b      	add	r3, r1
 8002400:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002404:	e00a      	b.n	800241c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	b2da      	uxtb	r2, r3
 800240a:	4908      	ldr	r1, [pc, #32]	@ (800242c <__NVIC_SetPriority+0x50>)
 800240c:	79fb      	ldrb	r3, [r7, #7]
 800240e:	f003 030f 	and.w	r3, r3, #15
 8002412:	3b04      	subs	r3, #4
 8002414:	0112      	lsls	r2, r2, #4
 8002416:	b2d2      	uxtb	r2, r2
 8002418:	440b      	add	r3, r1
 800241a:	761a      	strb	r2, [r3, #24]
}
 800241c:	bf00      	nop
 800241e:	370c      	adds	r7, #12
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr
 8002428:	e000e100 	.word	0xe000e100
 800242c:	e000ed00 	.word	0xe000ed00

08002430 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002430:	b480      	push	{r7}
 8002432:	b089      	sub	sp, #36	@ 0x24
 8002434:	af00      	add	r7, sp, #0
 8002436:	60f8      	str	r0, [r7, #12]
 8002438:	60b9      	str	r1, [r7, #8]
 800243a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	f003 0307 	and.w	r3, r3, #7
 8002442:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002444:	69fb      	ldr	r3, [r7, #28]
 8002446:	f1c3 0307 	rsb	r3, r3, #7
 800244a:	2b04      	cmp	r3, #4
 800244c:	bf28      	it	cs
 800244e:	2304      	movcs	r3, #4
 8002450:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	3304      	adds	r3, #4
 8002456:	2b06      	cmp	r3, #6
 8002458:	d902      	bls.n	8002460 <NVIC_EncodePriority+0x30>
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	3b03      	subs	r3, #3
 800245e:	e000      	b.n	8002462 <NVIC_EncodePriority+0x32>
 8002460:	2300      	movs	r3, #0
 8002462:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002464:	f04f 32ff 	mov.w	r2, #4294967295
 8002468:	69bb      	ldr	r3, [r7, #24]
 800246a:	fa02 f303 	lsl.w	r3, r2, r3
 800246e:	43da      	mvns	r2, r3
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	401a      	ands	r2, r3
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002478:	f04f 31ff 	mov.w	r1, #4294967295
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	fa01 f303 	lsl.w	r3, r1, r3
 8002482:	43d9      	mvns	r1, r3
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002488:	4313      	orrs	r3, r2
         );
}
 800248a:	4618      	mov	r0, r3
 800248c:	3724      	adds	r7, #36	@ 0x24
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr
	...

08002498 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b082      	sub	sp, #8
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	3b01      	subs	r3, #1
 80024a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80024a8:	d301      	bcc.n	80024ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024aa:	2301      	movs	r3, #1
 80024ac:	e00f      	b.n	80024ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024ae:	4a0a      	ldr	r2, [pc, #40]	@ (80024d8 <SysTick_Config+0x40>)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	3b01      	subs	r3, #1
 80024b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024b6:	210f      	movs	r1, #15
 80024b8:	f04f 30ff 	mov.w	r0, #4294967295
 80024bc:	f7ff ff8e 	bl	80023dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024c0:	4b05      	ldr	r3, [pc, #20]	@ (80024d8 <SysTick_Config+0x40>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024c6:	4b04      	ldr	r3, [pc, #16]	@ (80024d8 <SysTick_Config+0x40>)
 80024c8:	2207      	movs	r2, #7
 80024ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024cc:	2300      	movs	r3, #0
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3708      	adds	r7, #8
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	e000e010 	.word	0xe000e010

080024dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b082      	sub	sp, #8
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024e4:	6878      	ldr	r0, [r7, #4]
 80024e6:	f7ff ff47 	bl	8002378 <__NVIC_SetPriorityGrouping>
}
 80024ea:	bf00      	nop
 80024ec:	3708      	adds	r7, #8
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}

080024f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024f2:	b580      	push	{r7, lr}
 80024f4:	b086      	sub	sp, #24
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	4603      	mov	r3, r0
 80024fa:	60b9      	str	r1, [r7, #8]
 80024fc:	607a      	str	r2, [r7, #4]
 80024fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002500:	2300      	movs	r3, #0
 8002502:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002504:	f7ff ff5c 	bl	80023c0 <__NVIC_GetPriorityGrouping>
 8002508:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800250a:	687a      	ldr	r2, [r7, #4]
 800250c:	68b9      	ldr	r1, [r7, #8]
 800250e:	6978      	ldr	r0, [r7, #20]
 8002510:	f7ff ff8e 	bl	8002430 <NVIC_EncodePriority>
 8002514:	4602      	mov	r2, r0
 8002516:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800251a:	4611      	mov	r1, r2
 800251c:	4618      	mov	r0, r3
 800251e:	f7ff ff5d 	bl	80023dc <__NVIC_SetPriority>
}
 8002522:	bf00      	nop
 8002524:	3718      	adds	r7, #24
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}

0800252a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800252a:	b580      	push	{r7, lr}
 800252c:	b082      	sub	sp, #8
 800252e:	af00      	add	r7, sp, #0
 8002530:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f7ff ffb0 	bl	8002498 <SysTick_Config>
 8002538:	4603      	mov	r3, r0
}
 800253a:	4618      	mov	r0, r3
 800253c:	3708      	adds	r7, #8
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
	...

08002544 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b084      	sub	sp, #16
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d101      	bne.n	8002556 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e06c      	b.n	8002630 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800255c:	2b00      	cmp	r3, #0
 800255e:	d106      	bne.n	800256e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2223      	movs	r2, #35	@ 0x23
 8002564:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002568:	6878      	ldr	r0, [r7, #4]
 800256a:	f7ff fa0f 	bl	800198c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800256e:	2300      	movs	r3, #0
 8002570:	60bb      	str	r3, [r7, #8]
 8002572:	4b31      	ldr	r3, [pc, #196]	@ (8002638 <HAL_ETH_Init+0xf4>)
 8002574:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002576:	4a30      	ldr	r2, [pc, #192]	@ (8002638 <HAL_ETH_Init+0xf4>)
 8002578:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800257c:	6453      	str	r3, [r2, #68]	@ 0x44
 800257e:	4b2e      	ldr	r3, [pc, #184]	@ (8002638 <HAL_ETH_Init+0xf4>)
 8002580:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002582:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002586:	60bb      	str	r3, [r7, #8]
 8002588:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800258a:	4b2c      	ldr	r3, [pc, #176]	@ (800263c <HAL_ETH_Init+0xf8>)
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	4a2b      	ldr	r2, [pc, #172]	@ (800263c <HAL_ETH_Init+0xf8>)
 8002590:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002594:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002596:	4b29      	ldr	r3, [pc, #164]	@ (800263c <HAL_ETH_Init+0xf8>)
 8002598:	685a      	ldr	r2, [r3, #4]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	4927      	ldr	r1, [pc, #156]	@ (800263c <HAL_ETH_Init+0xf8>)
 80025a0:	4313      	orrs	r3, r2
 80025a2:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80025a4:	4b25      	ldr	r3, [pc, #148]	@ (800263c <HAL_ETH_Init+0xf8>)
 80025a6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	687a      	ldr	r2, [r7, #4]
 80025b4:	6812      	ldr	r2, [r2, #0]
 80025b6:	f043 0301 	orr.w	r3, r3, #1
 80025ba:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80025be:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80025c0:	f7ff fdae 	bl	8002120 <HAL_GetTick>
 80025c4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80025c6:	e011      	b.n	80025ec <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80025c8:	f7ff fdaa 	bl	8002120 <HAL_GetTick>
 80025cc:	4602      	mov	r2, r0
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80025d6:	d909      	bls.n	80025ec <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2204      	movs	r2, #4
 80025dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	22e0      	movs	r2, #224	@ 0xe0
 80025e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	e021      	b.n	8002630 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 0301 	and.w	r3, r3, #1
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d1e4      	bne.n	80025c8 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f000 f958 	bl	80028b4 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002604:	6878      	ldr	r0, [r7, #4]
 8002606:	f000 f9ff 	bl	8002a08 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	f000 fa55 	bl	8002aba <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	461a      	mov	r2, r3
 8002616:	2100      	movs	r1, #0
 8002618:	6878      	ldr	r0, [r7, #4]
 800261a:	f000 f9bd 	bl	8002998 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2200      	movs	r2, #0
 8002622:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2210      	movs	r2, #16
 800262a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800262e:	2300      	movs	r3, #0
}
 8002630:	4618      	mov	r0, r3
 8002632:	3710      	adds	r7, #16
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}
 8002638:	40023800 	.word	0x40023800
 800263c:	40013800 	.word	0x40013800

08002640 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b084      	sub	sp, #16
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
 8002648:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002652:	68fa      	ldr	r2, [r7, #12]
 8002654:	4b51      	ldr	r3, [pc, #324]	@ (800279c <ETH_SetMACConfig+0x15c>)
 8002656:	4013      	ands	r3, r2
 8002658:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	7c1b      	ldrb	r3, [r3, #16]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d102      	bne.n	8002668 <ETH_SetMACConfig+0x28>
 8002662:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002666:	e000      	b.n	800266a <ETH_SetMACConfig+0x2a>
 8002668:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	7c5b      	ldrb	r3, [r3, #17]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d102      	bne.n	8002678 <ETH_SetMACConfig+0x38>
 8002672:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002676:	e000      	b.n	800267a <ETH_SetMACConfig+0x3a>
 8002678:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800267a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002680:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	7fdb      	ldrb	r3, [r3, #31]
 8002686:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002688:	431a      	orrs	r2, r3
                        macconf->Speed |
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800268e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002690:	683a      	ldr	r2, [r7, #0]
 8002692:	7f92      	ldrb	r2, [r2, #30]
 8002694:	2a00      	cmp	r2, #0
 8002696:	d102      	bne.n	800269e <ETH_SetMACConfig+0x5e>
 8002698:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800269c:	e000      	b.n	80026a0 <ETH_SetMACConfig+0x60>
 800269e:	2200      	movs	r2, #0
                        macconf->Speed |
 80026a0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	7f1b      	ldrb	r3, [r3, #28]
 80026a6:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80026a8:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80026ae:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	791b      	ldrb	r3, [r3, #4]
 80026b4:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80026b6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80026b8:	683a      	ldr	r2, [r7, #0]
 80026ba:	f892 2020 	ldrb.w	r2, [r2, #32]
 80026be:	2a00      	cmp	r2, #0
 80026c0:	d102      	bne.n	80026c8 <ETH_SetMACConfig+0x88>
 80026c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80026c6:	e000      	b.n	80026ca <ETH_SetMACConfig+0x8a>
 80026c8:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80026ca:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	7bdb      	ldrb	r3, [r3, #15]
 80026d0:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80026d2:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80026d8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80026e0:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80026e2:	4313      	orrs	r3, r2
 80026e4:	68fa      	ldr	r2, [r7, #12]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	68fa      	ldr	r2, [r7, #12]
 80026f0:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80026fa:	2001      	movs	r0, #1
 80026fc:	f7ff fd1c 	bl	8002138 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	68fa      	ldr	r2, [r7, #12]
 8002706:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	699b      	ldr	r3, [r3, #24]
 800270e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002710:	68fa      	ldr	r2, [r7, #12]
 8002712:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8002716:	4013      	ands	r3, r2
 8002718:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800271e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002720:	683a      	ldr	r2, [r7, #0]
 8002722:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8002726:	2a00      	cmp	r2, #0
 8002728:	d101      	bne.n	800272e <ETH_SetMACConfig+0xee>
 800272a:	2280      	movs	r2, #128	@ 0x80
 800272c:	e000      	b.n	8002730 <ETH_SetMACConfig+0xf0>
 800272e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002730:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002736:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002738:	683a      	ldr	r2, [r7, #0]
 800273a:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 800273e:	2a01      	cmp	r2, #1
 8002740:	d101      	bne.n	8002746 <ETH_SetMACConfig+0x106>
 8002742:	2208      	movs	r2, #8
 8002744:	e000      	b.n	8002748 <ETH_SetMACConfig+0x108>
 8002746:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002748:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800274a:	683a      	ldr	r2, [r7, #0]
 800274c:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8002750:	2a01      	cmp	r2, #1
 8002752:	d101      	bne.n	8002758 <ETH_SetMACConfig+0x118>
 8002754:	2204      	movs	r2, #4
 8002756:	e000      	b.n	800275a <ETH_SetMACConfig+0x11a>
 8002758:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800275a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 800275c:	683a      	ldr	r2, [r7, #0]
 800275e:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8002762:	2a01      	cmp	r2, #1
 8002764:	d101      	bne.n	800276a <ETH_SetMACConfig+0x12a>
 8002766:	2202      	movs	r2, #2
 8002768:	e000      	b.n	800276c <ETH_SetMACConfig+0x12c>
 800276a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800276c:	4313      	orrs	r3, r2
 800276e:	68fa      	ldr	r2, [r7, #12]
 8002770:	4313      	orrs	r3, r2
 8002772:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	68fa      	ldr	r2, [r7, #12]
 800277a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	699b      	ldr	r3, [r3, #24]
 8002782:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002784:	2001      	movs	r0, #1
 8002786:	f7ff fcd7 	bl	8002138 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	68fa      	ldr	r2, [r7, #12]
 8002790:	619a      	str	r2, [r3, #24]
}
 8002792:	bf00      	nop
 8002794:	3710      	adds	r7, #16
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	ff20810f 	.word	0xff20810f

080027a0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b084      	sub	sp, #16
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80027b2:	699b      	ldr	r3, [r3, #24]
 80027b4:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80027b6:	68fa      	ldr	r2, [r7, #12]
 80027b8:	4b3d      	ldr	r3, [pc, #244]	@ (80028b0 <ETH_SetDMAConfig+0x110>)
 80027ba:	4013      	ands	r3, r2
 80027bc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	7b1b      	ldrb	r3, [r3, #12]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d102      	bne.n	80027cc <ETH_SetDMAConfig+0x2c>
 80027c6:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80027ca:	e000      	b.n	80027ce <ETH_SetDMAConfig+0x2e>
 80027cc:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	7b5b      	ldrb	r3, [r3, #13]
 80027d2:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80027d4:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80027d6:	683a      	ldr	r2, [r7, #0]
 80027d8:	7f52      	ldrb	r2, [r2, #29]
 80027da:	2a00      	cmp	r2, #0
 80027dc:	d102      	bne.n	80027e4 <ETH_SetDMAConfig+0x44>
 80027de:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80027e2:	e000      	b.n	80027e6 <ETH_SetDMAConfig+0x46>
 80027e4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80027e6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	7b9b      	ldrb	r3, [r3, #14]
 80027ec:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80027ee:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80027f4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	7f1b      	ldrb	r3, [r3, #28]
 80027fa:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80027fc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	7f9b      	ldrb	r3, [r3, #30]
 8002802:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002804:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800280a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002812:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002814:	4313      	orrs	r3, r2
 8002816:	68fa      	ldr	r2, [r7, #12]
 8002818:	4313      	orrs	r3, r2
 800281a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002824:	461a      	mov	r2, r3
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002832:	699b      	ldr	r3, [r3, #24]
 8002834:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002836:	2001      	movs	r0, #1
 8002838:	f7ff fc7e 	bl	8002138 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002844:	461a      	mov	r2, r3
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	791b      	ldrb	r3, [r3, #4]
 800284e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002854:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800285a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002860:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002868:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800286a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002870:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002872:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002878:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800287a:	687a      	ldr	r2, [r7, #4]
 800287c:	6812      	ldr	r2, [r2, #0]
 800287e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002882:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002886:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002894:	2001      	movs	r0, #1
 8002896:	f7ff fc4f 	bl	8002138 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80028a2:	461a      	mov	r2, r3
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	6013      	str	r3, [r2, #0]
}
 80028a8:	bf00      	nop
 80028aa:	3710      	adds	r7, #16
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	f8de3f23 	.word	0xf8de3f23

080028b4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b0a6      	sub	sp, #152	@ 0x98
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80028bc:	2301      	movs	r3, #1
 80028be:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 80028c2:	2301      	movs	r3, #1
 80028c4:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80028c8:	2300      	movs	r3, #0
 80028ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80028cc:	2300      	movs	r3, #0
 80028ce:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80028d2:	2301      	movs	r3, #1
 80028d4:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80028d8:	2300      	movs	r3, #0
 80028da:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80028de:	2301      	movs	r3, #1
 80028e0:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80028e4:	2300      	movs	r3, #0
 80028e6:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80028ea:	2300      	movs	r3, #0
 80028ec:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80028f0:	2300      	movs	r3, #0
 80028f2:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80028f4:	2300      	movs	r3, #0
 80028f6:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80028fa:	2300      	movs	r3, #0
 80028fc:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80028fe:	2300      	movs	r3, #0
 8002900:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002904:	2300      	movs	r3, #0
 8002906:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800290a:	2300      	movs	r3, #0
 800290c:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002910:	2300      	movs	r3, #0
 8002912:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002916:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800291a:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800291c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002920:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002922:	2300      	movs	r3, #0
 8002924:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002928:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800292c:	4619      	mov	r1, r3
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f7ff fe86 	bl	8002640 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002934:	2301      	movs	r3, #1
 8002936:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002938:	2301      	movs	r3, #1
 800293a:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800293c:	2301      	movs	r3, #1
 800293e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002942:	2301      	movs	r3, #1
 8002944:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002946:	2300      	movs	r3, #0
 8002948:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800294a:	2300      	movs	r3, #0
 800294c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002950:	2300      	movs	r3, #0
 8002952:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002956:	2300      	movs	r3, #0
 8002958:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800295a:	2301      	movs	r3, #1
 800295c:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002960:	2301      	movs	r3, #1
 8002962:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002964:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002968:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800296a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800296e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002970:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002974:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002976:	2301      	movs	r3, #1
 8002978:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800297c:	2300      	movs	r3, #0
 800297e:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002980:	2300      	movs	r3, #0
 8002982:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002984:	f107 0308 	add.w	r3, r7, #8
 8002988:	4619      	mov	r1, r3
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f7ff ff08 	bl	80027a0 <ETH_SetDMAConfig>
}
 8002990:	bf00      	nop
 8002992:	3798      	adds	r7, #152	@ 0x98
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}

08002998 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002998:	b480      	push	{r7}
 800299a:	b087      	sub	sp, #28
 800299c:	af00      	add	r7, sp, #0
 800299e:	60f8      	str	r0, [r7, #12]
 80029a0:	60b9      	str	r1, [r7, #8]
 80029a2:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	3305      	adds	r3, #5
 80029a8:	781b      	ldrb	r3, [r3, #0]
 80029aa:	021b      	lsls	r3, r3, #8
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	3204      	adds	r2, #4
 80029b0:	7812      	ldrb	r2, [r2, #0]
 80029b2:	4313      	orrs	r3, r2
 80029b4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80029b6:	68ba      	ldr	r2, [r7, #8]
 80029b8:	4b11      	ldr	r3, [pc, #68]	@ (8002a00 <ETH_MACAddressConfig+0x68>)
 80029ba:	4413      	add	r3, r2
 80029bc:	461a      	mov	r2, r3
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	3303      	adds	r3, #3
 80029c6:	781b      	ldrb	r3, [r3, #0]
 80029c8:	061a      	lsls	r2, r3, #24
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	3302      	adds	r3, #2
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	041b      	lsls	r3, r3, #16
 80029d2:	431a      	orrs	r2, r3
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	3301      	adds	r3, #1
 80029d8:	781b      	ldrb	r3, [r3, #0]
 80029da:	021b      	lsls	r3, r3, #8
 80029dc:	4313      	orrs	r3, r2
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	7812      	ldrb	r2, [r2, #0]
 80029e2:	4313      	orrs	r3, r2
 80029e4:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80029e6:	68ba      	ldr	r2, [r7, #8]
 80029e8:	4b06      	ldr	r3, [pc, #24]	@ (8002a04 <ETH_MACAddressConfig+0x6c>)
 80029ea:	4413      	add	r3, r2
 80029ec:	461a      	mov	r2, r3
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	6013      	str	r3, [r2, #0]
}
 80029f2:	bf00      	nop
 80029f4:	371c      	adds	r7, #28
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr
 80029fe:	bf00      	nop
 8002a00:	40028040 	.word	0x40028040
 8002a04:	40028044 	.word	0x40028044

08002a08 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b085      	sub	sp, #20
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002a10:	2300      	movs	r3, #0
 8002a12:	60fb      	str	r3, [r7, #12]
 8002a14:	e03e      	b.n	8002a94 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	68d9      	ldr	r1, [r3, #12]
 8002a1a:	68fa      	ldr	r2, [r7, #12]
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	4413      	add	r3, r2
 8002a22:	00db      	lsls	r3, r3, #3
 8002a24:	440b      	add	r3, r1
 8002a26:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	2200      	movs	r2, #0
 8002a32:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	2200      	movs	r2, #0
 8002a38:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002a40:	68b9      	ldr	r1, [r7, #8]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	68fa      	ldr	r2, [r7, #12]
 8002a46:	3206      	adds	r2, #6
 8002a48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2b02      	cmp	r3, #2
 8002a5c:	d80c      	bhi.n	8002a78 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	68d9      	ldr	r1, [r3, #12]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	1c5a      	adds	r2, r3, #1
 8002a66:	4613      	mov	r3, r2
 8002a68:	009b      	lsls	r3, r3, #2
 8002a6a:	4413      	add	r3, r2
 8002a6c:	00db      	lsls	r3, r3, #3
 8002a6e:	440b      	add	r3, r1
 8002a70:	461a      	mov	r2, r3
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	60da      	str	r2, [r3, #12]
 8002a76:	e004      	b.n	8002a82 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	3301      	adds	r3, #1
 8002a92:	60fb      	str	r3, [r7, #12]
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2b03      	cmp	r3, #3
 8002a98:	d9bd      	bls.n	8002a16 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	68da      	ldr	r2, [r3, #12]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002aac:	611a      	str	r2, [r3, #16]
}
 8002aae:	bf00      	nop
 8002ab0:	3714      	adds	r7, #20
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr

08002aba <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002aba:	b480      	push	{r7}
 8002abc:	b085      	sub	sp, #20
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	60fb      	str	r3, [r7, #12]
 8002ac6:	e046      	b.n	8002b56 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6919      	ldr	r1, [r3, #16]
 8002acc:	68fa      	ldr	r2, [r7, #12]
 8002ace:	4613      	mov	r3, r2
 8002ad0:	009b      	lsls	r3, r3, #2
 8002ad2:	4413      	add	r3, r2
 8002ad4:	00db      	lsls	r3, r3, #3
 8002ad6:	440b      	add	r3, r1
 8002ad8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	2200      	movs	r2, #0
 8002ade:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	2200      	movs	r2, #0
 8002af0:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	2200      	movs	r2, #0
 8002af6:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	2200      	movs	r2, #0
 8002afc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002b04:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	f244 52f4 	movw	r2, #17908	@ 0x45f4
 8002b0c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002b1a:	68b9      	ldr	r1, [r7, #8]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	68fa      	ldr	r2, [r7, #12]
 8002b20:	3212      	adds	r2, #18
 8002b22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2b02      	cmp	r3, #2
 8002b2a:	d80c      	bhi.n	8002b46 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6919      	ldr	r1, [r3, #16]
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	1c5a      	adds	r2, r3, #1
 8002b34:	4613      	mov	r3, r2
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	4413      	add	r3, r2
 8002b3a:	00db      	lsls	r3, r3, #3
 8002b3c:	440b      	add	r3, r1
 8002b3e:	461a      	mov	r2, r3
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	60da      	str	r2, [r3, #12]
 8002b44:	e004      	b.n	8002b50 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	691b      	ldr	r3, [r3, #16]
 8002b4a:	461a      	mov	r2, r3
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	3301      	adds	r3, #1
 8002b54:	60fb      	str	r3, [r7, #12]
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2b03      	cmp	r3, #3
 8002b5a:	d9b5      	bls.n	8002ac8 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2200      	movs	r2, #0
 8002b66:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2200      	movs	r2, #0
 8002b72:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2200      	movs	r2, #0
 8002b78:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	691a      	ldr	r2, [r3, #16]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b86:	60da      	str	r2, [r3, #12]
}
 8002b88:	bf00      	nop
 8002b8a:	3714      	adds	r7, #20
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr

08002b94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b089      	sub	sp, #36	@ 0x24
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002baa:	2300      	movs	r3, #0
 8002bac:	61fb      	str	r3, [r7, #28]
 8002bae:	e16b      	b.n	8002e88 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	69fb      	ldr	r3, [r7, #28]
 8002bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	697a      	ldr	r2, [r7, #20]
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002bc4:	693a      	ldr	r2, [r7, #16]
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	f040 815a 	bne.w	8002e82 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	f003 0303 	and.w	r3, r3, #3
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d005      	beq.n	8002be6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002be2:	2b02      	cmp	r3, #2
 8002be4:	d130      	bne.n	8002c48 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002bec:	69fb      	ldr	r3, [r7, #28]
 8002bee:	005b      	lsls	r3, r3, #1
 8002bf0:	2203      	movs	r2, #3
 8002bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf6:	43db      	mvns	r3, r3
 8002bf8:	69ba      	ldr	r2, [r7, #24]
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	68da      	ldr	r2, [r3, #12]
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	005b      	lsls	r3, r3, #1
 8002c06:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0a:	69ba      	ldr	r2, [r7, #24]
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	69ba      	ldr	r2, [r7, #24]
 8002c14:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	fa02 f303 	lsl.w	r3, r2, r3
 8002c24:	43db      	mvns	r3, r3
 8002c26:	69ba      	ldr	r2, [r7, #24]
 8002c28:	4013      	ands	r3, r2
 8002c2a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	091b      	lsrs	r3, r3, #4
 8002c32:	f003 0201 	and.w	r2, r3, #1
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3c:	69ba      	ldr	r2, [r7, #24]
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	69ba      	ldr	r2, [r7, #24]
 8002c46:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f003 0303 	and.w	r3, r3, #3
 8002c50:	2b03      	cmp	r3, #3
 8002c52:	d017      	beq.n	8002c84 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	005b      	lsls	r3, r3, #1
 8002c5e:	2203      	movs	r2, #3
 8002c60:	fa02 f303 	lsl.w	r3, r2, r3
 8002c64:	43db      	mvns	r3, r3
 8002c66:	69ba      	ldr	r2, [r7, #24]
 8002c68:	4013      	ands	r3, r2
 8002c6a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	689a      	ldr	r2, [r3, #8]
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	005b      	lsls	r3, r3, #1
 8002c74:	fa02 f303 	lsl.w	r3, r2, r3
 8002c78:	69ba      	ldr	r2, [r7, #24]
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	69ba      	ldr	r2, [r7, #24]
 8002c82:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f003 0303 	and.w	r3, r3, #3
 8002c8c:	2b02      	cmp	r3, #2
 8002c8e:	d123      	bne.n	8002cd8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c90:	69fb      	ldr	r3, [r7, #28]
 8002c92:	08da      	lsrs	r2, r3, #3
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	3208      	adds	r2, #8
 8002c98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	f003 0307 	and.w	r3, r3, #7
 8002ca4:	009b      	lsls	r3, r3, #2
 8002ca6:	220f      	movs	r2, #15
 8002ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cac:	43db      	mvns	r3, r3
 8002cae:	69ba      	ldr	r2, [r7, #24]
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	691a      	ldr	r2, [r3, #16]
 8002cb8:	69fb      	ldr	r3, [r7, #28]
 8002cba:	f003 0307 	and.w	r3, r3, #7
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc4:	69ba      	ldr	r2, [r7, #24]
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	08da      	lsrs	r2, r3, #3
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	3208      	adds	r2, #8
 8002cd2:	69b9      	ldr	r1, [r7, #24]
 8002cd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	005b      	lsls	r3, r3, #1
 8002ce2:	2203      	movs	r2, #3
 8002ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce8:	43db      	mvns	r3, r3
 8002cea:	69ba      	ldr	r2, [r7, #24]
 8002cec:	4013      	ands	r3, r2
 8002cee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	f003 0203 	and.w	r2, r3, #3
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	005b      	lsls	r3, r3, #1
 8002cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002d00:	69ba      	ldr	r2, [r7, #24]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	69ba      	ldr	r2, [r7, #24]
 8002d0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	f000 80b4 	beq.w	8002e82 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	60fb      	str	r3, [r7, #12]
 8002d1e:	4b60      	ldr	r3, [pc, #384]	@ (8002ea0 <HAL_GPIO_Init+0x30c>)
 8002d20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d22:	4a5f      	ldr	r2, [pc, #380]	@ (8002ea0 <HAL_GPIO_Init+0x30c>)
 8002d24:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d28:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d2a:	4b5d      	ldr	r3, [pc, #372]	@ (8002ea0 <HAL_GPIO_Init+0x30c>)
 8002d2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d32:	60fb      	str	r3, [r7, #12]
 8002d34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d36:	4a5b      	ldr	r2, [pc, #364]	@ (8002ea4 <HAL_GPIO_Init+0x310>)
 8002d38:	69fb      	ldr	r3, [r7, #28]
 8002d3a:	089b      	lsrs	r3, r3, #2
 8002d3c:	3302      	adds	r3, #2
 8002d3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d44:	69fb      	ldr	r3, [r7, #28]
 8002d46:	f003 0303 	and.w	r3, r3, #3
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	220f      	movs	r2, #15
 8002d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d52:	43db      	mvns	r3, r3
 8002d54:	69ba      	ldr	r2, [r7, #24]
 8002d56:	4013      	ands	r3, r2
 8002d58:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	4a52      	ldr	r2, [pc, #328]	@ (8002ea8 <HAL_GPIO_Init+0x314>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d02b      	beq.n	8002dba <HAL_GPIO_Init+0x226>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4a51      	ldr	r2, [pc, #324]	@ (8002eac <HAL_GPIO_Init+0x318>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d025      	beq.n	8002db6 <HAL_GPIO_Init+0x222>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4a50      	ldr	r2, [pc, #320]	@ (8002eb0 <HAL_GPIO_Init+0x31c>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d01f      	beq.n	8002db2 <HAL_GPIO_Init+0x21e>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	4a4f      	ldr	r2, [pc, #316]	@ (8002eb4 <HAL_GPIO_Init+0x320>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d019      	beq.n	8002dae <HAL_GPIO_Init+0x21a>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	4a4e      	ldr	r2, [pc, #312]	@ (8002eb8 <HAL_GPIO_Init+0x324>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d013      	beq.n	8002daa <HAL_GPIO_Init+0x216>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	4a4d      	ldr	r2, [pc, #308]	@ (8002ebc <HAL_GPIO_Init+0x328>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d00d      	beq.n	8002da6 <HAL_GPIO_Init+0x212>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	4a4c      	ldr	r2, [pc, #304]	@ (8002ec0 <HAL_GPIO_Init+0x32c>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d007      	beq.n	8002da2 <HAL_GPIO_Init+0x20e>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	4a4b      	ldr	r2, [pc, #300]	@ (8002ec4 <HAL_GPIO_Init+0x330>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d101      	bne.n	8002d9e <HAL_GPIO_Init+0x20a>
 8002d9a:	2307      	movs	r3, #7
 8002d9c:	e00e      	b.n	8002dbc <HAL_GPIO_Init+0x228>
 8002d9e:	2308      	movs	r3, #8
 8002da0:	e00c      	b.n	8002dbc <HAL_GPIO_Init+0x228>
 8002da2:	2306      	movs	r3, #6
 8002da4:	e00a      	b.n	8002dbc <HAL_GPIO_Init+0x228>
 8002da6:	2305      	movs	r3, #5
 8002da8:	e008      	b.n	8002dbc <HAL_GPIO_Init+0x228>
 8002daa:	2304      	movs	r3, #4
 8002dac:	e006      	b.n	8002dbc <HAL_GPIO_Init+0x228>
 8002dae:	2303      	movs	r3, #3
 8002db0:	e004      	b.n	8002dbc <HAL_GPIO_Init+0x228>
 8002db2:	2302      	movs	r3, #2
 8002db4:	e002      	b.n	8002dbc <HAL_GPIO_Init+0x228>
 8002db6:	2301      	movs	r3, #1
 8002db8:	e000      	b.n	8002dbc <HAL_GPIO_Init+0x228>
 8002dba:	2300      	movs	r3, #0
 8002dbc:	69fa      	ldr	r2, [r7, #28]
 8002dbe:	f002 0203 	and.w	r2, r2, #3
 8002dc2:	0092      	lsls	r2, r2, #2
 8002dc4:	4093      	lsls	r3, r2
 8002dc6:	69ba      	ldr	r2, [r7, #24]
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002dcc:	4935      	ldr	r1, [pc, #212]	@ (8002ea4 <HAL_GPIO_Init+0x310>)
 8002dce:	69fb      	ldr	r3, [r7, #28]
 8002dd0:	089b      	lsrs	r3, r3, #2
 8002dd2:	3302      	adds	r3, #2
 8002dd4:	69ba      	ldr	r2, [r7, #24]
 8002dd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002dda:	4b3b      	ldr	r3, [pc, #236]	@ (8002ec8 <HAL_GPIO_Init+0x334>)
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	43db      	mvns	r3, r3
 8002de4:	69ba      	ldr	r2, [r7, #24]
 8002de6:	4013      	ands	r3, r2
 8002de8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d003      	beq.n	8002dfe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002df6:	69ba      	ldr	r2, [r7, #24]
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002dfe:	4a32      	ldr	r2, [pc, #200]	@ (8002ec8 <HAL_GPIO_Init+0x334>)
 8002e00:	69bb      	ldr	r3, [r7, #24]
 8002e02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e04:	4b30      	ldr	r3, [pc, #192]	@ (8002ec8 <HAL_GPIO_Init+0x334>)
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	43db      	mvns	r3, r3
 8002e0e:	69ba      	ldr	r2, [r7, #24]
 8002e10:	4013      	ands	r3, r2
 8002e12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d003      	beq.n	8002e28 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002e20:	69ba      	ldr	r2, [r7, #24]
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	4313      	orrs	r3, r2
 8002e26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e28:	4a27      	ldr	r2, [pc, #156]	@ (8002ec8 <HAL_GPIO_Init+0x334>)
 8002e2a:	69bb      	ldr	r3, [r7, #24]
 8002e2c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e2e:	4b26      	ldr	r3, [pc, #152]	@ (8002ec8 <HAL_GPIO_Init+0x334>)
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	43db      	mvns	r3, r3
 8002e38:	69ba      	ldr	r2, [r7, #24]
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d003      	beq.n	8002e52 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002e4a:	69ba      	ldr	r2, [r7, #24]
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e52:	4a1d      	ldr	r2, [pc, #116]	@ (8002ec8 <HAL_GPIO_Init+0x334>)
 8002e54:	69bb      	ldr	r3, [r7, #24]
 8002e56:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e58:	4b1b      	ldr	r3, [pc, #108]	@ (8002ec8 <HAL_GPIO_Init+0x334>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	43db      	mvns	r3, r3
 8002e62:	69ba      	ldr	r2, [r7, #24]
 8002e64:	4013      	ands	r3, r2
 8002e66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d003      	beq.n	8002e7c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002e74:	69ba      	ldr	r2, [r7, #24]
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e7c:	4a12      	ldr	r2, [pc, #72]	@ (8002ec8 <HAL_GPIO_Init+0x334>)
 8002e7e:	69bb      	ldr	r3, [r7, #24]
 8002e80:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e82:	69fb      	ldr	r3, [r7, #28]
 8002e84:	3301      	adds	r3, #1
 8002e86:	61fb      	str	r3, [r7, #28]
 8002e88:	69fb      	ldr	r3, [r7, #28]
 8002e8a:	2b0f      	cmp	r3, #15
 8002e8c:	f67f ae90 	bls.w	8002bb0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e90:	bf00      	nop
 8002e92:	bf00      	nop
 8002e94:	3724      	adds	r7, #36	@ 0x24
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr
 8002e9e:	bf00      	nop
 8002ea0:	40023800 	.word	0x40023800
 8002ea4:	40013800 	.word	0x40013800
 8002ea8:	40020000 	.word	0x40020000
 8002eac:	40020400 	.word	0x40020400
 8002eb0:	40020800 	.word	0x40020800
 8002eb4:	40020c00 	.word	0x40020c00
 8002eb8:	40021000 	.word	0x40021000
 8002ebc:	40021400 	.word	0x40021400
 8002ec0:	40021800 	.word	0x40021800
 8002ec4:	40021c00 	.word	0x40021c00
 8002ec8:	40013c00 	.word	0x40013c00

08002ecc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b083      	sub	sp, #12
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
 8002ed4:	460b      	mov	r3, r1
 8002ed6:	807b      	strh	r3, [r7, #2]
 8002ed8:	4613      	mov	r3, r2
 8002eda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002edc:	787b      	ldrb	r3, [r7, #1]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d003      	beq.n	8002eea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ee2:	887a      	ldrh	r2, [r7, #2]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ee8:	e003      	b.n	8002ef2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002eea:	887b      	ldrh	r3, [r7, #2]
 8002eec:	041a      	lsls	r2, r3, #16
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	619a      	str	r2, [r3, #24]
}
 8002ef2:	bf00      	nop
 8002ef4:	370c      	adds	r7, #12
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr
	...

08002f00 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b084      	sub	sp, #16
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d101      	bne.n	8002f12 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e12b      	b.n	800316a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d106      	bne.n	8002f2c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2200      	movs	r2, #0
 8002f22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f7fe fdd6 	bl	8001ad8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2224      	movs	r2, #36	@ 0x24
 8002f30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f022 0201 	bic.w	r2, r2, #1
 8002f42:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002f52:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002f62:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002f64:	f001 f858 	bl	8004018 <HAL_RCC_GetPCLK1Freq>
 8002f68:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	4a81      	ldr	r2, [pc, #516]	@ (8003174 <HAL_I2C_Init+0x274>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d807      	bhi.n	8002f84 <HAL_I2C_Init+0x84>
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	4a80      	ldr	r2, [pc, #512]	@ (8003178 <HAL_I2C_Init+0x278>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	bf94      	ite	ls
 8002f7c:	2301      	movls	r3, #1
 8002f7e:	2300      	movhi	r3, #0
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	e006      	b.n	8002f92 <HAL_I2C_Init+0x92>
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	4a7d      	ldr	r2, [pc, #500]	@ (800317c <HAL_I2C_Init+0x27c>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	bf94      	ite	ls
 8002f8c:	2301      	movls	r3, #1
 8002f8e:	2300      	movhi	r3, #0
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d001      	beq.n	8002f9a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e0e7      	b.n	800316a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	4a78      	ldr	r2, [pc, #480]	@ (8003180 <HAL_I2C_Init+0x280>)
 8002f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002fa2:	0c9b      	lsrs	r3, r3, #18
 8002fa4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	68ba      	ldr	r2, [r7, #8]
 8002fb6:	430a      	orrs	r2, r1
 8002fb8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	6a1b      	ldr	r3, [r3, #32]
 8002fc0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	4a6a      	ldr	r2, [pc, #424]	@ (8003174 <HAL_I2C_Init+0x274>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d802      	bhi.n	8002fd4 <HAL_I2C_Init+0xd4>
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	3301      	adds	r3, #1
 8002fd2:	e009      	b.n	8002fe8 <HAL_I2C_Init+0xe8>
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002fda:	fb02 f303 	mul.w	r3, r2, r3
 8002fde:	4a69      	ldr	r2, [pc, #420]	@ (8003184 <HAL_I2C_Init+0x284>)
 8002fe0:	fba2 2303 	umull	r2, r3, r2, r3
 8002fe4:	099b      	lsrs	r3, r3, #6
 8002fe6:	3301      	adds	r3, #1
 8002fe8:	687a      	ldr	r2, [r7, #4]
 8002fea:	6812      	ldr	r2, [r2, #0]
 8002fec:	430b      	orrs	r3, r1
 8002fee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	69db      	ldr	r3, [r3, #28]
 8002ff6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002ffa:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	495c      	ldr	r1, [pc, #368]	@ (8003174 <HAL_I2C_Init+0x274>)
 8003004:	428b      	cmp	r3, r1
 8003006:	d819      	bhi.n	800303c <HAL_I2C_Init+0x13c>
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	1e59      	subs	r1, r3, #1
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	005b      	lsls	r3, r3, #1
 8003012:	fbb1 f3f3 	udiv	r3, r1, r3
 8003016:	1c59      	adds	r1, r3, #1
 8003018:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800301c:	400b      	ands	r3, r1
 800301e:	2b00      	cmp	r3, #0
 8003020:	d00a      	beq.n	8003038 <HAL_I2C_Init+0x138>
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	1e59      	subs	r1, r3, #1
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	005b      	lsls	r3, r3, #1
 800302c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003030:	3301      	adds	r3, #1
 8003032:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003036:	e051      	b.n	80030dc <HAL_I2C_Init+0x1dc>
 8003038:	2304      	movs	r3, #4
 800303a:	e04f      	b.n	80030dc <HAL_I2C_Init+0x1dc>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d111      	bne.n	8003068 <HAL_I2C_Init+0x168>
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	1e58      	subs	r0, r3, #1
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6859      	ldr	r1, [r3, #4]
 800304c:	460b      	mov	r3, r1
 800304e:	005b      	lsls	r3, r3, #1
 8003050:	440b      	add	r3, r1
 8003052:	fbb0 f3f3 	udiv	r3, r0, r3
 8003056:	3301      	adds	r3, #1
 8003058:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800305c:	2b00      	cmp	r3, #0
 800305e:	bf0c      	ite	eq
 8003060:	2301      	moveq	r3, #1
 8003062:	2300      	movne	r3, #0
 8003064:	b2db      	uxtb	r3, r3
 8003066:	e012      	b.n	800308e <HAL_I2C_Init+0x18e>
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	1e58      	subs	r0, r3, #1
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6859      	ldr	r1, [r3, #4]
 8003070:	460b      	mov	r3, r1
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	440b      	add	r3, r1
 8003076:	0099      	lsls	r1, r3, #2
 8003078:	440b      	add	r3, r1
 800307a:	fbb0 f3f3 	udiv	r3, r0, r3
 800307e:	3301      	adds	r3, #1
 8003080:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003084:	2b00      	cmp	r3, #0
 8003086:	bf0c      	ite	eq
 8003088:	2301      	moveq	r3, #1
 800308a:	2300      	movne	r3, #0
 800308c:	b2db      	uxtb	r3, r3
 800308e:	2b00      	cmp	r3, #0
 8003090:	d001      	beq.n	8003096 <HAL_I2C_Init+0x196>
 8003092:	2301      	movs	r3, #1
 8003094:	e022      	b.n	80030dc <HAL_I2C_Init+0x1dc>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d10e      	bne.n	80030bc <HAL_I2C_Init+0x1bc>
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	1e58      	subs	r0, r3, #1
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6859      	ldr	r1, [r3, #4]
 80030a6:	460b      	mov	r3, r1
 80030a8:	005b      	lsls	r3, r3, #1
 80030aa:	440b      	add	r3, r1
 80030ac:	fbb0 f3f3 	udiv	r3, r0, r3
 80030b0:	3301      	adds	r3, #1
 80030b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80030ba:	e00f      	b.n	80030dc <HAL_I2C_Init+0x1dc>
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	1e58      	subs	r0, r3, #1
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6859      	ldr	r1, [r3, #4]
 80030c4:	460b      	mov	r3, r1
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	440b      	add	r3, r1
 80030ca:	0099      	lsls	r1, r3, #2
 80030cc:	440b      	add	r3, r1
 80030ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80030d2:	3301      	adds	r3, #1
 80030d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030d8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80030dc:	6879      	ldr	r1, [r7, #4]
 80030de:	6809      	ldr	r1, [r1, #0]
 80030e0:	4313      	orrs	r3, r2
 80030e2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	69da      	ldr	r2, [r3, #28]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6a1b      	ldr	r3, [r3, #32]
 80030f6:	431a      	orrs	r2, r3
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	430a      	orrs	r2, r1
 80030fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800310a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	6911      	ldr	r1, [r2, #16]
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	68d2      	ldr	r2, [r2, #12]
 8003116:	4311      	orrs	r1, r2
 8003118:	687a      	ldr	r2, [r7, #4]
 800311a:	6812      	ldr	r2, [r2, #0]
 800311c:	430b      	orrs	r3, r1
 800311e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	68db      	ldr	r3, [r3, #12]
 8003126:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	695a      	ldr	r2, [r3, #20]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	699b      	ldr	r3, [r3, #24]
 8003132:	431a      	orrs	r2, r3
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	430a      	orrs	r2, r1
 800313a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f042 0201 	orr.w	r2, r2, #1
 800314a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2200      	movs	r2, #0
 8003150:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2220      	movs	r2, #32
 8003156:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2200      	movs	r2, #0
 800315e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2200      	movs	r2, #0
 8003164:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003168:	2300      	movs	r3, #0
}
 800316a:	4618      	mov	r0, r3
 800316c:	3710      	adds	r7, #16
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop
 8003174:	000186a0 	.word	0x000186a0
 8003178:	001e847f 	.word	0x001e847f
 800317c:	003d08ff 	.word	0x003d08ff
 8003180:	431bde83 	.word	0x431bde83
 8003184:	10624dd3 	.word	0x10624dd3

08003188 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b088      	sub	sp, #32
 800318c:	af02      	add	r7, sp, #8
 800318e:	60f8      	str	r0, [r7, #12]
 8003190:	4608      	mov	r0, r1
 8003192:	4611      	mov	r1, r2
 8003194:	461a      	mov	r2, r3
 8003196:	4603      	mov	r3, r0
 8003198:	817b      	strh	r3, [r7, #10]
 800319a:	460b      	mov	r3, r1
 800319c:	813b      	strh	r3, [r7, #8]
 800319e:	4613      	mov	r3, r2
 80031a0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80031a2:	f7fe ffbd 	bl	8002120 <HAL_GetTick>
 80031a6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	2b20      	cmp	r3, #32
 80031b2:	f040 80d9 	bne.w	8003368 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	9300      	str	r3, [sp, #0]
 80031ba:	2319      	movs	r3, #25
 80031bc:	2201      	movs	r2, #1
 80031be:	496d      	ldr	r1, [pc, #436]	@ (8003374 <HAL_I2C_Mem_Write+0x1ec>)
 80031c0:	68f8      	ldr	r0, [r7, #12]
 80031c2:	f000 f971 	bl	80034a8 <I2C_WaitOnFlagUntilTimeout>
 80031c6:	4603      	mov	r3, r0
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d001      	beq.n	80031d0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80031cc:	2302      	movs	r3, #2
 80031ce:	e0cc      	b.n	800336a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d101      	bne.n	80031de <HAL_I2C_Mem_Write+0x56>
 80031da:	2302      	movs	r3, #2
 80031dc:	e0c5      	b.n	800336a <HAL_I2C_Mem_Write+0x1e2>
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2201      	movs	r2, #1
 80031e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0301 	and.w	r3, r3, #1
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d007      	beq.n	8003204 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f042 0201 	orr.w	r2, r2, #1
 8003202:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003212:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2221      	movs	r2, #33	@ 0x21
 8003218:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2240      	movs	r2, #64	@ 0x40
 8003220:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2200      	movs	r2, #0
 8003228:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	6a3a      	ldr	r2, [r7, #32]
 800322e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003234:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800323a:	b29a      	uxth	r2, r3
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	4a4d      	ldr	r2, [pc, #308]	@ (8003378 <HAL_I2C_Mem_Write+0x1f0>)
 8003244:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003246:	88f8      	ldrh	r0, [r7, #6]
 8003248:	893a      	ldrh	r2, [r7, #8]
 800324a:	8979      	ldrh	r1, [r7, #10]
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	9301      	str	r3, [sp, #4]
 8003250:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003252:	9300      	str	r3, [sp, #0]
 8003254:	4603      	mov	r3, r0
 8003256:	68f8      	ldr	r0, [r7, #12]
 8003258:	f000 f890 	bl	800337c <I2C_RequestMemoryWrite>
 800325c:	4603      	mov	r3, r0
 800325e:	2b00      	cmp	r3, #0
 8003260:	d052      	beq.n	8003308 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e081      	b.n	800336a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003266:	697a      	ldr	r2, [r7, #20]
 8003268:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800326a:	68f8      	ldr	r0, [r7, #12]
 800326c:	f000 f9f2 	bl	8003654 <I2C_WaitOnTXEFlagUntilTimeout>
 8003270:	4603      	mov	r3, r0
 8003272:	2b00      	cmp	r3, #0
 8003274:	d00d      	beq.n	8003292 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800327a:	2b04      	cmp	r3, #4
 800327c:	d107      	bne.n	800328e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800328c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e06b      	b.n	800336a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003296:	781a      	ldrb	r2, [r3, #0]
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032a2:	1c5a      	adds	r2, r3, #1
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032ac:	3b01      	subs	r3, #1
 80032ae:	b29a      	uxth	r2, r3
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032b8:	b29b      	uxth	r3, r3
 80032ba:	3b01      	subs	r3, #1
 80032bc:	b29a      	uxth	r2, r3
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	695b      	ldr	r3, [r3, #20]
 80032c8:	f003 0304 	and.w	r3, r3, #4
 80032cc:	2b04      	cmp	r3, #4
 80032ce:	d11b      	bne.n	8003308 <HAL_I2C_Mem_Write+0x180>
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d017      	beq.n	8003308 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032dc:	781a      	ldrb	r2, [r3, #0]
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032e8:	1c5a      	adds	r2, r3, #1
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032f2:	3b01      	subs	r3, #1
 80032f4:	b29a      	uxth	r2, r3
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032fe:	b29b      	uxth	r3, r3
 8003300:	3b01      	subs	r3, #1
 8003302:	b29a      	uxth	r2, r3
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800330c:	2b00      	cmp	r3, #0
 800330e:	d1aa      	bne.n	8003266 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003310:	697a      	ldr	r2, [r7, #20]
 8003312:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003314:	68f8      	ldr	r0, [r7, #12]
 8003316:	f000 f9de 	bl	80036d6 <I2C_WaitOnBTFFlagUntilTimeout>
 800331a:	4603      	mov	r3, r0
 800331c:	2b00      	cmp	r3, #0
 800331e:	d00d      	beq.n	800333c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003324:	2b04      	cmp	r3, #4
 8003326:	d107      	bne.n	8003338 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003336:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	e016      	b.n	800336a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800334a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2220      	movs	r2, #32
 8003350:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2200      	movs	r2, #0
 8003358:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	2200      	movs	r2, #0
 8003360:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003364:	2300      	movs	r3, #0
 8003366:	e000      	b.n	800336a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003368:	2302      	movs	r3, #2
  }
}
 800336a:	4618      	mov	r0, r3
 800336c:	3718      	adds	r7, #24
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}
 8003372:	bf00      	nop
 8003374:	00100002 	.word	0x00100002
 8003378:	ffff0000 	.word	0xffff0000

0800337c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b088      	sub	sp, #32
 8003380:	af02      	add	r7, sp, #8
 8003382:	60f8      	str	r0, [r7, #12]
 8003384:	4608      	mov	r0, r1
 8003386:	4611      	mov	r1, r2
 8003388:	461a      	mov	r2, r3
 800338a:	4603      	mov	r3, r0
 800338c:	817b      	strh	r3, [r7, #10]
 800338e:	460b      	mov	r3, r1
 8003390:	813b      	strh	r3, [r7, #8]
 8003392:	4613      	mov	r3, r2
 8003394:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80033a4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80033a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033a8:	9300      	str	r3, [sp, #0]
 80033aa:	6a3b      	ldr	r3, [r7, #32]
 80033ac:	2200      	movs	r2, #0
 80033ae:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80033b2:	68f8      	ldr	r0, [r7, #12]
 80033b4:	f000 f878 	bl	80034a8 <I2C_WaitOnFlagUntilTimeout>
 80033b8:	4603      	mov	r3, r0
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d00d      	beq.n	80033da <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80033cc:	d103      	bne.n	80033d6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80033d4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80033d6:	2303      	movs	r3, #3
 80033d8:	e05f      	b.n	800349a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80033da:	897b      	ldrh	r3, [r7, #10]
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	461a      	mov	r2, r3
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80033e8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80033ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033ec:	6a3a      	ldr	r2, [r7, #32]
 80033ee:	492d      	ldr	r1, [pc, #180]	@ (80034a4 <I2C_RequestMemoryWrite+0x128>)
 80033f0:	68f8      	ldr	r0, [r7, #12]
 80033f2:	f000 f8b0 	bl	8003556 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033f6:	4603      	mov	r3, r0
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d001      	beq.n	8003400 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	e04c      	b.n	800349a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003400:	2300      	movs	r3, #0
 8003402:	617b      	str	r3, [r7, #20]
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	695b      	ldr	r3, [r3, #20]
 800340a:	617b      	str	r3, [r7, #20]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	699b      	ldr	r3, [r3, #24]
 8003412:	617b      	str	r3, [r7, #20]
 8003414:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003416:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003418:	6a39      	ldr	r1, [r7, #32]
 800341a:	68f8      	ldr	r0, [r7, #12]
 800341c:	f000 f91a 	bl	8003654 <I2C_WaitOnTXEFlagUntilTimeout>
 8003420:	4603      	mov	r3, r0
 8003422:	2b00      	cmp	r3, #0
 8003424:	d00d      	beq.n	8003442 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800342a:	2b04      	cmp	r3, #4
 800342c:	d107      	bne.n	800343e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800343c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e02b      	b.n	800349a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003442:	88fb      	ldrh	r3, [r7, #6]
 8003444:	2b01      	cmp	r3, #1
 8003446:	d105      	bne.n	8003454 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003448:	893b      	ldrh	r3, [r7, #8]
 800344a:	b2da      	uxtb	r2, r3
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	611a      	str	r2, [r3, #16]
 8003452:	e021      	b.n	8003498 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003454:	893b      	ldrh	r3, [r7, #8]
 8003456:	0a1b      	lsrs	r3, r3, #8
 8003458:	b29b      	uxth	r3, r3
 800345a:	b2da      	uxtb	r2, r3
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003462:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003464:	6a39      	ldr	r1, [r7, #32]
 8003466:	68f8      	ldr	r0, [r7, #12]
 8003468:	f000 f8f4 	bl	8003654 <I2C_WaitOnTXEFlagUntilTimeout>
 800346c:	4603      	mov	r3, r0
 800346e:	2b00      	cmp	r3, #0
 8003470:	d00d      	beq.n	800348e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003476:	2b04      	cmp	r3, #4
 8003478:	d107      	bne.n	800348a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003488:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e005      	b.n	800349a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800348e:	893b      	ldrh	r3, [r7, #8]
 8003490:	b2da      	uxtb	r2, r3
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003498:	2300      	movs	r3, #0
}
 800349a:	4618      	mov	r0, r3
 800349c:	3718      	adds	r7, #24
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	bf00      	nop
 80034a4:	00010002 	.word	0x00010002

080034a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b084      	sub	sp, #16
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	60f8      	str	r0, [r7, #12]
 80034b0:	60b9      	str	r1, [r7, #8]
 80034b2:	603b      	str	r3, [r7, #0]
 80034b4:	4613      	mov	r3, r2
 80034b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034b8:	e025      	b.n	8003506 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034c0:	d021      	beq.n	8003506 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034c2:	f7fe fe2d 	bl	8002120 <HAL_GetTick>
 80034c6:	4602      	mov	r2, r0
 80034c8:	69bb      	ldr	r3, [r7, #24]
 80034ca:	1ad3      	subs	r3, r2, r3
 80034cc:	683a      	ldr	r2, [r7, #0]
 80034ce:	429a      	cmp	r2, r3
 80034d0:	d302      	bcc.n	80034d8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d116      	bne.n	8003506 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2200      	movs	r2, #0
 80034dc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2220      	movs	r2, #32
 80034e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2200      	movs	r2, #0
 80034ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034f2:	f043 0220 	orr.w	r2, r3, #32
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2200      	movs	r2, #0
 80034fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e023      	b.n	800354e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	0c1b      	lsrs	r3, r3, #16
 800350a:	b2db      	uxtb	r3, r3
 800350c:	2b01      	cmp	r3, #1
 800350e:	d10d      	bne.n	800352c <I2C_WaitOnFlagUntilTimeout+0x84>
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	695b      	ldr	r3, [r3, #20]
 8003516:	43da      	mvns	r2, r3
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	4013      	ands	r3, r2
 800351c:	b29b      	uxth	r3, r3
 800351e:	2b00      	cmp	r3, #0
 8003520:	bf0c      	ite	eq
 8003522:	2301      	moveq	r3, #1
 8003524:	2300      	movne	r3, #0
 8003526:	b2db      	uxtb	r3, r3
 8003528:	461a      	mov	r2, r3
 800352a:	e00c      	b.n	8003546 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	699b      	ldr	r3, [r3, #24]
 8003532:	43da      	mvns	r2, r3
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	4013      	ands	r3, r2
 8003538:	b29b      	uxth	r3, r3
 800353a:	2b00      	cmp	r3, #0
 800353c:	bf0c      	ite	eq
 800353e:	2301      	moveq	r3, #1
 8003540:	2300      	movne	r3, #0
 8003542:	b2db      	uxtb	r3, r3
 8003544:	461a      	mov	r2, r3
 8003546:	79fb      	ldrb	r3, [r7, #7]
 8003548:	429a      	cmp	r2, r3
 800354a:	d0b6      	beq.n	80034ba <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800354c:	2300      	movs	r3, #0
}
 800354e:	4618      	mov	r0, r3
 8003550:	3710      	adds	r7, #16
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}

08003556 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003556:	b580      	push	{r7, lr}
 8003558:	b084      	sub	sp, #16
 800355a:	af00      	add	r7, sp, #0
 800355c:	60f8      	str	r0, [r7, #12]
 800355e:	60b9      	str	r1, [r7, #8]
 8003560:	607a      	str	r2, [r7, #4]
 8003562:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003564:	e051      	b.n	800360a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	695b      	ldr	r3, [r3, #20]
 800356c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003570:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003574:	d123      	bne.n	80035be <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003584:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800358e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2200      	movs	r2, #0
 8003594:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2220      	movs	r2, #32
 800359a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2200      	movs	r2, #0
 80035a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035aa:	f043 0204 	orr.w	r2, r3, #4
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2200      	movs	r2, #0
 80035b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e046      	b.n	800364c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035c4:	d021      	beq.n	800360a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035c6:	f7fe fdab 	bl	8002120 <HAL_GetTick>
 80035ca:	4602      	mov	r2, r0
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	1ad3      	subs	r3, r2, r3
 80035d0:	687a      	ldr	r2, [r7, #4]
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d302      	bcc.n	80035dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d116      	bne.n	800360a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2200      	movs	r2, #0
 80035e0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2220      	movs	r2, #32
 80035e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2200      	movs	r2, #0
 80035ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035f6:	f043 0220 	orr.w	r2, r3, #32
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2200      	movs	r2, #0
 8003602:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e020      	b.n	800364c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	0c1b      	lsrs	r3, r3, #16
 800360e:	b2db      	uxtb	r3, r3
 8003610:	2b01      	cmp	r3, #1
 8003612:	d10c      	bne.n	800362e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	695b      	ldr	r3, [r3, #20]
 800361a:	43da      	mvns	r2, r3
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	4013      	ands	r3, r2
 8003620:	b29b      	uxth	r3, r3
 8003622:	2b00      	cmp	r3, #0
 8003624:	bf14      	ite	ne
 8003626:	2301      	movne	r3, #1
 8003628:	2300      	moveq	r3, #0
 800362a:	b2db      	uxtb	r3, r3
 800362c:	e00b      	b.n	8003646 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	699b      	ldr	r3, [r3, #24]
 8003634:	43da      	mvns	r2, r3
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	4013      	ands	r3, r2
 800363a:	b29b      	uxth	r3, r3
 800363c:	2b00      	cmp	r3, #0
 800363e:	bf14      	ite	ne
 8003640:	2301      	movne	r3, #1
 8003642:	2300      	moveq	r3, #0
 8003644:	b2db      	uxtb	r3, r3
 8003646:	2b00      	cmp	r3, #0
 8003648:	d18d      	bne.n	8003566 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800364a:	2300      	movs	r3, #0
}
 800364c:	4618      	mov	r0, r3
 800364e:	3710      	adds	r7, #16
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}

08003654 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b084      	sub	sp, #16
 8003658:	af00      	add	r7, sp, #0
 800365a:	60f8      	str	r0, [r7, #12]
 800365c:	60b9      	str	r1, [r7, #8]
 800365e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003660:	e02d      	b.n	80036be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003662:	68f8      	ldr	r0, [r7, #12]
 8003664:	f000 f878 	bl	8003758 <I2C_IsAcknowledgeFailed>
 8003668:	4603      	mov	r3, r0
 800366a:	2b00      	cmp	r3, #0
 800366c:	d001      	beq.n	8003672 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e02d      	b.n	80036ce <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003678:	d021      	beq.n	80036be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800367a:	f7fe fd51 	bl	8002120 <HAL_GetTick>
 800367e:	4602      	mov	r2, r0
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	1ad3      	subs	r3, r2, r3
 8003684:	68ba      	ldr	r2, [r7, #8]
 8003686:	429a      	cmp	r2, r3
 8003688:	d302      	bcc.n	8003690 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d116      	bne.n	80036be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2200      	movs	r2, #0
 8003694:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2220      	movs	r2, #32
 800369a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2200      	movs	r2, #0
 80036a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036aa:	f043 0220 	orr.w	r2, r3, #32
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2200      	movs	r2, #0
 80036b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e007      	b.n	80036ce <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	695b      	ldr	r3, [r3, #20]
 80036c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036c8:	2b80      	cmp	r3, #128	@ 0x80
 80036ca:	d1ca      	bne.n	8003662 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80036cc:	2300      	movs	r3, #0
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3710      	adds	r7, #16
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}

080036d6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036d6:	b580      	push	{r7, lr}
 80036d8:	b084      	sub	sp, #16
 80036da:	af00      	add	r7, sp, #0
 80036dc:	60f8      	str	r0, [r7, #12]
 80036de:	60b9      	str	r1, [r7, #8]
 80036e0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80036e2:	e02d      	b.n	8003740 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80036e4:	68f8      	ldr	r0, [r7, #12]
 80036e6:	f000 f837 	bl	8003758 <I2C_IsAcknowledgeFailed>
 80036ea:	4603      	mov	r3, r0
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d001      	beq.n	80036f4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	e02d      	b.n	8003750 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036fa:	d021      	beq.n	8003740 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036fc:	f7fe fd10 	bl	8002120 <HAL_GetTick>
 8003700:	4602      	mov	r2, r0
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	1ad3      	subs	r3, r2, r3
 8003706:	68ba      	ldr	r2, [r7, #8]
 8003708:	429a      	cmp	r2, r3
 800370a:	d302      	bcc.n	8003712 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d116      	bne.n	8003740 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2200      	movs	r2, #0
 8003716:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2220      	movs	r2, #32
 800371c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2200      	movs	r2, #0
 8003724:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800372c:	f043 0220 	orr.w	r2, r3, #32
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2200      	movs	r2, #0
 8003738:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	e007      	b.n	8003750 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	695b      	ldr	r3, [r3, #20]
 8003746:	f003 0304 	and.w	r3, r3, #4
 800374a:	2b04      	cmp	r3, #4
 800374c:	d1ca      	bne.n	80036e4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800374e:	2300      	movs	r3, #0
}
 8003750:	4618      	mov	r0, r3
 8003752:	3710      	adds	r7, #16
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}

08003758 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003758:	b480      	push	{r7}
 800375a:	b083      	sub	sp, #12
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	695b      	ldr	r3, [r3, #20]
 8003766:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800376a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800376e:	d11b      	bne.n	80037a8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003778:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2200      	movs	r2, #0
 800377e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2220      	movs	r2, #32
 8003784:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2200      	movs	r2, #0
 800378c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003794:	f043 0204 	orr.w	r2, r3, #4
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2200      	movs	r2, #0
 80037a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	e000      	b.n	80037aa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80037a8:	2300      	movs	r3, #0
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	370c      	adds	r7, #12
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr
	...

080037b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b086      	sub	sp, #24
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d101      	bne.n	80037ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e267      	b.n	8003c9a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 0301 	and.w	r3, r3, #1
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d075      	beq.n	80038c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80037d6:	4b88      	ldr	r3, [pc, #544]	@ (80039f8 <HAL_RCC_OscConfig+0x240>)
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	f003 030c 	and.w	r3, r3, #12
 80037de:	2b04      	cmp	r3, #4
 80037e0:	d00c      	beq.n	80037fc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037e2:	4b85      	ldr	r3, [pc, #532]	@ (80039f8 <HAL_RCC_OscConfig+0x240>)
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80037ea:	2b08      	cmp	r3, #8
 80037ec:	d112      	bne.n	8003814 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037ee:	4b82      	ldr	r3, [pc, #520]	@ (80039f8 <HAL_RCC_OscConfig+0x240>)
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037f6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80037fa:	d10b      	bne.n	8003814 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037fc:	4b7e      	ldr	r3, [pc, #504]	@ (80039f8 <HAL_RCC_OscConfig+0x240>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003804:	2b00      	cmp	r3, #0
 8003806:	d05b      	beq.n	80038c0 <HAL_RCC_OscConfig+0x108>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d157      	bne.n	80038c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	e242      	b.n	8003c9a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800381c:	d106      	bne.n	800382c <HAL_RCC_OscConfig+0x74>
 800381e:	4b76      	ldr	r3, [pc, #472]	@ (80039f8 <HAL_RCC_OscConfig+0x240>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a75      	ldr	r2, [pc, #468]	@ (80039f8 <HAL_RCC_OscConfig+0x240>)
 8003824:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003828:	6013      	str	r3, [r2, #0]
 800382a:	e01d      	b.n	8003868 <HAL_RCC_OscConfig+0xb0>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003834:	d10c      	bne.n	8003850 <HAL_RCC_OscConfig+0x98>
 8003836:	4b70      	ldr	r3, [pc, #448]	@ (80039f8 <HAL_RCC_OscConfig+0x240>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a6f      	ldr	r2, [pc, #444]	@ (80039f8 <HAL_RCC_OscConfig+0x240>)
 800383c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003840:	6013      	str	r3, [r2, #0]
 8003842:	4b6d      	ldr	r3, [pc, #436]	@ (80039f8 <HAL_RCC_OscConfig+0x240>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a6c      	ldr	r2, [pc, #432]	@ (80039f8 <HAL_RCC_OscConfig+0x240>)
 8003848:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800384c:	6013      	str	r3, [r2, #0]
 800384e:	e00b      	b.n	8003868 <HAL_RCC_OscConfig+0xb0>
 8003850:	4b69      	ldr	r3, [pc, #420]	@ (80039f8 <HAL_RCC_OscConfig+0x240>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a68      	ldr	r2, [pc, #416]	@ (80039f8 <HAL_RCC_OscConfig+0x240>)
 8003856:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800385a:	6013      	str	r3, [r2, #0]
 800385c:	4b66      	ldr	r3, [pc, #408]	@ (80039f8 <HAL_RCC_OscConfig+0x240>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a65      	ldr	r2, [pc, #404]	@ (80039f8 <HAL_RCC_OscConfig+0x240>)
 8003862:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003866:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d013      	beq.n	8003898 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003870:	f7fe fc56 	bl	8002120 <HAL_GetTick>
 8003874:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003876:	e008      	b.n	800388a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003878:	f7fe fc52 	bl	8002120 <HAL_GetTick>
 800387c:	4602      	mov	r2, r0
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	1ad3      	subs	r3, r2, r3
 8003882:	2b64      	cmp	r3, #100	@ 0x64
 8003884:	d901      	bls.n	800388a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003886:	2303      	movs	r3, #3
 8003888:	e207      	b.n	8003c9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800388a:	4b5b      	ldr	r3, [pc, #364]	@ (80039f8 <HAL_RCC_OscConfig+0x240>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003892:	2b00      	cmp	r3, #0
 8003894:	d0f0      	beq.n	8003878 <HAL_RCC_OscConfig+0xc0>
 8003896:	e014      	b.n	80038c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003898:	f7fe fc42 	bl	8002120 <HAL_GetTick>
 800389c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800389e:	e008      	b.n	80038b2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038a0:	f7fe fc3e 	bl	8002120 <HAL_GetTick>
 80038a4:	4602      	mov	r2, r0
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	1ad3      	subs	r3, r2, r3
 80038aa:	2b64      	cmp	r3, #100	@ 0x64
 80038ac:	d901      	bls.n	80038b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80038ae:	2303      	movs	r3, #3
 80038b0:	e1f3      	b.n	8003c9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038b2:	4b51      	ldr	r3, [pc, #324]	@ (80039f8 <HAL_RCC_OscConfig+0x240>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d1f0      	bne.n	80038a0 <HAL_RCC_OscConfig+0xe8>
 80038be:	e000      	b.n	80038c2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 0302 	and.w	r3, r3, #2
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d063      	beq.n	8003996 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80038ce:	4b4a      	ldr	r3, [pc, #296]	@ (80039f8 <HAL_RCC_OscConfig+0x240>)
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	f003 030c 	and.w	r3, r3, #12
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d00b      	beq.n	80038f2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038da:	4b47      	ldr	r3, [pc, #284]	@ (80039f8 <HAL_RCC_OscConfig+0x240>)
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80038e2:	2b08      	cmp	r3, #8
 80038e4:	d11c      	bne.n	8003920 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038e6:	4b44      	ldr	r3, [pc, #272]	@ (80039f8 <HAL_RCC_OscConfig+0x240>)
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d116      	bne.n	8003920 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038f2:	4b41      	ldr	r3, [pc, #260]	@ (80039f8 <HAL_RCC_OscConfig+0x240>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 0302 	and.w	r3, r3, #2
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d005      	beq.n	800390a <HAL_RCC_OscConfig+0x152>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	68db      	ldr	r3, [r3, #12]
 8003902:	2b01      	cmp	r3, #1
 8003904:	d001      	beq.n	800390a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	e1c7      	b.n	8003c9a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800390a:	4b3b      	ldr	r3, [pc, #236]	@ (80039f8 <HAL_RCC_OscConfig+0x240>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	691b      	ldr	r3, [r3, #16]
 8003916:	00db      	lsls	r3, r3, #3
 8003918:	4937      	ldr	r1, [pc, #220]	@ (80039f8 <HAL_RCC_OscConfig+0x240>)
 800391a:	4313      	orrs	r3, r2
 800391c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800391e:	e03a      	b.n	8003996 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	68db      	ldr	r3, [r3, #12]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d020      	beq.n	800396a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003928:	4b34      	ldr	r3, [pc, #208]	@ (80039fc <HAL_RCC_OscConfig+0x244>)
 800392a:	2201      	movs	r2, #1
 800392c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800392e:	f7fe fbf7 	bl	8002120 <HAL_GetTick>
 8003932:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003934:	e008      	b.n	8003948 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003936:	f7fe fbf3 	bl	8002120 <HAL_GetTick>
 800393a:	4602      	mov	r2, r0
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	1ad3      	subs	r3, r2, r3
 8003940:	2b02      	cmp	r3, #2
 8003942:	d901      	bls.n	8003948 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003944:	2303      	movs	r3, #3
 8003946:	e1a8      	b.n	8003c9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003948:	4b2b      	ldr	r3, [pc, #172]	@ (80039f8 <HAL_RCC_OscConfig+0x240>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 0302 	and.w	r3, r3, #2
 8003950:	2b00      	cmp	r3, #0
 8003952:	d0f0      	beq.n	8003936 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003954:	4b28      	ldr	r3, [pc, #160]	@ (80039f8 <HAL_RCC_OscConfig+0x240>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	691b      	ldr	r3, [r3, #16]
 8003960:	00db      	lsls	r3, r3, #3
 8003962:	4925      	ldr	r1, [pc, #148]	@ (80039f8 <HAL_RCC_OscConfig+0x240>)
 8003964:	4313      	orrs	r3, r2
 8003966:	600b      	str	r3, [r1, #0]
 8003968:	e015      	b.n	8003996 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800396a:	4b24      	ldr	r3, [pc, #144]	@ (80039fc <HAL_RCC_OscConfig+0x244>)
 800396c:	2200      	movs	r2, #0
 800396e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003970:	f7fe fbd6 	bl	8002120 <HAL_GetTick>
 8003974:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003976:	e008      	b.n	800398a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003978:	f7fe fbd2 	bl	8002120 <HAL_GetTick>
 800397c:	4602      	mov	r2, r0
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	1ad3      	subs	r3, r2, r3
 8003982:	2b02      	cmp	r3, #2
 8003984:	d901      	bls.n	800398a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003986:	2303      	movs	r3, #3
 8003988:	e187      	b.n	8003c9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800398a:	4b1b      	ldr	r3, [pc, #108]	@ (80039f8 <HAL_RCC_OscConfig+0x240>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 0302 	and.w	r3, r3, #2
 8003992:	2b00      	cmp	r3, #0
 8003994:	d1f0      	bne.n	8003978 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 0308 	and.w	r3, r3, #8
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d036      	beq.n	8003a10 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	695b      	ldr	r3, [r3, #20]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d016      	beq.n	80039d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039aa:	4b15      	ldr	r3, [pc, #84]	@ (8003a00 <HAL_RCC_OscConfig+0x248>)
 80039ac:	2201      	movs	r2, #1
 80039ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039b0:	f7fe fbb6 	bl	8002120 <HAL_GetTick>
 80039b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039b6:	e008      	b.n	80039ca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039b8:	f7fe fbb2 	bl	8002120 <HAL_GetTick>
 80039bc:	4602      	mov	r2, r0
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	1ad3      	subs	r3, r2, r3
 80039c2:	2b02      	cmp	r3, #2
 80039c4:	d901      	bls.n	80039ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80039c6:	2303      	movs	r3, #3
 80039c8:	e167      	b.n	8003c9a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039ca:	4b0b      	ldr	r3, [pc, #44]	@ (80039f8 <HAL_RCC_OscConfig+0x240>)
 80039cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039ce:	f003 0302 	and.w	r3, r3, #2
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d0f0      	beq.n	80039b8 <HAL_RCC_OscConfig+0x200>
 80039d6:	e01b      	b.n	8003a10 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039d8:	4b09      	ldr	r3, [pc, #36]	@ (8003a00 <HAL_RCC_OscConfig+0x248>)
 80039da:	2200      	movs	r2, #0
 80039dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039de:	f7fe fb9f 	bl	8002120 <HAL_GetTick>
 80039e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039e4:	e00e      	b.n	8003a04 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039e6:	f7fe fb9b 	bl	8002120 <HAL_GetTick>
 80039ea:	4602      	mov	r2, r0
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	1ad3      	subs	r3, r2, r3
 80039f0:	2b02      	cmp	r3, #2
 80039f2:	d907      	bls.n	8003a04 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80039f4:	2303      	movs	r3, #3
 80039f6:	e150      	b.n	8003c9a <HAL_RCC_OscConfig+0x4e2>
 80039f8:	40023800 	.word	0x40023800
 80039fc:	42470000 	.word	0x42470000
 8003a00:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a04:	4b88      	ldr	r3, [pc, #544]	@ (8003c28 <HAL_RCC_OscConfig+0x470>)
 8003a06:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a08:	f003 0302 	and.w	r3, r3, #2
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d1ea      	bne.n	80039e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 0304 	and.w	r3, r3, #4
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	f000 8097 	beq.w	8003b4c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a22:	4b81      	ldr	r3, [pc, #516]	@ (8003c28 <HAL_RCC_OscConfig+0x470>)
 8003a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d10f      	bne.n	8003a4e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a2e:	2300      	movs	r3, #0
 8003a30:	60bb      	str	r3, [r7, #8]
 8003a32:	4b7d      	ldr	r3, [pc, #500]	@ (8003c28 <HAL_RCC_OscConfig+0x470>)
 8003a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a36:	4a7c      	ldr	r2, [pc, #496]	@ (8003c28 <HAL_RCC_OscConfig+0x470>)
 8003a38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a3e:	4b7a      	ldr	r3, [pc, #488]	@ (8003c28 <HAL_RCC_OscConfig+0x470>)
 8003a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a46:	60bb      	str	r3, [r7, #8]
 8003a48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a4e:	4b77      	ldr	r3, [pc, #476]	@ (8003c2c <HAL_RCC_OscConfig+0x474>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d118      	bne.n	8003a8c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a5a:	4b74      	ldr	r3, [pc, #464]	@ (8003c2c <HAL_RCC_OscConfig+0x474>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a73      	ldr	r2, [pc, #460]	@ (8003c2c <HAL_RCC_OscConfig+0x474>)
 8003a60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a66:	f7fe fb5b 	bl	8002120 <HAL_GetTick>
 8003a6a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a6c:	e008      	b.n	8003a80 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a6e:	f7fe fb57 	bl	8002120 <HAL_GetTick>
 8003a72:	4602      	mov	r2, r0
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	1ad3      	subs	r3, r2, r3
 8003a78:	2b02      	cmp	r3, #2
 8003a7a:	d901      	bls.n	8003a80 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003a7c:	2303      	movs	r3, #3
 8003a7e:	e10c      	b.n	8003c9a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a80:	4b6a      	ldr	r3, [pc, #424]	@ (8003c2c <HAL_RCC_OscConfig+0x474>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d0f0      	beq.n	8003a6e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d106      	bne.n	8003aa2 <HAL_RCC_OscConfig+0x2ea>
 8003a94:	4b64      	ldr	r3, [pc, #400]	@ (8003c28 <HAL_RCC_OscConfig+0x470>)
 8003a96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a98:	4a63      	ldr	r2, [pc, #396]	@ (8003c28 <HAL_RCC_OscConfig+0x470>)
 8003a9a:	f043 0301 	orr.w	r3, r3, #1
 8003a9e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003aa0:	e01c      	b.n	8003adc <HAL_RCC_OscConfig+0x324>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	2b05      	cmp	r3, #5
 8003aa8:	d10c      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x30c>
 8003aaa:	4b5f      	ldr	r3, [pc, #380]	@ (8003c28 <HAL_RCC_OscConfig+0x470>)
 8003aac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003aae:	4a5e      	ldr	r2, [pc, #376]	@ (8003c28 <HAL_RCC_OscConfig+0x470>)
 8003ab0:	f043 0304 	orr.w	r3, r3, #4
 8003ab4:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ab6:	4b5c      	ldr	r3, [pc, #368]	@ (8003c28 <HAL_RCC_OscConfig+0x470>)
 8003ab8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003aba:	4a5b      	ldr	r2, [pc, #364]	@ (8003c28 <HAL_RCC_OscConfig+0x470>)
 8003abc:	f043 0301 	orr.w	r3, r3, #1
 8003ac0:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ac2:	e00b      	b.n	8003adc <HAL_RCC_OscConfig+0x324>
 8003ac4:	4b58      	ldr	r3, [pc, #352]	@ (8003c28 <HAL_RCC_OscConfig+0x470>)
 8003ac6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ac8:	4a57      	ldr	r2, [pc, #348]	@ (8003c28 <HAL_RCC_OscConfig+0x470>)
 8003aca:	f023 0301 	bic.w	r3, r3, #1
 8003ace:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ad0:	4b55      	ldr	r3, [pc, #340]	@ (8003c28 <HAL_RCC_OscConfig+0x470>)
 8003ad2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ad4:	4a54      	ldr	r2, [pc, #336]	@ (8003c28 <HAL_RCC_OscConfig+0x470>)
 8003ad6:	f023 0304 	bic.w	r3, r3, #4
 8003ada:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d015      	beq.n	8003b10 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ae4:	f7fe fb1c 	bl	8002120 <HAL_GetTick>
 8003ae8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003aea:	e00a      	b.n	8003b02 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003aec:	f7fe fb18 	bl	8002120 <HAL_GetTick>
 8003af0:	4602      	mov	r2, r0
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	1ad3      	subs	r3, r2, r3
 8003af6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d901      	bls.n	8003b02 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003afe:	2303      	movs	r3, #3
 8003b00:	e0cb      	b.n	8003c9a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b02:	4b49      	ldr	r3, [pc, #292]	@ (8003c28 <HAL_RCC_OscConfig+0x470>)
 8003b04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b06:	f003 0302 	and.w	r3, r3, #2
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d0ee      	beq.n	8003aec <HAL_RCC_OscConfig+0x334>
 8003b0e:	e014      	b.n	8003b3a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b10:	f7fe fb06 	bl	8002120 <HAL_GetTick>
 8003b14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b16:	e00a      	b.n	8003b2e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b18:	f7fe fb02 	bl	8002120 <HAL_GetTick>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	1ad3      	subs	r3, r2, r3
 8003b22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d901      	bls.n	8003b2e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	e0b5      	b.n	8003c9a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b2e:	4b3e      	ldr	r3, [pc, #248]	@ (8003c28 <HAL_RCC_OscConfig+0x470>)
 8003b30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b32:	f003 0302 	and.w	r3, r3, #2
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d1ee      	bne.n	8003b18 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b3a:	7dfb      	ldrb	r3, [r7, #23]
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	d105      	bne.n	8003b4c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b40:	4b39      	ldr	r3, [pc, #228]	@ (8003c28 <HAL_RCC_OscConfig+0x470>)
 8003b42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b44:	4a38      	ldr	r2, [pc, #224]	@ (8003c28 <HAL_RCC_OscConfig+0x470>)
 8003b46:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b4a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	699b      	ldr	r3, [r3, #24]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	f000 80a1 	beq.w	8003c98 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b56:	4b34      	ldr	r3, [pc, #208]	@ (8003c28 <HAL_RCC_OscConfig+0x470>)
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	f003 030c 	and.w	r3, r3, #12
 8003b5e:	2b08      	cmp	r3, #8
 8003b60:	d05c      	beq.n	8003c1c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	699b      	ldr	r3, [r3, #24]
 8003b66:	2b02      	cmp	r3, #2
 8003b68:	d141      	bne.n	8003bee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b6a:	4b31      	ldr	r3, [pc, #196]	@ (8003c30 <HAL_RCC_OscConfig+0x478>)
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b70:	f7fe fad6 	bl	8002120 <HAL_GetTick>
 8003b74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b76:	e008      	b.n	8003b8a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b78:	f7fe fad2 	bl	8002120 <HAL_GetTick>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	1ad3      	subs	r3, r2, r3
 8003b82:	2b02      	cmp	r3, #2
 8003b84:	d901      	bls.n	8003b8a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003b86:	2303      	movs	r3, #3
 8003b88:	e087      	b.n	8003c9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b8a:	4b27      	ldr	r3, [pc, #156]	@ (8003c28 <HAL_RCC_OscConfig+0x470>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d1f0      	bne.n	8003b78 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	69da      	ldr	r2, [r3, #28]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6a1b      	ldr	r3, [r3, #32]
 8003b9e:	431a      	orrs	r2, r3
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ba4:	019b      	lsls	r3, r3, #6
 8003ba6:	431a      	orrs	r2, r3
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bac:	085b      	lsrs	r3, r3, #1
 8003bae:	3b01      	subs	r3, #1
 8003bb0:	041b      	lsls	r3, r3, #16
 8003bb2:	431a      	orrs	r2, r3
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bb8:	061b      	lsls	r3, r3, #24
 8003bba:	491b      	ldr	r1, [pc, #108]	@ (8003c28 <HAL_RCC_OscConfig+0x470>)
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003bc0:	4b1b      	ldr	r3, [pc, #108]	@ (8003c30 <HAL_RCC_OscConfig+0x478>)
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bc6:	f7fe faab 	bl	8002120 <HAL_GetTick>
 8003bca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bcc:	e008      	b.n	8003be0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bce:	f7fe faa7 	bl	8002120 <HAL_GetTick>
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	1ad3      	subs	r3, r2, r3
 8003bd8:	2b02      	cmp	r3, #2
 8003bda:	d901      	bls.n	8003be0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003bdc:	2303      	movs	r3, #3
 8003bde:	e05c      	b.n	8003c9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003be0:	4b11      	ldr	r3, [pc, #68]	@ (8003c28 <HAL_RCC_OscConfig+0x470>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d0f0      	beq.n	8003bce <HAL_RCC_OscConfig+0x416>
 8003bec:	e054      	b.n	8003c98 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bee:	4b10      	ldr	r3, [pc, #64]	@ (8003c30 <HAL_RCC_OscConfig+0x478>)
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bf4:	f7fe fa94 	bl	8002120 <HAL_GetTick>
 8003bf8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bfa:	e008      	b.n	8003c0e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bfc:	f7fe fa90 	bl	8002120 <HAL_GetTick>
 8003c00:	4602      	mov	r2, r0
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	1ad3      	subs	r3, r2, r3
 8003c06:	2b02      	cmp	r3, #2
 8003c08:	d901      	bls.n	8003c0e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003c0a:	2303      	movs	r3, #3
 8003c0c:	e045      	b.n	8003c9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c0e:	4b06      	ldr	r3, [pc, #24]	@ (8003c28 <HAL_RCC_OscConfig+0x470>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d1f0      	bne.n	8003bfc <HAL_RCC_OscConfig+0x444>
 8003c1a:	e03d      	b.n	8003c98 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	699b      	ldr	r3, [r3, #24]
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d107      	bne.n	8003c34 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	e038      	b.n	8003c9a <HAL_RCC_OscConfig+0x4e2>
 8003c28:	40023800 	.word	0x40023800
 8003c2c:	40007000 	.word	0x40007000
 8003c30:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003c34:	4b1b      	ldr	r3, [pc, #108]	@ (8003ca4 <HAL_RCC_OscConfig+0x4ec>)
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	699b      	ldr	r3, [r3, #24]
 8003c3e:	2b01      	cmp	r3, #1
 8003c40:	d028      	beq.n	8003c94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d121      	bne.n	8003c94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	d11a      	bne.n	8003c94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c5e:	68fa      	ldr	r2, [r7, #12]
 8003c60:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003c64:	4013      	ands	r3, r2
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003c6a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d111      	bne.n	8003c94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c7a:	085b      	lsrs	r3, r3, #1
 8003c7c:	3b01      	subs	r3, #1
 8003c7e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d107      	bne.n	8003c94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c8e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d001      	beq.n	8003c98 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	e000      	b.n	8003c9a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003c98:	2300      	movs	r3, #0
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	3718      	adds	r7, #24
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}
 8003ca2:	bf00      	nop
 8003ca4:	40023800 	.word	0x40023800

08003ca8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b084      	sub	sp, #16
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
 8003cb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d101      	bne.n	8003cbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	e0cc      	b.n	8003e56 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003cbc:	4b68      	ldr	r3, [pc, #416]	@ (8003e60 <HAL_RCC_ClockConfig+0x1b8>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f003 0307 	and.w	r3, r3, #7
 8003cc4:	683a      	ldr	r2, [r7, #0]
 8003cc6:	429a      	cmp	r2, r3
 8003cc8:	d90c      	bls.n	8003ce4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cca:	4b65      	ldr	r3, [pc, #404]	@ (8003e60 <HAL_RCC_ClockConfig+0x1b8>)
 8003ccc:	683a      	ldr	r2, [r7, #0]
 8003cce:	b2d2      	uxtb	r2, r2
 8003cd0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cd2:	4b63      	ldr	r3, [pc, #396]	@ (8003e60 <HAL_RCC_ClockConfig+0x1b8>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 0307 	and.w	r3, r3, #7
 8003cda:	683a      	ldr	r2, [r7, #0]
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d001      	beq.n	8003ce4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	e0b8      	b.n	8003e56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 0302 	and.w	r3, r3, #2
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d020      	beq.n	8003d32 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 0304 	and.w	r3, r3, #4
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d005      	beq.n	8003d08 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003cfc:	4b59      	ldr	r3, [pc, #356]	@ (8003e64 <HAL_RCC_ClockConfig+0x1bc>)
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	4a58      	ldr	r2, [pc, #352]	@ (8003e64 <HAL_RCC_ClockConfig+0x1bc>)
 8003d02:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003d06:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f003 0308 	and.w	r3, r3, #8
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d005      	beq.n	8003d20 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d14:	4b53      	ldr	r3, [pc, #332]	@ (8003e64 <HAL_RCC_ClockConfig+0x1bc>)
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	4a52      	ldr	r2, [pc, #328]	@ (8003e64 <HAL_RCC_ClockConfig+0x1bc>)
 8003d1a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003d1e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d20:	4b50      	ldr	r3, [pc, #320]	@ (8003e64 <HAL_RCC_ClockConfig+0x1bc>)
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	494d      	ldr	r1, [pc, #308]	@ (8003e64 <HAL_RCC_ClockConfig+0x1bc>)
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f003 0301 	and.w	r3, r3, #1
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d044      	beq.n	8003dc8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	2b01      	cmp	r3, #1
 8003d44:	d107      	bne.n	8003d56 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d46:	4b47      	ldr	r3, [pc, #284]	@ (8003e64 <HAL_RCC_ClockConfig+0x1bc>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d119      	bne.n	8003d86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	e07f      	b.n	8003e56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	2b02      	cmp	r3, #2
 8003d5c:	d003      	beq.n	8003d66 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d62:	2b03      	cmp	r3, #3
 8003d64:	d107      	bne.n	8003d76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d66:	4b3f      	ldr	r3, [pc, #252]	@ (8003e64 <HAL_RCC_ClockConfig+0x1bc>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d109      	bne.n	8003d86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e06f      	b.n	8003e56 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d76:	4b3b      	ldr	r3, [pc, #236]	@ (8003e64 <HAL_RCC_ClockConfig+0x1bc>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f003 0302 	and.w	r3, r3, #2
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d101      	bne.n	8003d86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	e067      	b.n	8003e56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d86:	4b37      	ldr	r3, [pc, #220]	@ (8003e64 <HAL_RCC_ClockConfig+0x1bc>)
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	f023 0203 	bic.w	r2, r3, #3
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	4934      	ldr	r1, [pc, #208]	@ (8003e64 <HAL_RCC_ClockConfig+0x1bc>)
 8003d94:	4313      	orrs	r3, r2
 8003d96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d98:	f7fe f9c2 	bl	8002120 <HAL_GetTick>
 8003d9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d9e:	e00a      	b.n	8003db6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003da0:	f7fe f9be 	bl	8002120 <HAL_GetTick>
 8003da4:	4602      	mov	r2, r0
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	1ad3      	subs	r3, r2, r3
 8003daa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d901      	bls.n	8003db6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003db2:	2303      	movs	r3, #3
 8003db4:	e04f      	b.n	8003e56 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003db6:	4b2b      	ldr	r3, [pc, #172]	@ (8003e64 <HAL_RCC_ClockConfig+0x1bc>)
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	f003 020c 	and.w	r2, r3, #12
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	009b      	lsls	r3, r3, #2
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d1eb      	bne.n	8003da0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003dc8:	4b25      	ldr	r3, [pc, #148]	@ (8003e60 <HAL_RCC_ClockConfig+0x1b8>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 0307 	and.w	r3, r3, #7
 8003dd0:	683a      	ldr	r2, [r7, #0]
 8003dd2:	429a      	cmp	r2, r3
 8003dd4:	d20c      	bcs.n	8003df0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dd6:	4b22      	ldr	r3, [pc, #136]	@ (8003e60 <HAL_RCC_ClockConfig+0x1b8>)
 8003dd8:	683a      	ldr	r2, [r7, #0]
 8003dda:	b2d2      	uxtb	r2, r2
 8003ddc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dde:	4b20      	ldr	r3, [pc, #128]	@ (8003e60 <HAL_RCC_ClockConfig+0x1b8>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 0307 	and.w	r3, r3, #7
 8003de6:	683a      	ldr	r2, [r7, #0]
 8003de8:	429a      	cmp	r2, r3
 8003dea:	d001      	beq.n	8003df0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	e032      	b.n	8003e56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f003 0304 	and.w	r3, r3, #4
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d008      	beq.n	8003e0e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003dfc:	4b19      	ldr	r3, [pc, #100]	@ (8003e64 <HAL_RCC_ClockConfig+0x1bc>)
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	68db      	ldr	r3, [r3, #12]
 8003e08:	4916      	ldr	r1, [pc, #88]	@ (8003e64 <HAL_RCC_ClockConfig+0x1bc>)
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 0308 	and.w	r3, r3, #8
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d009      	beq.n	8003e2e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e1a:	4b12      	ldr	r3, [pc, #72]	@ (8003e64 <HAL_RCC_ClockConfig+0x1bc>)
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	691b      	ldr	r3, [r3, #16]
 8003e26:	00db      	lsls	r3, r3, #3
 8003e28:	490e      	ldr	r1, [pc, #56]	@ (8003e64 <HAL_RCC_ClockConfig+0x1bc>)
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003e2e:	f000 f821 	bl	8003e74 <HAL_RCC_GetSysClockFreq>
 8003e32:	4602      	mov	r2, r0
 8003e34:	4b0b      	ldr	r3, [pc, #44]	@ (8003e64 <HAL_RCC_ClockConfig+0x1bc>)
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	091b      	lsrs	r3, r3, #4
 8003e3a:	f003 030f 	and.w	r3, r3, #15
 8003e3e:	490a      	ldr	r1, [pc, #40]	@ (8003e68 <HAL_RCC_ClockConfig+0x1c0>)
 8003e40:	5ccb      	ldrb	r3, [r1, r3]
 8003e42:	fa22 f303 	lsr.w	r3, r2, r3
 8003e46:	4a09      	ldr	r2, [pc, #36]	@ (8003e6c <HAL_RCC_ClockConfig+0x1c4>)
 8003e48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003e4a:	4b09      	ldr	r3, [pc, #36]	@ (8003e70 <HAL_RCC_ClockConfig+0x1c8>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f7fe f922 	bl	8002098 <HAL_InitTick>

  return HAL_OK;
 8003e54:	2300      	movs	r3, #0
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3710      	adds	r7, #16
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}
 8003e5e:	bf00      	nop
 8003e60:	40023c00 	.word	0x40023c00
 8003e64:	40023800 	.word	0x40023800
 8003e68:	08004b1c 	.word	0x08004b1c
 8003e6c:	20000000 	.word	0x20000000
 8003e70:	20000004 	.word	0x20000004

08003e74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e78:	b090      	sub	sp, #64	@ 0x40
 8003e7a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e80:	2300      	movs	r3, #0
 8003e82:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003e84:	2300      	movs	r3, #0
 8003e86:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e8c:	4b59      	ldr	r3, [pc, #356]	@ (8003ff4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	f003 030c 	and.w	r3, r3, #12
 8003e94:	2b08      	cmp	r3, #8
 8003e96:	d00d      	beq.n	8003eb4 <HAL_RCC_GetSysClockFreq+0x40>
 8003e98:	2b08      	cmp	r3, #8
 8003e9a:	f200 80a1 	bhi.w	8003fe0 <HAL_RCC_GetSysClockFreq+0x16c>
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d002      	beq.n	8003ea8 <HAL_RCC_GetSysClockFreq+0x34>
 8003ea2:	2b04      	cmp	r3, #4
 8003ea4:	d003      	beq.n	8003eae <HAL_RCC_GetSysClockFreq+0x3a>
 8003ea6:	e09b      	b.n	8003fe0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ea8:	4b53      	ldr	r3, [pc, #332]	@ (8003ff8 <HAL_RCC_GetSysClockFreq+0x184>)
 8003eaa:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8003eac:	e09b      	b.n	8003fe6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003eae:	4b53      	ldr	r3, [pc, #332]	@ (8003ffc <HAL_RCC_GetSysClockFreq+0x188>)
 8003eb0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003eb2:	e098      	b.n	8003fe6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003eb4:	4b4f      	ldr	r3, [pc, #316]	@ (8003ff4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003ebc:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ebe:	4b4d      	ldr	r3, [pc, #308]	@ (8003ff4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d028      	beq.n	8003f1c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003eca:	4b4a      	ldr	r3, [pc, #296]	@ (8003ff4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	099b      	lsrs	r3, r3, #6
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	623b      	str	r3, [r7, #32]
 8003ed4:	627a      	str	r2, [r7, #36]	@ 0x24
 8003ed6:	6a3b      	ldr	r3, [r7, #32]
 8003ed8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003edc:	2100      	movs	r1, #0
 8003ede:	4b47      	ldr	r3, [pc, #284]	@ (8003ffc <HAL_RCC_GetSysClockFreq+0x188>)
 8003ee0:	fb03 f201 	mul.w	r2, r3, r1
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	fb00 f303 	mul.w	r3, r0, r3
 8003eea:	4413      	add	r3, r2
 8003eec:	4a43      	ldr	r2, [pc, #268]	@ (8003ffc <HAL_RCC_GetSysClockFreq+0x188>)
 8003eee:	fba0 1202 	umull	r1, r2, r0, r2
 8003ef2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003ef4:	460a      	mov	r2, r1
 8003ef6:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003ef8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003efa:	4413      	add	r3, r2
 8003efc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003efe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f00:	2200      	movs	r2, #0
 8003f02:	61bb      	str	r3, [r7, #24]
 8003f04:	61fa      	str	r2, [r7, #28]
 8003f06:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f0a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003f0e:	f7fc f963 	bl	80001d8 <__aeabi_uldivmod>
 8003f12:	4602      	mov	r2, r0
 8003f14:	460b      	mov	r3, r1
 8003f16:	4613      	mov	r3, r2
 8003f18:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f1a:	e053      	b.n	8003fc4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f1c:	4b35      	ldr	r3, [pc, #212]	@ (8003ff4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	099b      	lsrs	r3, r3, #6
 8003f22:	2200      	movs	r2, #0
 8003f24:	613b      	str	r3, [r7, #16]
 8003f26:	617a      	str	r2, [r7, #20]
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003f2e:	f04f 0b00 	mov.w	fp, #0
 8003f32:	4652      	mov	r2, sl
 8003f34:	465b      	mov	r3, fp
 8003f36:	f04f 0000 	mov.w	r0, #0
 8003f3a:	f04f 0100 	mov.w	r1, #0
 8003f3e:	0159      	lsls	r1, r3, #5
 8003f40:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f44:	0150      	lsls	r0, r2, #5
 8003f46:	4602      	mov	r2, r0
 8003f48:	460b      	mov	r3, r1
 8003f4a:	ebb2 080a 	subs.w	r8, r2, sl
 8003f4e:	eb63 090b 	sbc.w	r9, r3, fp
 8003f52:	f04f 0200 	mov.w	r2, #0
 8003f56:	f04f 0300 	mov.w	r3, #0
 8003f5a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003f5e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003f62:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003f66:	ebb2 0408 	subs.w	r4, r2, r8
 8003f6a:	eb63 0509 	sbc.w	r5, r3, r9
 8003f6e:	f04f 0200 	mov.w	r2, #0
 8003f72:	f04f 0300 	mov.w	r3, #0
 8003f76:	00eb      	lsls	r3, r5, #3
 8003f78:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f7c:	00e2      	lsls	r2, r4, #3
 8003f7e:	4614      	mov	r4, r2
 8003f80:	461d      	mov	r5, r3
 8003f82:	eb14 030a 	adds.w	r3, r4, sl
 8003f86:	603b      	str	r3, [r7, #0]
 8003f88:	eb45 030b 	adc.w	r3, r5, fp
 8003f8c:	607b      	str	r3, [r7, #4]
 8003f8e:	f04f 0200 	mov.w	r2, #0
 8003f92:	f04f 0300 	mov.w	r3, #0
 8003f96:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003f9a:	4629      	mov	r1, r5
 8003f9c:	028b      	lsls	r3, r1, #10
 8003f9e:	4621      	mov	r1, r4
 8003fa0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003fa4:	4621      	mov	r1, r4
 8003fa6:	028a      	lsls	r2, r1, #10
 8003fa8:	4610      	mov	r0, r2
 8003faa:	4619      	mov	r1, r3
 8003fac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fae:	2200      	movs	r2, #0
 8003fb0:	60bb      	str	r3, [r7, #8]
 8003fb2:	60fa      	str	r2, [r7, #12]
 8003fb4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003fb8:	f7fc f90e 	bl	80001d8 <__aeabi_uldivmod>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	460b      	mov	r3, r1
 8003fc0:	4613      	mov	r3, r2
 8003fc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003fc4:	4b0b      	ldr	r3, [pc, #44]	@ (8003ff4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	0c1b      	lsrs	r3, r3, #16
 8003fca:	f003 0303 	and.w	r3, r3, #3
 8003fce:	3301      	adds	r3, #1
 8003fd0:	005b      	lsls	r3, r3, #1
 8003fd2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8003fd4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003fd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fdc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003fde:	e002      	b.n	8003fe6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003fe0:	4b05      	ldr	r3, [pc, #20]	@ (8003ff8 <HAL_RCC_GetSysClockFreq+0x184>)
 8003fe2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003fe4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003fe6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3740      	adds	r7, #64	@ 0x40
 8003fec:	46bd      	mov	sp, r7
 8003fee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ff2:	bf00      	nop
 8003ff4:	40023800 	.word	0x40023800
 8003ff8:	00f42400 	.word	0x00f42400
 8003ffc:	017d7840 	.word	0x017d7840

08004000 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004000:	b480      	push	{r7}
 8004002:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004004:	4b03      	ldr	r3, [pc, #12]	@ (8004014 <HAL_RCC_GetHCLKFreq+0x14>)
 8004006:	681b      	ldr	r3, [r3, #0]
}
 8004008:	4618      	mov	r0, r3
 800400a:	46bd      	mov	sp, r7
 800400c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004010:	4770      	bx	lr
 8004012:	bf00      	nop
 8004014:	20000000 	.word	0x20000000

08004018 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800401c:	f7ff fff0 	bl	8004000 <HAL_RCC_GetHCLKFreq>
 8004020:	4602      	mov	r2, r0
 8004022:	4b05      	ldr	r3, [pc, #20]	@ (8004038 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	0a9b      	lsrs	r3, r3, #10
 8004028:	f003 0307 	and.w	r3, r3, #7
 800402c:	4903      	ldr	r1, [pc, #12]	@ (800403c <HAL_RCC_GetPCLK1Freq+0x24>)
 800402e:	5ccb      	ldrb	r3, [r1, r3]
 8004030:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004034:	4618      	mov	r0, r3
 8004036:	bd80      	pop	{r7, pc}
 8004038:	40023800 	.word	0x40023800
 800403c:	08004b2c 	.word	0x08004b2c

08004040 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004044:	f7ff ffdc 	bl	8004000 <HAL_RCC_GetHCLKFreq>
 8004048:	4602      	mov	r2, r0
 800404a:	4b05      	ldr	r3, [pc, #20]	@ (8004060 <HAL_RCC_GetPCLK2Freq+0x20>)
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	0b5b      	lsrs	r3, r3, #13
 8004050:	f003 0307 	and.w	r3, r3, #7
 8004054:	4903      	ldr	r1, [pc, #12]	@ (8004064 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004056:	5ccb      	ldrb	r3, [r1, r3]
 8004058:	fa22 f303 	lsr.w	r3, r2, r3
}
 800405c:	4618      	mov	r0, r3
 800405e:	bd80      	pop	{r7, pc}
 8004060:	40023800 	.word	0x40023800
 8004064:	08004b2c 	.word	0x08004b2c

08004068 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b082      	sub	sp, #8
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d101      	bne.n	800407a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	e07b      	b.n	8004172 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800407e:	2b00      	cmp	r3, #0
 8004080:	d108      	bne.n	8004094 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800408a:	d009      	beq.n	80040a0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2200      	movs	r2, #0
 8004090:	61da      	str	r2, [r3, #28]
 8004092:	e005      	b.n	80040a0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2200      	movs	r2, #0
 8004098:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2200      	movs	r2, #0
 800409e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2200      	movs	r2, #0
 80040a4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d106      	bne.n	80040c0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2200      	movs	r2, #0
 80040b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f7fd fdac 	bl	8001c18 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2202      	movs	r2, #2
 80040c4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80040d6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80040e8:	431a      	orrs	r2, r3
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	68db      	ldr	r3, [r3, #12]
 80040ee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80040f2:	431a      	orrs	r2, r3
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	691b      	ldr	r3, [r3, #16]
 80040f8:	f003 0302 	and.w	r3, r3, #2
 80040fc:	431a      	orrs	r2, r3
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	695b      	ldr	r3, [r3, #20]
 8004102:	f003 0301 	and.w	r3, r3, #1
 8004106:	431a      	orrs	r2, r3
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	699b      	ldr	r3, [r3, #24]
 800410c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004110:	431a      	orrs	r2, r3
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	69db      	ldr	r3, [r3, #28]
 8004116:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800411a:	431a      	orrs	r2, r3
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6a1b      	ldr	r3, [r3, #32]
 8004120:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004124:	ea42 0103 	orr.w	r1, r2, r3
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800412c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	430a      	orrs	r2, r1
 8004136:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	699b      	ldr	r3, [r3, #24]
 800413c:	0c1b      	lsrs	r3, r3, #16
 800413e:	f003 0104 	and.w	r1, r3, #4
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004146:	f003 0210 	and.w	r2, r3, #16
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	430a      	orrs	r2, r1
 8004150:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	69da      	ldr	r2, [r3, #28]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004160:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2200      	movs	r2, #0
 8004166:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2201      	movs	r2, #1
 800416c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004170:	2300      	movs	r3, #0
}
 8004172:	4618      	mov	r0, r3
 8004174:	3708      	adds	r7, #8
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}

0800417a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800417a:	b580      	push	{r7, lr}
 800417c:	b082      	sub	sp, #8
 800417e:	af00      	add	r7, sp, #0
 8004180:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d101      	bne.n	800418c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004188:	2301      	movs	r3, #1
 800418a:	e03f      	b.n	800420c <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004192:	b2db      	uxtb	r3, r3
 8004194:	2b00      	cmp	r3, #0
 8004196:	d106      	bne.n	80041a6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2200      	movs	r2, #0
 800419c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	f7fd fda1 	bl	8001ce8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2224      	movs	r2, #36	@ 0x24
 80041aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	68da      	ldr	r2, [r3, #12]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80041bc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f000 f828 	bl	8004214 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	691a      	ldr	r2, [r3, #16]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80041d2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	695a      	ldr	r2, [r3, #20]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80041e2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	68da      	ldr	r2, [r3, #12]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80041f2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2200      	movs	r2, #0
 80041f8:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2220      	movs	r2, #32
 80041fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2220      	movs	r2, #32
 8004206:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800420a:	2300      	movs	r3, #0
}
 800420c:	4618      	mov	r0, r3
 800420e:	3708      	adds	r7, #8
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}

08004214 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004214:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004218:	b0c0      	sub	sp, #256	@ 0x100
 800421a:	af00      	add	r7, sp, #0
 800421c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004220:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	691b      	ldr	r3, [r3, #16]
 8004228:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800422c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004230:	68d9      	ldr	r1, [r3, #12]
 8004232:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	ea40 0301 	orr.w	r3, r0, r1
 800423c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800423e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004242:	689a      	ldr	r2, [r3, #8]
 8004244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004248:	691b      	ldr	r3, [r3, #16]
 800424a:	431a      	orrs	r2, r3
 800424c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004250:	695b      	ldr	r3, [r3, #20]
 8004252:	431a      	orrs	r2, r3
 8004254:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004258:	69db      	ldr	r3, [r3, #28]
 800425a:	4313      	orrs	r3, r2
 800425c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004260:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	68db      	ldr	r3, [r3, #12]
 8004268:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800426c:	f021 010c 	bic.w	r1, r1, #12
 8004270:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800427a:	430b      	orrs	r3, r1
 800427c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800427e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	695b      	ldr	r3, [r3, #20]
 8004286:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800428a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800428e:	6999      	ldr	r1, [r3, #24]
 8004290:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	ea40 0301 	orr.w	r3, r0, r1
 800429a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800429c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	4b8f      	ldr	r3, [pc, #572]	@ (80044e0 <UART_SetConfig+0x2cc>)
 80042a4:	429a      	cmp	r2, r3
 80042a6:	d005      	beq.n	80042b4 <UART_SetConfig+0xa0>
 80042a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	4b8d      	ldr	r3, [pc, #564]	@ (80044e4 <UART_SetConfig+0x2d0>)
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d104      	bne.n	80042be <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80042b4:	f7ff fec4 	bl	8004040 <HAL_RCC_GetPCLK2Freq>
 80042b8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80042bc:	e003      	b.n	80042c6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80042be:	f7ff feab 	bl	8004018 <HAL_RCC_GetPCLK1Freq>
 80042c2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80042c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042ca:	69db      	ldr	r3, [r3, #28]
 80042cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80042d0:	f040 810c 	bne.w	80044ec <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80042d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80042d8:	2200      	movs	r2, #0
 80042da:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80042de:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80042e2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80042e6:	4622      	mov	r2, r4
 80042e8:	462b      	mov	r3, r5
 80042ea:	1891      	adds	r1, r2, r2
 80042ec:	65b9      	str	r1, [r7, #88]	@ 0x58
 80042ee:	415b      	adcs	r3, r3
 80042f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80042f2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80042f6:	4621      	mov	r1, r4
 80042f8:	eb12 0801 	adds.w	r8, r2, r1
 80042fc:	4629      	mov	r1, r5
 80042fe:	eb43 0901 	adc.w	r9, r3, r1
 8004302:	f04f 0200 	mov.w	r2, #0
 8004306:	f04f 0300 	mov.w	r3, #0
 800430a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800430e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004312:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004316:	4690      	mov	r8, r2
 8004318:	4699      	mov	r9, r3
 800431a:	4623      	mov	r3, r4
 800431c:	eb18 0303 	adds.w	r3, r8, r3
 8004320:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004324:	462b      	mov	r3, r5
 8004326:	eb49 0303 	adc.w	r3, r9, r3
 800432a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800432e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	2200      	movs	r2, #0
 8004336:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800433a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800433e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004342:	460b      	mov	r3, r1
 8004344:	18db      	adds	r3, r3, r3
 8004346:	653b      	str	r3, [r7, #80]	@ 0x50
 8004348:	4613      	mov	r3, r2
 800434a:	eb42 0303 	adc.w	r3, r2, r3
 800434e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004350:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004354:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004358:	f7fb ff3e 	bl	80001d8 <__aeabi_uldivmod>
 800435c:	4602      	mov	r2, r0
 800435e:	460b      	mov	r3, r1
 8004360:	4b61      	ldr	r3, [pc, #388]	@ (80044e8 <UART_SetConfig+0x2d4>)
 8004362:	fba3 2302 	umull	r2, r3, r3, r2
 8004366:	095b      	lsrs	r3, r3, #5
 8004368:	011c      	lsls	r4, r3, #4
 800436a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800436e:	2200      	movs	r2, #0
 8004370:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004374:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004378:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800437c:	4642      	mov	r2, r8
 800437e:	464b      	mov	r3, r9
 8004380:	1891      	adds	r1, r2, r2
 8004382:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004384:	415b      	adcs	r3, r3
 8004386:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004388:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800438c:	4641      	mov	r1, r8
 800438e:	eb12 0a01 	adds.w	sl, r2, r1
 8004392:	4649      	mov	r1, r9
 8004394:	eb43 0b01 	adc.w	fp, r3, r1
 8004398:	f04f 0200 	mov.w	r2, #0
 800439c:	f04f 0300 	mov.w	r3, #0
 80043a0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80043a4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80043a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80043ac:	4692      	mov	sl, r2
 80043ae:	469b      	mov	fp, r3
 80043b0:	4643      	mov	r3, r8
 80043b2:	eb1a 0303 	adds.w	r3, sl, r3
 80043b6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80043ba:	464b      	mov	r3, r9
 80043bc:	eb4b 0303 	adc.w	r3, fp, r3
 80043c0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80043c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	2200      	movs	r2, #0
 80043cc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80043d0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80043d4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80043d8:	460b      	mov	r3, r1
 80043da:	18db      	adds	r3, r3, r3
 80043dc:	643b      	str	r3, [r7, #64]	@ 0x40
 80043de:	4613      	mov	r3, r2
 80043e0:	eb42 0303 	adc.w	r3, r2, r3
 80043e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80043e6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80043ea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80043ee:	f7fb fef3 	bl	80001d8 <__aeabi_uldivmod>
 80043f2:	4602      	mov	r2, r0
 80043f4:	460b      	mov	r3, r1
 80043f6:	4611      	mov	r1, r2
 80043f8:	4b3b      	ldr	r3, [pc, #236]	@ (80044e8 <UART_SetConfig+0x2d4>)
 80043fa:	fba3 2301 	umull	r2, r3, r3, r1
 80043fe:	095b      	lsrs	r3, r3, #5
 8004400:	2264      	movs	r2, #100	@ 0x64
 8004402:	fb02 f303 	mul.w	r3, r2, r3
 8004406:	1acb      	subs	r3, r1, r3
 8004408:	00db      	lsls	r3, r3, #3
 800440a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800440e:	4b36      	ldr	r3, [pc, #216]	@ (80044e8 <UART_SetConfig+0x2d4>)
 8004410:	fba3 2302 	umull	r2, r3, r3, r2
 8004414:	095b      	lsrs	r3, r3, #5
 8004416:	005b      	lsls	r3, r3, #1
 8004418:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800441c:	441c      	add	r4, r3
 800441e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004422:	2200      	movs	r2, #0
 8004424:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004428:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800442c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004430:	4642      	mov	r2, r8
 8004432:	464b      	mov	r3, r9
 8004434:	1891      	adds	r1, r2, r2
 8004436:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004438:	415b      	adcs	r3, r3
 800443a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800443c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004440:	4641      	mov	r1, r8
 8004442:	1851      	adds	r1, r2, r1
 8004444:	6339      	str	r1, [r7, #48]	@ 0x30
 8004446:	4649      	mov	r1, r9
 8004448:	414b      	adcs	r3, r1
 800444a:	637b      	str	r3, [r7, #52]	@ 0x34
 800444c:	f04f 0200 	mov.w	r2, #0
 8004450:	f04f 0300 	mov.w	r3, #0
 8004454:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004458:	4659      	mov	r1, fp
 800445a:	00cb      	lsls	r3, r1, #3
 800445c:	4651      	mov	r1, sl
 800445e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004462:	4651      	mov	r1, sl
 8004464:	00ca      	lsls	r2, r1, #3
 8004466:	4610      	mov	r0, r2
 8004468:	4619      	mov	r1, r3
 800446a:	4603      	mov	r3, r0
 800446c:	4642      	mov	r2, r8
 800446e:	189b      	adds	r3, r3, r2
 8004470:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004474:	464b      	mov	r3, r9
 8004476:	460a      	mov	r2, r1
 8004478:	eb42 0303 	adc.w	r3, r2, r3
 800447c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004480:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	2200      	movs	r2, #0
 8004488:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800448c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004490:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004494:	460b      	mov	r3, r1
 8004496:	18db      	adds	r3, r3, r3
 8004498:	62bb      	str	r3, [r7, #40]	@ 0x28
 800449a:	4613      	mov	r3, r2
 800449c:	eb42 0303 	adc.w	r3, r2, r3
 80044a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80044a2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80044a6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80044aa:	f7fb fe95 	bl	80001d8 <__aeabi_uldivmod>
 80044ae:	4602      	mov	r2, r0
 80044b0:	460b      	mov	r3, r1
 80044b2:	4b0d      	ldr	r3, [pc, #52]	@ (80044e8 <UART_SetConfig+0x2d4>)
 80044b4:	fba3 1302 	umull	r1, r3, r3, r2
 80044b8:	095b      	lsrs	r3, r3, #5
 80044ba:	2164      	movs	r1, #100	@ 0x64
 80044bc:	fb01 f303 	mul.w	r3, r1, r3
 80044c0:	1ad3      	subs	r3, r2, r3
 80044c2:	00db      	lsls	r3, r3, #3
 80044c4:	3332      	adds	r3, #50	@ 0x32
 80044c6:	4a08      	ldr	r2, [pc, #32]	@ (80044e8 <UART_SetConfig+0x2d4>)
 80044c8:	fba2 2303 	umull	r2, r3, r2, r3
 80044cc:	095b      	lsrs	r3, r3, #5
 80044ce:	f003 0207 	and.w	r2, r3, #7
 80044d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4422      	add	r2, r4
 80044da:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80044dc:	e106      	b.n	80046ec <UART_SetConfig+0x4d8>
 80044de:	bf00      	nop
 80044e0:	40011000 	.word	0x40011000
 80044e4:	40011400 	.word	0x40011400
 80044e8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80044ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80044f0:	2200      	movs	r2, #0
 80044f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80044f6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80044fa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80044fe:	4642      	mov	r2, r8
 8004500:	464b      	mov	r3, r9
 8004502:	1891      	adds	r1, r2, r2
 8004504:	6239      	str	r1, [r7, #32]
 8004506:	415b      	adcs	r3, r3
 8004508:	627b      	str	r3, [r7, #36]	@ 0x24
 800450a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800450e:	4641      	mov	r1, r8
 8004510:	1854      	adds	r4, r2, r1
 8004512:	4649      	mov	r1, r9
 8004514:	eb43 0501 	adc.w	r5, r3, r1
 8004518:	f04f 0200 	mov.w	r2, #0
 800451c:	f04f 0300 	mov.w	r3, #0
 8004520:	00eb      	lsls	r3, r5, #3
 8004522:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004526:	00e2      	lsls	r2, r4, #3
 8004528:	4614      	mov	r4, r2
 800452a:	461d      	mov	r5, r3
 800452c:	4643      	mov	r3, r8
 800452e:	18e3      	adds	r3, r4, r3
 8004530:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004534:	464b      	mov	r3, r9
 8004536:	eb45 0303 	adc.w	r3, r5, r3
 800453a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800453e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	2200      	movs	r2, #0
 8004546:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800454a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800454e:	f04f 0200 	mov.w	r2, #0
 8004552:	f04f 0300 	mov.w	r3, #0
 8004556:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800455a:	4629      	mov	r1, r5
 800455c:	008b      	lsls	r3, r1, #2
 800455e:	4621      	mov	r1, r4
 8004560:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004564:	4621      	mov	r1, r4
 8004566:	008a      	lsls	r2, r1, #2
 8004568:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800456c:	f7fb fe34 	bl	80001d8 <__aeabi_uldivmod>
 8004570:	4602      	mov	r2, r0
 8004572:	460b      	mov	r3, r1
 8004574:	4b60      	ldr	r3, [pc, #384]	@ (80046f8 <UART_SetConfig+0x4e4>)
 8004576:	fba3 2302 	umull	r2, r3, r3, r2
 800457a:	095b      	lsrs	r3, r3, #5
 800457c:	011c      	lsls	r4, r3, #4
 800457e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004582:	2200      	movs	r2, #0
 8004584:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004588:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800458c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004590:	4642      	mov	r2, r8
 8004592:	464b      	mov	r3, r9
 8004594:	1891      	adds	r1, r2, r2
 8004596:	61b9      	str	r1, [r7, #24]
 8004598:	415b      	adcs	r3, r3
 800459a:	61fb      	str	r3, [r7, #28]
 800459c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80045a0:	4641      	mov	r1, r8
 80045a2:	1851      	adds	r1, r2, r1
 80045a4:	6139      	str	r1, [r7, #16]
 80045a6:	4649      	mov	r1, r9
 80045a8:	414b      	adcs	r3, r1
 80045aa:	617b      	str	r3, [r7, #20]
 80045ac:	f04f 0200 	mov.w	r2, #0
 80045b0:	f04f 0300 	mov.w	r3, #0
 80045b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80045b8:	4659      	mov	r1, fp
 80045ba:	00cb      	lsls	r3, r1, #3
 80045bc:	4651      	mov	r1, sl
 80045be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80045c2:	4651      	mov	r1, sl
 80045c4:	00ca      	lsls	r2, r1, #3
 80045c6:	4610      	mov	r0, r2
 80045c8:	4619      	mov	r1, r3
 80045ca:	4603      	mov	r3, r0
 80045cc:	4642      	mov	r2, r8
 80045ce:	189b      	adds	r3, r3, r2
 80045d0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80045d4:	464b      	mov	r3, r9
 80045d6:	460a      	mov	r2, r1
 80045d8:	eb42 0303 	adc.w	r3, r2, r3
 80045dc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80045e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	2200      	movs	r2, #0
 80045e8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80045ea:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80045ec:	f04f 0200 	mov.w	r2, #0
 80045f0:	f04f 0300 	mov.w	r3, #0
 80045f4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80045f8:	4649      	mov	r1, r9
 80045fa:	008b      	lsls	r3, r1, #2
 80045fc:	4641      	mov	r1, r8
 80045fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004602:	4641      	mov	r1, r8
 8004604:	008a      	lsls	r2, r1, #2
 8004606:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800460a:	f7fb fde5 	bl	80001d8 <__aeabi_uldivmod>
 800460e:	4602      	mov	r2, r0
 8004610:	460b      	mov	r3, r1
 8004612:	4611      	mov	r1, r2
 8004614:	4b38      	ldr	r3, [pc, #224]	@ (80046f8 <UART_SetConfig+0x4e4>)
 8004616:	fba3 2301 	umull	r2, r3, r3, r1
 800461a:	095b      	lsrs	r3, r3, #5
 800461c:	2264      	movs	r2, #100	@ 0x64
 800461e:	fb02 f303 	mul.w	r3, r2, r3
 8004622:	1acb      	subs	r3, r1, r3
 8004624:	011b      	lsls	r3, r3, #4
 8004626:	3332      	adds	r3, #50	@ 0x32
 8004628:	4a33      	ldr	r2, [pc, #204]	@ (80046f8 <UART_SetConfig+0x4e4>)
 800462a:	fba2 2303 	umull	r2, r3, r2, r3
 800462e:	095b      	lsrs	r3, r3, #5
 8004630:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004634:	441c      	add	r4, r3
 8004636:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800463a:	2200      	movs	r2, #0
 800463c:	673b      	str	r3, [r7, #112]	@ 0x70
 800463e:	677a      	str	r2, [r7, #116]	@ 0x74
 8004640:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004644:	4642      	mov	r2, r8
 8004646:	464b      	mov	r3, r9
 8004648:	1891      	adds	r1, r2, r2
 800464a:	60b9      	str	r1, [r7, #8]
 800464c:	415b      	adcs	r3, r3
 800464e:	60fb      	str	r3, [r7, #12]
 8004650:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004654:	4641      	mov	r1, r8
 8004656:	1851      	adds	r1, r2, r1
 8004658:	6039      	str	r1, [r7, #0]
 800465a:	4649      	mov	r1, r9
 800465c:	414b      	adcs	r3, r1
 800465e:	607b      	str	r3, [r7, #4]
 8004660:	f04f 0200 	mov.w	r2, #0
 8004664:	f04f 0300 	mov.w	r3, #0
 8004668:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800466c:	4659      	mov	r1, fp
 800466e:	00cb      	lsls	r3, r1, #3
 8004670:	4651      	mov	r1, sl
 8004672:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004676:	4651      	mov	r1, sl
 8004678:	00ca      	lsls	r2, r1, #3
 800467a:	4610      	mov	r0, r2
 800467c:	4619      	mov	r1, r3
 800467e:	4603      	mov	r3, r0
 8004680:	4642      	mov	r2, r8
 8004682:	189b      	adds	r3, r3, r2
 8004684:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004686:	464b      	mov	r3, r9
 8004688:	460a      	mov	r2, r1
 800468a:	eb42 0303 	adc.w	r3, r2, r3
 800468e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004690:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	2200      	movs	r2, #0
 8004698:	663b      	str	r3, [r7, #96]	@ 0x60
 800469a:	667a      	str	r2, [r7, #100]	@ 0x64
 800469c:	f04f 0200 	mov.w	r2, #0
 80046a0:	f04f 0300 	mov.w	r3, #0
 80046a4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80046a8:	4649      	mov	r1, r9
 80046aa:	008b      	lsls	r3, r1, #2
 80046ac:	4641      	mov	r1, r8
 80046ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80046b2:	4641      	mov	r1, r8
 80046b4:	008a      	lsls	r2, r1, #2
 80046b6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80046ba:	f7fb fd8d 	bl	80001d8 <__aeabi_uldivmod>
 80046be:	4602      	mov	r2, r0
 80046c0:	460b      	mov	r3, r1
 80046c2:	4b0d      	ldr	r3, [pc, #52]	@ (80046f8 <UART_SetConfig+0x4e4>)
 80046c4:	fba3 1302 	umull	r1, r3, r3, r2
 80046c8:	095b      	lsrs	r3, r3, #5
 80046ca:	2164      	movs	r1, #100	@ 0x64
 80046cc:	fb01 f303 	mul.w	r3, r1, r3
 80046d0:	1ad3      	subs	r3, r2, r3
 80046d2:	011b      	lsls	r3, r3, #4
 80046d4:	3332      	adds	r3, #50	@ 0x32
 80046d6:	4a08      	ldr	r2, [pc, #32]	@ (80046f8 <UART_SetConfig+0x4e4>)
 80046d8:	fba2 2303 	umull	r2, r3, r2, r3
 80046dc:	095b      	lsrs	r3, r3, #5
 80046de:	f003 020f 	and.w	r2, r3, #15
 80046e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4422      	add	r2, r4
 80046ea:	609a      	str	r2, [r3, #8]
}
 80046ec:	bf00      	nop
 80046ee:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80046f2:	46bd      	mov	sp, r7
 80046f4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046f8:	51eb851f 	.word	0x51eb851f

080046fc <_ZdlPv>:
 80046fc:	f000 b83a 	b.w	8004774 <free>

08004700 <_ZdlPvj>:
 8004700:	f7ff bffc 	b.w	80046fc <_ZdlPv>

08004704 <_Znwj>:
 8004704:	2801      	cmp	r0, #1
 8004706:	bf38      	it	cc
 8004708:	2001      	movcc	r0, #1
 800470a:	b510      	push	{r4, lr}
 800470c:	4604      	mov	r4, r0
 800470e:	4620      	mov	r0, r4
 8004710:	f000 f828 	bl	8004764 <malloc>
 8004714:	b100      	cbz	r0, 8004718 <_Znwj+0x14>
 8004716:	bd10      	pop	{r4, pc}
 8004718:	f000 f814 	bl	8004744 <_ZSt15get_new_handlerv>
 800471c:	b908      	cbnz	r0, 8004722 <_Znwj+0x1e>
 800471e:	f000 f819 	bl	8004754 <abort>
 8004722:	4780      	blx	r0
 8004724:	e7f3      	b.n	800470e <_Znwj+0xa>

08004726 <_ZNSaIcEC1Ev>:
 8004726:	4770      	bx	lr

08004728 <_ZNSaIcEC1ERKS_>:
 8004728:	4770      	bx	lr

0800472a <_ZNSaIcED1Ev>:
 800472a:	4770      	bx	lr

0800472c <_ZSt17__throw_bad_allocv>:
 800472c:	b508      	push	{r3, lr}
 800472e:	f000 f811 	bl	8004754 <abort>

08004732 <_ZSt28__throw_bad_array_new_lengthv>:
 8004732:	b508      	push	{r3, lr}
 8004734:	f000 f80e 	bl	8004754 <abort>

08004738 <_ZSt19__throw_logic_errorPKc>:
 8004738:	b508      	push	{r3, lr}
 800473a:	f000 f80b 	bl	8004754 <abort>

0800473e <_ZSt20__throw_length_errorPKc>:
 800473e:	b508      	push	{r3, lr}
 8004740:	f000 f808 	bl	8004754 <abort>

08004744 <_ZSt15get_new_handlerv>:
 8004744:	4b02      	ldr	r3, [pc, #8]	@ (8004750 <_ZSt15get_new_handlerv+0xc>)
 8004746:	6818      	ldr	r0, [r3, #0]
 8004748:	f3bf 8f5b 	dmb	ish
 800474c:	4770      	bx	lr
 800474e:	bf00      	nop
 8004750:	200004a4 	.word	0x200004a4

08004754 <abort>:
 8004754:	b508      	push	{r3, lr}
 8004756:	2006      	movs	r0, #6
 8004758:	f000 f8f2 	bl	8004940 <raise>
 800475c:	2001      	movs	r0, #1
 800475e:	f7fd fbfc 	bl	8001f5a <_exit>
	...

08004764 <malloc>:
 8004764:	4b02      	ldr	r3, [pc, #8]	@ (8004770 <malloc+0xc>)
 8004766:	4601      	mov	r1, r0
 8004768:	6818      	ldr	r0, [r3, #0]
 800476a:	f000 b82d 	b.w	80047c8 <_malloc_r>
 800476e:	bf00      	nop
 8004770:	2000000c 	.word	0x2000000c

08004774 <free>:
 8004774:	4b02      	ldr	r3, [pc, #8]	@ (8004780 <free+0xc>)
 8004776:	4601      	mov	r1, r0
 8004778:	6818      	ldr	r0, [r3, #0]
 800477a:	f000 b947 	b.w	8004a0c <_free_r>
 800477e:	bf00      	nop
 8004780:	2000000c 	.word	0x2000000c

08004784 <sbrk_aligned>:
 8004784:	b570      	push	{r4, r5, r6, lr}
 8004786:	4e0f      	ldr	r6, [pc, #60]	@ (80047c4 <sbrk_aligned+0x40>)
 8004788:	460c      	mov	r4, r1
 800478a:	6831      	ldr	r1, [r6, #0]
 800478c:	4605      	mov	r5, r0
 800478e:	b911      	cbnz	r1, 8004796 <sbrk_aligned+0x12>
 8004790:	f000 f8f2 	bl	8004978 <_sbrk_r>
 8004794:	6030      	str	r0, [r6, #0]
 8004796:	4621      	mov	r1, r4
 8004798:	4628      	mov	r0, r5
 800479a:	f000 f8ed 	bl	8004978 <_sbrk_r>
 800479e:	1c43      	adds	r3, r0, #1
 80047a0:	d103      	bne.n	80047aa <sbrk_aligned+0x26>
 80047a2:	f04f 34ff 	mov.w	r4, #4294967295
 80047a6:	4620      	mov	r0, r4
 80047a8:	bd70      	pop	{r4, r5, r6, pc}
 80047aa:	1cc4      	adds	r4, r0, #3
 80047ac:	f024 0403 	bic.w	r4, r4, #3
 80047b0:	42a0      	cmp	r0, r4
 80047b2:	d0f8      	beq.n	80047a6 <sbrk_aligned+0x22>
 80047b4:	1a21      	subs	r1, r4, r0
 80047b6:	4628      	mov	r0, r5
 80047b8:	f000 f8de 	bl	8004978 <_sbrk_r>
 80047bc:	3001      	adds	r0, #1
 80047be:	d1f2      	bne.n	80047a6 <sbrk_aligned+0x22>
 80047c0:	e7ef      	b.n	80047a2 <sbrk_aligned+0x1e>
 80047c2:	bf00      	nop
 80047c4:	200004a8 	.word	0x200004a8

080047c8 <_malloc_r>:
 80047c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80047cc:	1ccd      	adds	r5, r1, #3
 80047ce:	f025 0503 	bic.w	r5, r5, #3
 80047d2:	3508      	adds	r5, #8
 80047d4:	2d0c      	cmp	r5, #12
 80047d6:	bf38      	it	cc
 80047d8:	250c      	movcc	r5, #12
 80047da:	2d00      	cmp	r5, #0
 80047dc:	4606      	mov	r6, r0
 80047de:	db01      	blt.n	80047e4 <_malloc_r+0x1c>
 80047e0:	42a9      	cmp	r1, r5
 80047e2:	d904      	bls.n	80047ee <_malloc_r+0x26>
 80047e4:	230c      	movs	r3, #12
 80047e6:	6033      	str	r3, [r6, #0]
 80047e8:	2000      	movs	r0, #0
 80047ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80047ee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80048c4 <_malloc_r+0xfc>
 80047f2:	f000 f869 	bl	80048c8 <__malloc_lock>
 80047f6:	f8d8 3000 	ldr.w	r3, [r8]
 80047fa:	461c      	mov	r4, r3
 80047fc:	bb44      	cbnz	r4, 8004850 <_malloc_r+0x88>
 80047fe:	4629      	mov	r1, r5
 8004800:	4630      	mov	r0, r6
 8004802:	f7ff ffbf 	bl	8004784 <sbrk_aligned>
 8004806:	1c43      	adds	r3, r0, #1
 8004808:	4604      	mov	r4, r0
 800480a:	d158      	bne.n	80048be <_malloc_r+0xf6>
 800480c:	f8d8 4000 	ldr.w	r4, [r8]
 8004810:	4627      	mov	r7, r4
 8004812:	2f00      	cmp	r7, #0
 8004814:	d143      	bne.n	800489e <_malloc_r+0xd6>
 8004816:	2c00      	cmp	r4, #0
 8004818:	d04b      	beq.n	80048b2 <_malloc_r+0xea>
 800481a:	6823      	ldr	r3, [r4, #0]
 800481c:	4639      	mov	r1, r7
 800481e:	4630      	mov	r0, r6
 8004820:	eb04 0903 	add.w	r9, r4, r3
 8004824:	f000 f8a8 	bl	8004978 <_sbrk_r>
 8004828:	4581      	cmp	r9, r0
 800482a:	d142      	bne.n	80048b2 <_malloc_r+0xea>
 800482c:	6821      	ldr	r1, [r4, #0]
 800482e:	1a6d      	subs	r5, r5, r1
 8004830:	4629      	mov	r1, r5
 8004832:	4630      	mov	r0, r6
 8004834:	f7ff ffa6 	bl	8004784 <sbrk_aligned>
 8004838:	3001      	adds	r0, #1
 800483a:	d03a      	beq.n	80048b2 <_malloc_r+0xea>
 800483c:	6823      	ldr	r3, [r4, #0]
 800483e:	442b      	add	r3, r5
 8004840:	6023      	str	r3, [r4, #0]
 8004842:	f8d8 3000 	ldr.w	r3, [r8]
 8004846:	685a      	ldr	r2, [r3, #4]
 8004848:	bb62      	cbnz	r2, 80048a4 <_malloc_r+0xdc>
 800484a:	f8c8 7000 	str.w	r7, [r8]
 800484e:	e00f      	b.n	8004870 <_malloc_r+0xa8>
 8004850:	6822      	ldr	r2, [r4, #0]
 8004852:	1b52      	subs	r2, r2, r5
 8004854:	d420      	bmi.n	8004898 <_malloc_r+0xd0>
 8004856:	2a0b      	cmp	r2, #11
 8004858:	d917      	bls.n	800488a <_malloc_r+0xc2>
 800485a:	1961      	adds	r1, r4, r5
 800485c:	42a3      	cmp	r3, r4
 800485e:	6025      	str	r5, [r4, #0]
 8004860:	bf18      	it	ne
 8004862:	6059      	strne	r1, [r3, #4]
 8004864:	6863      	ldr	r3, [r4, #4]
 8004866:	bf08      	it	eq
 8004868:	f8c8 1000 	streq.w	r1, [r8]
 800486c:	5162      	str	r2, [r4, r5]
 800486e:	604b      	str	r3, [r1, #4]
 8004870:	4630      	mov	r0, r6
 8004872:	f000 f82f 	bl	80048d4 <__malloc_unlock>
 8004876:	f104 000b 	add.w	r0, r4, #11
 800487a:	1d23      	adds	r3, r4, #4
 800487c:	f020 0007 	bic.w	r0, r0, #7
 8004880:	1ac2      	subs	r2, r0, r3
 8004882:	bf1c      	itt	ne
 8004884:	1a1b      	subne	r3, r3, r0
 8004886:	50a3      	strne	r3, [r4, r2]
 8004888:	e7af      	b.n	80047ea <_malloc_r+0x22>
 800488a:	6862      	ldr	r2, [r4, #4]
 800488c:	42a3      	cmp	r3, r4
 800488e:	bf0c      	ite	eq
 8004890:	f8c8 2000 	streq.w	r2, [r8]
 8004894:	605a      	strne	r2, [r3, #4]
 8004896:	e7eb      	b.n	8004870 <_malloc_r+0xa8>
 8004898:	4623      	mov	r3, r4
 800489a:	6864      	ldr	r4, [r4, #4]
 800489c:	e7ae      	b.n	80047fc <_malloc_r+0x34>
 800489e:	463c      	mov	r4, r7
 80048a0:	687f      	ldr	r7, [r7, #4]
 80048a2:	e7b6      	b.n	8004812 <_malloc_r+0x4a>
 80048a4:	461a      	mov	r2, r3
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	42a3      	cmp	r3, r4
 80048aa:	d1fb      	bne.n	80048a4 <_malloc_r+0xdc>
 80048ac:	2300      	movs	r3, #0
 80048ae:	6053      	str	r3, [r2, #4]
 80048b0:	e7de      	b.n	8004870 <_malloc_r+0xa8>
 80048b2:	230c      	movs	r3, #12
 80048b4:	6033      	str	r3, [r6, #0]
 80048b6:	4630      	mov	r0, r6
 80048b8:	f000 f80c 	bl	80048d4 <__malloc_unlock>
 80048bc:	e794      	b.n	80047e8 <_malloc_r+0x20>
 80048be:	6005      	str	r5, [r0, #0]
 80048c0:	e7d6      	b.n	8004870 <_malloc_r+0xa8>
 80048c2:	bf00      	nop
 80048c4:	200004ac 	.word	0x200004ac

080048c8 <__malloc_lock>:
 80048c8:	4801      	ldr	r0, [pc, #4]	@ (80048d0 <__malloc_lock+0x8>)
 80048ca:	f000 b88f 	b.w	80049ec <__retarget_lock_acquire_recursive>
 80048ce:	bf00      	nop
 80048d0:	200005ec 	.word	0x200005ec

080048d4 <__malloc_unlock>:
 80048d4:	4801      	ldr	r0, [pc, #4]	@ (80048dc <__malloc_unlock+0x8>)
 80048d6:	f000 b88a 	b.w	80049ee <__retarget_lock_release_recursive>
 80048da:	bf00      	nop
 80048dc:	200005ec 	.word	0x200005ec

080048e0 <memset>:
 80048e0:	4402      	add	r2, r0
 80048e2:	4603      	mov	r3, r0
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d100      	bne.n	80048ea <memset+0xa>
 80048e8:	4770      	bx	lr
 80048ea:	f803 1b01 	strb.w	r1, [r3], #1
 80048ee:	e7f9      	b.n	80048e4 <memset+0x4>

080048f0 <_raise_r>:
 80048f0:	291f      	cmp	r1, #31
 80048f2:	b538      	push	{r3, r4, r5, lr}
 80048f4:	4605      	mov	r5, r0
 80048f6:	460c      	mov	r4, r1
 80048f8:	d904      	bls.n	8004904 <_raise_r+0x14>
 80048fa:	2316      	movs	r3, #22
 80048fc:	6003      	str	r3, [r0, #0]
 80048fe:	f04f 30ff 	mov.w	r0, #4294967295
 8004902:	bd38      	pop	{r3, r4, r5, pc}
 8004904:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8004906:	b112      	cbz	r2, 800490e <_raise_r+0x1e>
 8004908:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800490c:	b94b      	cbnz	r3, 8004922 <_raise_r+0x32>
 800490e:	4628      	mov	r0, r5
 8004910:	f000 f830 	bl	8004974 <_getpid_r>
 8004914:	4622      	mov	r2, r4
 8004916:	4601      	mov	r1, r0
 8004918:	4628      	mov	r0, r5
 800491a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800491e:	f000 b817 	b.w	8004950 <_kill_r>
 8004922:	2b01      	cmp	r3, #1
 8004924:	d00a      	beq.n	800493c <_raise_r+0x4c>
 8004926:	1c59      	adds	r1, r3, #1
 8004928:	d103      	bne.n	8004932 <_raise_r+0x42>
 800492a:	2316      	movs	r3, #22
 800492c:	6003      	str	r3, [r0, #0]
 800492e:	2001      	movs	r0, #1
 8004930:	e7e7      	b.n	8004902 <_raise_r+0x12>
 8004932:	2100      	movs	r1, #0
 8004934:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8004938:	4620      	mov	r0, r4
 800493a:	4798      	blx	r3
 800493c:	2000      	movs	r0, #0
 800493e:	e7e0      	b.n	8004902 <_raise_r+0x12>

08004940 <raise>:
 8004940:	4b02      	ldr	r3, [pc, #8]	@ (800494c <raise+0xc>)
 8004942:	4601      	mov	r1, r0
 8004944:	6818      	ldr	r0, [r3, #0]
 8004946:	f7ff bfd3 	b.w	80048f0 <_raise_r>
 800494a:	bf00      	nop
 800494c:	2000000c 	.word	0x2000000c

08004950 <_kill_r>:
 8004950:	b538      	push	{r3, r4, r5, lr}
 8004952:	4d07      	ldr	r5, [pc, #28]	@ (8004970 <_kill_r+0x20>)
 8004954:	2300      	movs	r3, #0
 8004956:	4604      	mov	r4, r0
 8004958:	4608      	mov	r0, r1
 800495a:	4611      	mov	r1, r2
 800495c:	602b      	str	r3, [r5, #0]
 800495e:	f7fd faec 	bl	8001f3a <_kill>
 8004962:	1c43      	adds	r3, r0, #1
 8004964:	d102      	bne.n	800496c <_kill_r+0x1c>
 8004966:	682b      	ldr	r3, [r5, #0]
 8004968:	b103      	cbz	r3, 800496c <_kill_r+0x1c>
 800496a:	6023      	str	r3, [r4, #0]
 800496c:	bd38      	pop	{r3, r4, r5, pc}
 800496e:	bf00      	nop
 8004970:	200005e8 	.word	0x200005e8

08004974 <_getpid_r>:
 8004974:	f7fd bad9 	b.w	8001f2a <_getpid>

08004978 <_sbrk_r>:
 8004978:	b538      	push	{r3, r4, r5, lr}
 800497a:	4d06      	ldr	r5, [pc, #24]	@ (8004994 <_sbrk_r+0x1c>)
 800497c:	2300      	movs	r3, #0
 800497e:	4604      	mov	r4, r0
 8004980:	4608      	mov	r0, r1
 8004982:	602b      	str	r3, [r5, #0]
 8004984:	f7fd faf4 	bl	8001f70 <_sbrk>
 8004988:	1c43      	adds	r3, r0, #1
 800498a:	d102      	bne.n	8004992 <_sbrk_r+0x1a>
 800498c:	682b      	ldr	r3, [r5, #0]
 800498e:	b103      	cbz	r3, 8004992 <_sbrk_r+0x1a>
 8004990:	6023      	str	r3, [r4, #0]
 8004992:	bd38      	pop	{r3, r4, r5, pc}
 8004994:	200005e8 	.word	0x200005e8

08004998 <__errno>:
 8004998:	4b01      	ldr	r3, [pc, #4]	@ (80049a0 <__errno+0x8>)
 800499a:	6818      	ldr	r0, [r3, #0]
 800499c:	4770      	bx	lr
 800499e:	bf00      	nop
 80049a0:	2000000c 	.word	0x2000000c

080049a4 <__libc_init_array>:
 80049a4:	b570      	push	{r4, r5, r6, lr}
 80049a6:	4d0d      	ldr	r5, [pc, #52]	@ (80049dc <__libc_init_array+0x38>)
 80049a8:	4c0d      	ldr	r4, [pc, #52]	@ (80049e0 <__libc_init_array+0x3c>)
 80049aa:	1b64      	subs	r4, r4, r5
 80049ac:	10a4      	asrs	r4, r4, #2
 80049ae:	2600      	movs	r6, #0
 80049b0:	42a6      	cmp	r6, r4
 80049b2:	d109      	bne.n	80049c8 <__libc_init_array+0x24>
 80049b4:	4d0b      	ldr	r5, [pc, #44]	@ (80049e4 <__libc_init_array+0x40>)
 80049b6:	4c0c      	ldr	r4, [pc, #48]	@ (80049e8 <__libc_init_array+0x44>)
 80049b8:	f000 f872 	bl	8004aa0 <_init>
 80049bc:	1b64      	subs	r4, r4, r5
 80049be:	10a4      	asrs	r4, r4, #2
 80049c0:	2600      	movs	r6, #0
 80049c2:	42a6      	cmp	r6, r4
 80049c4:	d105      	bne.n	80049d2 <__libc_init_array+0x2e>
 80049c6:	bd70      	pop	{r4, r5, r6, pc}
 80049c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80049cc:	4798      	blx	r3
 80049ce:	3601      	adds	r6, #1
 80049d0:	e7ee      	b.n	80049b0 <__libc_init_array+0xc>
 80049d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80049d6:	4798      	blx	r3
 80049d8:	3601      	adds	r6, #1
 80049da:	e7f2      	b.n	80049c2 <__libc_init_array+0x1e>
 80049dc:	08004b3c 	.word	0x08004b3c
 80049e0:	08004b3c 	.word	0x08004b3c
 80049e4:	08004b3c 	.word	0x08004b3c
 80049e8:	08004b40 	.word	0x08004b40

080049ec <__retarget_lock_acquire_recursive>:
 80049ec:	4770      	bx	lr

080049ee <__retarget_lock_release_recursive>:
 80049ee:	4770      	bx	lr

080049f0 <memcpy>:
 80049f0:	440a      	add	r2, r1
 80049f2:	4291      	cmp	r1, r2
 80049f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80049f8:	d100      	bne.n	80049fc <memcpy+0xc>
 80049fa:	4770      	bx	lr
 80049fc:	b510      	push	{r4, lr}
 80049fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004a02:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004a06:	4291      	cmp	r1, r2
 8004a08:	d1f9      	bne.n	80049fe <memcpy+0xe>
 8004a0a:	bd10      	pop	{r4, pc}

08004a0c <_free_r>:
 8004a0c:	b538      	push	{r3, r4, r5, lr}
 8004a0e:	4605      	mov	r5, r0
 8004a10:	2900      	cmp	r1, #0
 8004a12:	d041      	beq.n	8004a98 <_free_r+0x8c>
 8004a14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a18:	1f0c      	subs	r4, r1, #4
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	bfb8      	it	lt
 8004a1e:	18e4      	addlt	r4, r4, r3
 8004a20:	f7ff ff52 	bl	80048c8 <__malloc_lock>
 8004a24:	4a1d      	ldr	r2, [pc, #116]	@ (8004a9c <_free_r+0x90>)
 8004a26:	6813      	ldr	r3, [r2, #0]
 8004a28:	b933      	cbnz	r3, 8004a38 <_free_r+0x2c>
 8004a2a:	6063      	str	r3, [r4, #4]
 8004a2c:	6014      	str	r4, [r2, #0]
 8004a2e:	4628      	mov	r0, r5
 8004a30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004a34:	f7ff bf4e 	b.w	80048d4 <__malloc_unlock>
 8004a38:	42a3      	cmp	r3, r4
 8004a3a:	d908      	bls.n	8004a4e <_free_r+0x42>
 8004a3c:	6820      	ldr	r0, [r4, #0]
 8004a3e:	1821      	adds	r1, r4, r0
 8004a40:	428b      	cmp	r3, r1
 8004a42:	bf01      	itttt	eq
 8004a44:	6819      	ldreq	r1, [r3, #0]
 8004a46:	685b      	ldreq	r3, [r3, #4]
 8004a48:	1809      	addeq	r1, r1, r0
 8004a4a:	6021      	streq	r1, [r4, #0]
 8004a4c:	e7ed      	b.n	8004a2a <_free_r+0x1e>
 8004a4e:	461a      	mov	r2, r3
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	b10b      	cbz	r3, 8004a58 <_free_r+0x4c>
 8004a54:	42a3      	cmp	r3, r4
 8004a56:	d9fa      	bls.n	8004a4e <_free_r+0x42>
 8004a58:	6811      	ldr	r1, [r2, #0]
 8004a5a:	1850      	adds	r0, r2, r1
 8004a5c:	42a0      	cmp	r0, r4
 8004a5e:	d10b      	bne.n	8004a78 <_free_r+0x6c>
 8004a60:	6820      	ldr	r0, [r4, #0]
 8004a62:	4401      	add	r1, r0
 8004a64:	1850      	adds	r0, r2, r1
 8004a66:	4283      	cmp	r3, r0
 8004a68:	6011      	str	r1, [r2, #0]
 8004a6a:	d1e0      	bne.n	8004a2e <_free_r+0x22>
 8004a6c:	6818      	ldr	r0, [r3, #0]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	6053      	str	r3, [r2, #4]
 8004a72:	4408      	add	r0, r1
 8004a74:	6010      	str	r0, [r2, #0]
 8004a76:	e7da      	b.n	8004a2e <_free_r+0x22>
 8004a78:	d902      	bls.n	8004a80 <_free_r+0x74>
 8004a7a:	230c      	movs	r3, #12
 8004a7c:	602b      	str	r3, [r5, #0]
 8004a7e:	e7d6      	b.n	8004a2e <_free_r+0x22>
 8004a80:	6820      	ldr	r0, [r4, #0]
 8004a82:	1821      	adds	r1, r4, r0
 8004a84:	428b      	cmp	r3, r1
 8004a86:	bf04      	itt	eq
 8004a88:	6819      	ldreq	r1, [r3, #0]
 8004a8a:	685b      	ldreq	r3, [r3, #4]
 8004a8c:	6063      	str	r3, [r4, #4]
 8004a8e:	bf04      	itt	eq
 8004a90:	1809      	addeq	r1, r1, r0
 8004a92:	6021      	streq	r1, [r4, #0]
 8004a94:	6054      	str	r4, [r2, #4]
 8004a96:	e7ca      	b.n	8004a2e <_free_r+0x22>
 8004a98:	bd38      	pop	{r3, r4, r5, pc}
 8004a9a:	bf00      	nop
 8004a9c:	200004ac 	.word	0x200004ac

08004aa0 <_init>:
 8004aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aa2:	bf00      	nop
 8004aa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004aa6:	bc08      	pop	{r3}
 8004aa8:	469e      	mov	lr, r3
 8004aaa:	4770      	bx	lr

08004aac <_fini>:
 8004aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aae:	bf00      	nop
 8004ab0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ab2:	bc08      	pop	{r3}
 8004ab4:	469e      	mov	lr, r3
 8004ab6:	4770      	bx	lr
